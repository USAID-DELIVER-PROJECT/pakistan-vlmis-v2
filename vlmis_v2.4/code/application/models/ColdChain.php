<?php

/**
 * Model_ColdChain
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Cold Chain
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_ColdChain extends Model_Base {

    private $_table;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('ColdChain');
    }

    public function getListing() {
        $wh_id = $this->_identity->getWarehouseId();
        $str_sql = $this->_em->createQueryBuilder()
                ->select("cc.pk_id,cc.asset_id,cc.estimate_life,"
                        . "cc.working_since,cc.serial_number,cc.ccm_asset_type_id,"
                        . "cc.capacity,cc.ccm_status_list_id,cmod.ccm_model_name,"
                        . "cmk.ccm_make_name,csl.ccm_status_list_name,asst.pk_id as type_asset_id,"
                        . "asst.asset_type_name,cc.warehouse_id,tw.warehouse_name,cc.created_by,cc.created_date")
                ->from("Model_ColdChain cc")
                ->leftJoin("cc.CcmMakes cmk")
                ->leftJoin("cc.CcmModels cmod")
                ->leftJoin("cc.Warehouses tw")
                ->leftJoin("cc.CcmStatusList csl")
                ->leftJoin("cc.CcmAssetTypes asst")
                ->where("cc.warehouse_id=" . $wh_id)
                ->andWhere("tw.status=1");
        $result = $str_sql->fetchArray();
        return $result;
    }

    public function getColdchainByBatch() {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
            ccm_makes.ccm_make_name,
            ccm_models.ccm_model_name,
            cold_chain.asset_id,
            cold_chain.pk_id
            FROM
            cold_chain
            INNER JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
            INNER JOIN placements ON placements.placement_location_id = placement_locations.pk_id
            INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
            INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
            WHERE
            cold_chain.warehouse_id = 1 AND
            placement_locations.location_type = 'ColdChain' AND
            placements.stock_batch_id = '" . $this->form_values['batch'] . "'");
        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function getAssetByLocation($location_id) {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
                    cold_chain.asset_id
            FROM
                    placement_locations
            INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
            WHERE
                    placement_locations.pk_id = $location_id");
        $str_sql->execute();
        $data = $str_sql->fetchAll();

        if (count($data) > 0) {
            return $data[0]['asset_id'];
        } else {
            return '';
        }
    }

    public function getColdchainModelsByFacilityType() {
        $type = 1;
        if (!empty($this->form_values['facility_type'])) {
            $facilitytype = $this->form_values['facility_type'];
        } else {
            $facilitytype = 1;
        }

        $where = array();
        $str_where = "";

        if (!empty($this->form_values['combo1'])) {
            $where[] = "warehouses.province_id = " . $this->form_values['combo1'];
        }
        if (!empty($this->form_values['combo2'])) {
            $where[] = "warehouses.district_id = " . $this->form_values['combo2'];
        }
        $where[] = "warehouses.status = 1";
        if (count($where) > 0) {
            $str_where .= " AND " . implode(" AND ", $where);
        }
       $qry = "SELECT
                    ccm_models.ccm_model_name,
                    ccm_models.pk_id,
                    warehouses.warehouse_type_id,
                    COUNT(ccm_models.pk_id) AS TotalAssets
                FROM
                    cold_chain
                INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
                INNER JOIN warehouses ON cold_chain.warehouse_id = warehouses.pk_id
                INNER JOIN ccm_asset_types AS Asset_Type ON cold_chain.ccm_asset_type_id = Asset_Type.pk_id
                WHERE
                (
                    Asset_Type.pk_id = " . Model_CcmAssetTypes::REFRIGERATOR . "
                    OR Asset_Type.parent_id = " . Model_CcmAssetTypes::REFRIGERATOR . "
                )
                AND warehouses. STATUS = 1
                GROUP BY
                    ccm_models.pk_id,
                    Asset_Type.pk_id LIMIT 500";
        //echo $qry;
        //AND warehouses.warehouse_type_id=$facilitytype
        //die($qry);
        $row = $this->_em->getConnection()->prepare($qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getColdchainByAssetType() {
        $wh_id = $this->_identity->getWarehouseId();
        if (!empty($this->form_values['type_id'])) {
            $type = $this->form_values['type_id'];
        } else {
            $type = "1,3";
        }
        $qry = 'SELECT DISTINCT
                CONCAT(cold_chain.asset_id," (",ccm_models.ccm_model_name,")") AS asset_name,
                cold_chain.pk_id, ccm_makes.ccm_make_name AS make_name
                FROM
                cold_chain
                INNER JOIN placement_locations ON placement_locations.location_id = cold_chain.pk_id
                INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
                INNER JOIN ccm_asset_types ON cold_chain.ccm_asset_type_id = ccm_asset_types.pk_id
                INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
                WHERE
                cold_chain.warehouse_id = ' . $wh_id . ' AND
                placement_locations.location_type = ' . Model_PlacementLocations::LOCATIONTYPE_CCM . ' AND
               (ccm_asset_types.parent_id IN (' . $type . ') OR  cold_chain.ccm_asset_type_id IN (' . $type . ')) ';
        $row = $this->_em->getConnection()->prepare($qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getRefrigeratorModelsByWorkingStatus() {
        $qry = "SELECT
            ccm_models.ccm_model_name,
            Count(cold_chain.ccm_model_id) AS Total,
            Sum(IF(ccm_status_history.ccm_status_list_id=1, 1, 0)) AS Working,
            ROUND((SUM(IF(ccm_status_history.ccm_status_list_id=1, 1, 0))/COUNT(cold_chain.warehouse_id)) * 100, 1) AS WorkingPer,
            Sum(IF(ccm_status_history.ccm_status_list_id=2, 1, 0)) AS NeedsService,
            ROUND((SUM(IF(ccm_status_history.ccm_status_list_id=2, 1, 0))/COUNT(cold_chain.warehouse_id)) * 100, 1) AS NeedsServicePer,
            Sum(IF(ccm_status_history.ccm_status_list_id=3, 1, 0)) AS NotWorking,
            ROUND((SUM(IF(ccm_status_history.ccm_status_list_id=3, 1, 0))/COUNT(cold_chain.warehouse_id)) * 100, 1) AS NotWorkingPer
            FROM
             ccm_models
            INNER JOIN cold_chain ON cold_chain.ccm_model_id = ccm_models.pk_id
            INNER JOIN ccm_status_history ON cold_chain.ccm_status_history_id = ccm_status_history.pk_id
            INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
            INNER JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
            WHERE
                AssetMainType.pk_id = 1
            GROUP BY
             ccm_models.pk_id";

        $row = $this->_em->getConnection()->prepare($qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getColdChainByWarehouseType($warehouse_type) {
        $qry = "SELECT
                    ccm_models.pk_id,
                    COUNT(cold_chain.ccm_model_id) AS TotalAssets
                FROM
                    cold_chain
                INNER JOIN warehouses ON cold_chain.warehouse_id = warehouses.pk_id
                INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
                WHERE
                    warehouses.warehouse_type_id = " . $warehouse_type . "
                     and warehouses.status = 1
                AND ccm_models.ccm_asset_type_id = 1
                GROUP BY
                    cold_chain.ccm_model_id";
        //print $qry.'<hr>';
        $row = $this->_em->getConnection()->prepare($qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function updateIcePacks() {
        $cc_id = $this->form_values['cold_chain_id'];
        $qty = $this->form_values['quantity'];
        foreach (array_combine($cc_id, $qty) as $cold_chain_id => $quantity) {
            $cold_chain = $this->_table->find($cold_chain_id);
            $cold_chain->setQuantity($quantity);
            $this->_em->persist($cold_chain);
        }
        $this->_em->flush();
    }

    public function getAllNonQuantityAsets() {
        $auth = App_Auth::getInstance();

        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.autoAssetId as generateAssetId,"
                        . "at.pkId as ccmAssetId,at.assetTypeName,"
                        . "cm.reasons,cm.utilizations")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmModel', 'cm')
                ->join('cc.warehouse', 'w')
                ->join('cc.ccmAssetType', 'at')
                ->where('w.pkId=' . $auth->getWarehouseId())
                ->Andwhere('at.pkId IN (1,3,6,7)');

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    /**
     * @uses API
     * @param type $wh_id
     */
    public function getLocationByWhId($wh_id, $type = '') {

        $em = Zend_Registry::get('doctrine');
        $str_sql = "SELECT
        ccm_asset_types.asset_type_name,
        cold_chain.pk_id,
        cold_chain.asset_id,
        cold_chain.serial_number,
        ccm_models.ccm_asset_type_id,
        ROUND(
                        (
                                Sum(placements.quantity) * stakeholder_item_pack_sizes.volum_per_vial
                        ) / (
                                (
                                        ccm_models.net_capacity_20 + ccm_models.net_capacity_4
                                ) * 1000
                        ) * 100,
                        3
                ) AS filled_percent
        FROM
        ccm_asset_types
        INNER JOIN ccm_models ON ccm_models.ccm_asset_type_id = ccm_asset_types.pk_id
        INNER JOIN cold_chain ON cold_chain.ccm_model_id = ccm_models.pk_id
        LEFT JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
        LEFT JOIN placements ON placements.placement_location_id = placement_locations.pk_id
        LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
        LEFT JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
        INNER JOIN stakeholder_item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
        WHERE ";
        if (!empty($type)) {
            $str_sql .= "ccm_models.ccm_asset_type_id IN ($type) AND ";
        }

        $str_sql .= "cold_chain.warehouse_id = $wh_id
            GROUP BY cold_chain.pk_id";
        $row = $em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    /**
     * @uses API
     * @param integer $wh_id
     * @param varchar $batch_no
     */
    public function searchBatchByBatchNo($wh_id, $batch_no) {

        $em = Zend_Registry::get('doctrine');
        $str_sql = "SELECT
            ccm_asset_types.asset_type_name,
            cold_chain.pk_id,
            cold_chain.asset_id,
            cold_chain.serial_number,
            ccm_models.ccm_asset_type_id,
            ROUND((Sum(placements.quantity) * item_pack_sizes.volum_per_vial) / ((ccm_models.net_capacity_20+ccm_models.net_capacity_4)*1000) * 100,3) AS filled_percent
            FROM
            ccm_asset_types
            INNER JOIN ccm_models ON ccm_models.ccm_asset_type_id = ccm_asset_types.pk_id
            INNER JOIN cold_chain ON cold_chain.ccm_model_id = ccm_models.pk_id
            LEFT JOIN placements ON cold_chain.pk_id = placements.ccm_id
            LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
            LEFT JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
            WHERE cold_chain.warehouse_id = $wh_id AND
            stock_batch.number = '$batch_no'
            GROUP BY cold_chain.pk_id";
        $row = $em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    /**
     * @uses API
     * @param integer $asset_id
     */
    public function searchItemByLocationId($asset_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.pkId as itemId, ips.itemName,
                    w.pkId as warehouseId,w.warehouseName")
                ->from('Placements', 'p')
                ->join('p.ccm', 'cc')
                ->join('p.stockBatch', 'sb')
                ->join('sb.itemPackSize', 'ips')
                ->join('cc.warehouse', 'w')
                ->where("cc.pkId = $asset_id");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getWarehouseNamesAssetStatus() {
//    $str_sql = $this->_em->createQueryBuilder()
//                ->select("w.pkId,w.warehouseName")
//                ->from('WarehouseUsers', 'wu')
//                ->join('wu.warehouse', 'w')
//                ->join('wu.user', 'u')
//                ->where('u.pkId=' . $this->_user_id);
//
//        $row = $str_sql->getQuery()->getResult();
//        if (!empty($row) && count($row) > 0) {
//            return $row;
//        } else {
//            return false;
//        }
        $querypro = "SELECT
                            w.pk_id,
                            w.warehouse_name,
                            MAX(csh.status_date) as status_date
                    FROM
                            warehouses w
LEFT JOIN cold_chain c ON c.warehouse_id = w.pk_id
LEFT JOIN ccm_status_history csh ON c.ccm_status_history_id = csh.pk_id
INNER JOIN warehouse_users wu ON w.pk_id = wu.warehouse_id
                    WHERE
                            wu.user_id = $this->_user_id
                            and w.status = 1
                    GROUP BY w.warehouse_name  ";
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        return $row->fetchAll();
    }

    public function getAllNonQuantityAssetsUpdate() {
        $auth = App_Auth::getInstance();
        $s_sql = $this->_em->createQueryBuilder()
                ->select("MAX(cs.pkId)")
                ->from("CcmStatusHistory", "cs");
        $max_id = $s_sql->getQuery()->getResult();
        $sub_sql = $this->_em->createQueryBuilder()
                ->select("MAX(cs.statusDate)")
                ->from("CcmStatusHistory", "cs")
                ->where("cs.pkId='" . $max_id[0][1] . "'");
        $max_date = $sub_sql->getQuery()->getResult();

        $sub_sql_w = $this->_em->createQueryBuilder()
                ->select("w.pkId")
                ->from('WarehouseUsers', 'wu')
                ->join('wu.warehouse', 'w')
                ->join('wu.user', 'u')
                ->where('u.pkId=' . $this->_user_id);
        $sub_sql_w->getQuery()->getSql();
        $row_sub = $sub_sql_w->getQuery()->getResult();
        foreach ($row_sub as $rs) {
            $wh_id[] = $rs['pkId'];
            $warehouse_id = implode(',', $wh_id);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("Max(csh.statusDate),at.pkId as ccmAssetId,cc.autoAssetId as generateAssetId,"
                        . "at.assetTypeName ,csh.temperatureAlarm,csl.pkId as ccmStatusListId,"
                        . "csl.reasonType as reason_type,cc.pkId,r.pkId as reasonId,u.pkId as utilizationId")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmStatusHistory', 'csh')
                ->join('csh.ccmStatusList', 'csl')
                ->join('csh.reason', 'r')
                ->join('csh.utilization', 'u')
                ->join('cc.ccmAssetType', 'at')
                ->join('cc.warehouse', 'w')
                ->where("w.pkId IN ($warehouse_id) ")
                ->Andwhere('at.pkId IN (1,3,6,7)')
                ->orWhere('at.parent IN (1,3,6,7)')
                // ->andWhere("csh.statusDate='" . $max_date[0][1] . "'")
                ->groupBy('cc.pkId');
        //echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllQuantityAssets() {
        $auth = App_Auth::getInstance();

        $sub_sql = $this->_em->createQueryBuilder()
                ->select("w.pkId")
                ->from('WarehouseUsers', 'wu')
                ->join('wu.warehouse', 'w')
                ->join('wu.user', 'u')
                ->where('u.pkId=' . $this->_user_id);
        // $sub_sql->getQuery()->getSql();
        $row_sub = $sub_sql->getQuery()->getResult();
        foreach ($row_sub as $rs) {
            $wh_id[] = $rs['pkId'];
            $warehouse_id = implode(',', $wh_id);
        }


        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.assetId,at.pkId as ccmAssetId,at.assetTypeName,"
                        . "Sum(cc.quantity) as quantity")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmAssetType', 'at')
                ->join('cc.ccmStatusHistory', 'csh')
                ->join('cc.warehouse', 'w')
                ->where("w.pkId IN ($warehouse_id)")
                ->andWhere('at.pkId IN (2,4,5)')
                ->groupBy('at.assetTypeName');
        //  echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllQuantityAssetsUpdate() {
        $auth = App_Auth::getInstance();
        $s_sql = $this->_em->createQueryBuilder()
                ->select("MAX(cs.pkId)")
                ->from("CcmStatusHistory", "cs");
        $max_id = $s_sql->getQuery()->getResult();
        $sub_sql = $this->_em->createQueryBuilder()
                ->select("MAX(cs.statusDate)")
                ->from("CcmStatusHistory", "cs")
                ->where("cs.pkId='" . $max_id[0][1] . "'");
        $max_date = $sub_sql->getQuery()->getResult();
        $sub_sql_w = $this->_em->createQueryBuilder()
                ->select("w.pkId")
                ->from('WarehouseUsers', 'wu')
                ->join('wu.warehouse', 'w')
                ->join('wu.user', 'u')
                ->where('u.pkId=' . $this->_user_id);
        $sub_sql_w->getQuery()->getSql();
        $row_sub = $sub_sql_w->getQuery()->getResult();
        foreach ($row_sub as $rs) {
            $wh_id[] = $rs['pkId'];
            $warehouse_id = implode(',', $wh_id);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.assetId,at.pkId as ccmAssetId,at.assetTypeName,"
                        . "csh.workingQuantity as quantity")
                ->from('CcmStatusHistory', 'csh')
                ->join('csh.ccm', 'cc')
                ->join('cc.ccmAssetType', 'at')
                ->join('cc.warehouse', 'w')
                ->where("w.pkId IN ($warehouse_id) ")
                ->andWhere('at.pkId IN (2,4,5)')
                ->andWhere("csh.statusDate='" . $max_date[0][1] . "'")
                ->groupBy('at.assetTypeName');
        //echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function addRefrigerator() {
        $form_values = $this->form_values;


        $cold_chain = new ColdChain();
        $cold_chain->setAssetId($form_values['asset_id']);
        $source_id = $this->_em->getRepository('Stakeholders')->find($form_values['source_id']);
        $cold_chain->setSource($source_id);
        $model_id = $this->_em->getRepository('CcmModels')->find($form_values['catalogue_id']);
        $cold_chain->setCcmModel($model_id);
        $asset_type = $this->_em->getRepository('CcmAssetTypes')->find($model_id->getCcmAssetType()->getPkId());
        $cold_chain->setCcmAssetType($asset_type);
        if (!empty($form_values['temperature_monitor'])) {
            $temperature_monitor = $this->_em->getRepository('ListDetail')->find($form_values['temperature_monitor']);
            $cold_chain->setTemperatureMonitor($temperature_monitor);
        }
        $cold_chain->setSerialNumber($form_values['serial_number']);
        $cold_chain->setWorkingSince(new \DateTime(App_Controller_Functions::dateToDbFormat($form_values['working_since'])));
        $auto_gen_id = App_Controller_Functions::generateCcemUniqueAssetId(Model_CcmAssetTypes::REFRIGERATOR);
        $cold_chain->setAutoAssetId($auto_gen_id);
        $user_id = $this->_em->getRepository('Users')->find($this->_user_id);
        $cold_chain->setCreatedBy($user_id);
        $cold_chain->setCreatedDate(new \DateTime(App_Controller_Functions::dateToDbFormat(date("d/m/Y"))));
        if (!empty($form_values['warehouse']) && $form_values['placed_at'] == 1) {
            $wh_id = $this->_em->getRepository('Warehouses')->find($form_values['warehouse']);
            $cold_chain->setWarehouse($wh_id);
        }
        $this->_em->persist($cold_chain);
        $this->_em->flush();
        $ccm_id = $cold_chain->getPkId();
        // if (!empty($form_values['warehouse']) && $form_values['placed_at'] == 1) {
        $ccm_status_history = new CcmStatusHistory();
        $ccm_status_history->setStatusDate(new \DateTime(date("Y-m-d h:i")));
        $cold_chian_id = $this->_em->getRepository('ColdChain')->find($ccm_id);
        $ccm_status_history->setCcm($cold_chian_id);
        if (!empty($form_values['warehouse']) && $form_values['placed_at'] == 1) {
            $warehouse_id = $this->_em->getRepository('Warehouses')->find($form_values['warehouse']);
            $ccm_status_history->setWarehouse($warehouse_id);
        } else {
            $warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $ccm_status_history->setWarehouse($warehouse_id);
        }

        $ccm_status_list_id = $this->_em->getRepository('CcmStatusList')->find($form_values['ccm_status_list_id']);
        $ccm_status_history->setCcmStatusList($ccm_status_list_id);
        $asset_id = $this->_em->getRepository('CcmAssetTypes')->find(Model_CcmAssetTypes::REFRIGERATOR);
        $ccm_status_history->setCcmAssetType($asset_id);
        if (!empty($form_values['reason'])) {
            $reason = $this->_em->getRepository('CcmStatusList')->find($form_values['reason']);
            $ccm_status_history->setReason($reason);
        }
        if (!empty($form_values['utilization'])) {
            $utilization = $this->_em->getRepository('CcmStatusList')->find($form_values['utilization']);
            $ccm_status_history->setUtilization($utilization);
        }
        $this->_em->persist($ccm_status_history);
        $this->_em->flush();



        $ccm_history_id = $ccm_status_history->getPkId();

        $this->updateCcmStatusHistory($ccm_id, $ccm_history_id);
        //  }
        $placements_locations = new PlacementLocations();

        $location_type = $this->_em->getRepository('ListDetail')->find(Model_PlacementLocations::LOCATIONTYPE_CCM);
        $placements_locations->setLocationType($location_type);
        $placements_locations->setLocationBarcode($auto_gen_id);
        $placements_locations->setLocationId($ccm_id);
        $this->_em->persist($placements_locations);
        $this->_em->flush();
        $ware_house = $form_values['warehouse'];
        if (!empty($ware_house)) {
            $qry = "SELECT REPUpdateCapacity($ware_house) from DUAL";
            $row = $this->_em->getConnection()->prepare($qry);
            $row->execute();

            $qry1 = "SELECT REPUpdateRequirement($ware_house) from DUAL";
            $row1 = $this->_em->getConnection()->prepare($qry1);
            $row1->execute();
        }
    }

    public function updateRefrigerator() {
        $form_values = $this->form_values;
        //App_Controller_Functions::pr($form_values);


        $cold_chain = $this->_em->getRepository('ColdChain')->find($form_values['ccm_id']);
        $cold_chain->setAssetId($form_values['asset_id']);
        $source_id = $this->_em->getRepository('Stakeholders')->find($form_values['source_id']);
        $cold_chain->setSource($source_id);
        $model_id = $this->_em->getRepository('CcmModels')->find($form_values['catalogue_id']);
        $cold_chain->setCcmModel($model_id);
        $asset_type = $this->_em->getRepository('CcmAssetTypes')->find(Model_CcmAssetTypes::REFRIGERATOR);
        $cold_chain->setCcmAssetType($asset_type);
        $cold_chain->setSerialNumber($form_values['serial_number']);
        $cold_chain->setWorkingSince(new \DateTime(App_Controller_Functions::dateToDbFormat($form_values['working_since'])));

        $user_id = $this->_em->getRepository('Users')->find($this->_user_id);
        $cold_chain->setCreatedBy($user_id);
        $cold_chain->setCreatedDate(new \DateTime(App_Controller_Functions::dateToDbFormat(date("d/m/Y"))));

        $this->_em->persist($cold_chain);
        $this->_em->flush();

        $ware_house = $form_values['warehouse'];
        if (!empty($ware_house)) {
            $qry = "SELECT REPUpdateCapacity($ware_house) from DUAL";
            $row = $this->_em->getConnection()->prepare($qry);
            $row->execute();

            $qry1 = "SELECT REPUpdateRequirement($ware_house) from DUAL";
            $row1 = $this->_em->getConnection()->prepare($qry1);
            $row1->execute();
        }
    }

    public function addVoltageRegulator() {

        //$ccm_model = new CcmModels();
        $form_values = $this->form_values;
        // App_Controller_Functions::pr($form_values);

        $cold_chain = new ColdChain();
        $model_id = $this->_em->getRepository('CcmModels')->find($form_values['catalogue_id']);
        $cold_chain->setCcmModel($model_id);
        $asset_type = $this->_em->getRepository('CcmAssetTypes')->find(Model_CcmAssetTypes::VOLTAGEREGULATOR);
        $cold_chain->setCcmAssetType($asset_type);
        $cold_chain->setQuantity($form_values['quantity']);
        $user_id = $this->_em->getRepository('Users')->find($this->_user_id);
        $cold_chain->setCreatedBy($user_id);
        $cold_chain->setCreatedDate(new \DateTime(App_Controller_Functions::dateToDbFormat(date("d/m/Y"))));
        if (!empty($form_values['warehouse']) && $form_values['placed_at'] == 1) {
            $wh_id = $this->_em->getRepository('Warehouses')->find($form_values['warehouse']);
            $cold_chain->setWarehouse($wh_id);
        }

        $this->_em->persist($cold_chain);
        $this->_em->flush();
        $cold_chain_id = $cold_chain->getPkId();

        $ccm_status_history = new CcmStatusHistory();
        $ccm_status_history->setStatusDate(new \DateTime(date("Y-m-d h:i")));
        $cold_chian_id = $this->_em->getRepository('ColdChain')->find($cold_chain_id);
        $ccm_status_history->setCcm($cold_chian_id);
        if (!empty($form_values['warehouse']) && $form_values['placed_at'] == 1) {
            $warehouse_id = $this->_em->getRepository('Warehouses')->find($form_values['warehouse']);
            $ccm_status_history->setWarehouse($warehouse_id);
        } else {
            $warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $ccm_status_history->setWarehouse($warehouse_id);
        }


        $asset1_id = $this->_em->getRepository('CcmAssetTypes')->find(Model_CcmAssetTypes::VOLTAGEREGULATOR);
        $ccm_status_history->setCcmAssetType($asset1_id);
        $ccm_status_history->setWorkingQuantity($form_values['quantity']);
        $this->_em->persist($ccm_status_history);
        $this->_em->flush();


        $cold_chain_model = new Model_ColdChain();
        $ccm_history_id = $ccm_status_history->getPkId();

        $cold_chain_model->updateCcmStatusHistory($cold_chain_id, $ccm_history_id);
    }

    public function getAllColdChainAssetForTransfer() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.assetId,cc.autoAssetId,at.assetTypeName,cm.ccmModelName,at.pkId as assetTypeId,"
                        . "cc.quantity")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmModel', 'cm')
                ->join('cc.ccmAssetType', 'at')
                ->andWhere("cc.warehouse = " . $this->form_values['warehouse']);
        //echo $str_sql->getQuery()->getSql();die;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getQuantityColdChainAssetForTransfer() {
        $em = Zend_Registry::get('doctrine');


        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.assetId,cc.autoAssetId,at.assetTypeName,cm.ccmModelName,at.pkId as assetTypeId,"
                        . "csh.workingQuantity as quantity ")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmStatusHistory', 'csh')
                ->join('cc.ccmModel', 'cm')
                ->join('cc.ccmAssetType', 'at')
                ->Where('at.pkId IN (2,4,5) OR at.parent IN (2,4,5)')
                ->andWhere("cc.warehouse = " . $this->form_values['warehouse'])
                ->groupBy('cm.ccmModelName');
        //echo $str_sql->getQuery()->getSql();die;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getNonQuantityColdChainAssetForTransfer() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.assetId,cc.autoAssetId,at.assetTypeName,cm.ccmModelName,at.pkId as assetTypeId")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmModel', 'cm')
                ->join('cc.ccmAssetType', 'at')
                ->andWhere("cc.warehouse = " . $this->form_values['warehouse'])
                ->Andwhere('at.pkId IN (1,3,6,7) OR at.parent IN (1,3,6,7)');

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function transferColdChainAsset() {
        $form_values = $this->form_values;

        if ($form_values['transfer'] == 1) {
            $cold_chain_update = $this->_table->find($form_values['coldchain_id']);
            $to_warehouse = $this->_em->getRepository('Warehouses')->find($form_values['to_warehouse']);
            $cold_chain_update->setWarehouse($to_warehouse);
            $this->_em->persist($cold_chain_update);
            $this->_em->flush();
        } elseif ($form_values['quantity_issue'] > 0) {
            if ($form_values['quantity_issue'] < $form_values['quantity_available']) {
                $sub_sql = $this->_em->createQueryBuilder()
                        ->select(""
                                . "cc.assetId, cc.quantity, cc.autoAssetId, cc.serialNumber,"
                                . "cc.estimateLife, cc.workingSince, cc.manufactureYear, cc.status,"
                                . "cc.approvedBy, cc.approvedOn, cc.createdDate,"
                                . "csh.pkId AS ccmStatusHistoryId,"
                                . "cat.pkId AS ccmAssetTypeId,"
                                . "cmod.pkId AS ccmModelId,"
                                . "cu.pkId AS createdById,"
                                . "sh.pkId AS sourceId"
                        )
                        ->from("ColdChain", "cc")
                        ->leftJoin('cc.ccmStatusHistory', 'csh')
                        ->leftjoin('cc.ccmAssetType', 'cat')
                        ->leftjoin('cc.ccmModel', 'cmod')
                        ->leftjoin('cc.createdBy', 'cu')
                        ->leftJoin('cc.source', 'sh')
                        ->where("cc.pkId = " . $this->form_values['coldchain_id']);


                $one_row = $sub_sql->getQuery()->getResult();

                $one_row = $one_row[0];

                $cold_chain = new ColdChain();
                $cold_chain->setAssetId($one_row['assetId']);
                $cold_chain->setQuantity($form_values['quantity_issue']);
                $cold_chain->setAutoAssetId($one_row['autoAssetId']);
                $cold_chain->setSerialNumber($one_row['serialNumber']);
                $cold_chain->setEstimateLife($one_row['estimateLife']);
                $cold_chain->setWorkingSince(new \DateTime(App_Controller_Functions::dateToDbFormat($one_row['workingSince'])));
                $cold_chain->setManufactureYear(new \DateTime(App_Controller_Functions::dateToDbFormat($one_row['manufactureYear'])));
                $cold_chain->setStatus($one_row['status']);
                $cold_chain->setApprovedBy($one_row['approvedBy']);
                $cold_chain->setApprovedOn(new \DateTime(App_Controller_Functions::dateToDbFormat($one_row['approvedOn'])));
                $cold_chain->setCreatedDate(new \DateTime(App_Controller_Functions::dateToDbFormat(date("d/m/Y"))));
                if ($one_row['ccmStatusHistoryId']) {
                    $status_history_id = $this->_em->getRepository('CcmStatusHistory')->find($one_row['ccmStatusHistoryId']);
                    $cold_chain->setCcmStatusHistory($status_history_id);
                }
                $asset_type = $this->_em->getRepository('CcmAssetTypes')->find($one_row['ccmAssetTypeId']);
                $cold_chain->setCcmAssetType($asset_type);
                $model_id = $this->_em->getRepository('CcmModels')->find($one_row['ccmModelId']);
                $cold_chain->setCcmModel($model_id);
                $created_by_id = $this->_em->getRepository('Users')->find($one_row['createdById']);
                $cold_chain->setCreatedBy($created_by_id);
                $cold_chain->setCreatedDate(new \DateTime(App_Controller_Functions::dateToDbFormat(date("d/m/Y"))));
                if ($one_row['sourceId']) {
                    $source_id = $this->_em->getRepository('Stakeholders')->find($one_row['sourceId']);
                    $cold_chain->setSource($source_id);
                }
                if ($form_values['to_warehouse']) {
                    $frm_warehouse_id = $this->_em->getRepository('Warehouses')->find($form_values['to_warehouse']);
                    $cold_chain->setWarehouse($frm_warehouse_id);
                }
                $this->_em->persist($cold_chain);
                $this->_em->flush();
                /*
                 * Adjust Quantity
                 */
                $adjusted_quantity = $form_values['quantity_available'] - $form_values['quantity_issue'];
                $cold_chain_adjust_quantity = $this->_table->find($form_values['coldchain_id']);
                $cold_chain_adjust_quantity->setQuantity($adjusted_quantity);
                $this->_em->persist($cold_chain_adjust_quantity);
                $this->_em->flush();
            } /* elseif ($form_values['quantity_issue'] >= $form_values['quantity_available']) {
              $cold_chain_update = $this->_table->find($form_values['coldchain_id']);
              $cold_chain_update->setWarehouse($form_values['to_warehouse']);
              $this->_em->persist($cold_chain_update);
              $this->_em->flush();
              } */
        }

        //enter in clod chain history
        if ($form_values['transfer'] == 1 || $form_values['quantity_issue'] > 0) {
            $ccm_transfer = new CcmTransferHistory();
            if ($form_values['quantity_issue']) {
                $ccm_transfer->setQuantity($form_values['quantity_issue']);
            }
            $ccm_transfer->setTransferDate(new \DateTime(App_Controller_Functions::dateToDbFormat(date("d/m/Y"))));
            $transferBy = $this->_em->getRepository('Users')->find($this->_user_id);
            $ccm_transfer->setTransferBy($transferBy);
            $ccm_id = $this->_em->getRepository('ColdChain')->find($form_values['coldchain_id']);
            $ccm_transfer->setCcm($ccm_id);
            $ccm_status_list_id = $this->_em->getRepository('CcmStatusList')->find('1'); //Temporarily hard code as this filed not found in coldchain table
            $ccm_transfer->setCcmStatusList($ccm_status_list_id);
            $from_warehouse = $this->_em->getRepository('Warehouses')->find($form_values['from_warehouse']);
            $ccm_transfer->setFromWarehouse($from_warehouse);
            $to_warehouse = $this->_em->getRepository('Warehouses')->find($form_values['to_warehouse']);
            $ccm_transfer->setToWarehouse($to_warehouse);
            $this->_em->persist($ccm_transfer);
            $this->_em->flush();
        }

        if (!empty($form_values['to_warehouse'])) {
            $to_warehouse = $form_values['to_warehouse'];
            $qry = "SELECT REPUpdateCapacity($to_warehouse) from DUAL";
            $row = $this->_em->getConnection()->prepare($qry);
            $row->execute();

            $qry1 = "SELECT REPUpdateRequirement($to_warehouse) from DUAL";
            $row1 = $this->_em->getConnection()->prepare($qry1);
            $row1->execute();
        }
        if (!empty($form_values['from_warehouse'])) {
            $from_warehouse = $form_values['from_warehouse'];
            $qry = "SELECT REPUpdateCapacity($from_warehouse) from DUAL";
            $row = $this->_em->getConnection()->prepare($qry);
            $row->execute();

            $qry1 = "SELECT REPUpdateRequirement($from_warehouse) from DUAL";
            $row1 = $this->_em->getConnection()->prepare($qry1);
            $row1->execute();
        }
    }

    public function updateCcmStatusHistory($id, $history_id) {
        $cold_chain = $this->_table->find($id);
        $h_id = $this->_em->getRepository('CcmStatusHistory')->find($history_id);
        $cold_chain->setCcmStatusHistory($h_id);
        $this->_em->persist($cold_chain);
        return $this->_em->flush();
    }

    public function searchVaccineCarriers() {

        if (!empty($this->form_values['ccm_make_id'])) {
            $where[] = "ccmake.pkId  = '" . $this->form_values['ccm_make_id'] . "'";
        }
        if (!empty($this->form_values['ccm_model_id'])) {
            $where[] = "ccm.pkId  = '" . $this->form_values['ccm_model_id'] . "'";
        }
        if (!empty($this->form_values['catalogue_id'])) {
            $where[] = "ccm.catalogueId  = '" . $this->form_values['catalogue_id'] . "'";
        }

        if ($this->form_values['placed_at'] == 1 && !empty($this->form_values['warehouse'])) {
            $where[] = "w.pkId  = '" . $this->form_values['warehouse'] . "'";
        }
        if ($this->form_values['placed_at'] == 0) {
            $where[] = "w.pkId  IS NULL ";
        }

        $where[] = "cat.pkId = '" . Model_CcmAssetTypes::VACCINECARRIER . "'";
        $where[] = "cc.createdBy = '" . $this->_user_id . "'  ";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("cc.pkId,cc.assetId,cc.quantity,at.assetTypeName,ccm.ccmModelName,"
                        . "ccm.assetDimensionLength,ccm.assetDimensionWidth,ccm.assetDimensionHeight,"
                        . "ccmake.ccmMakeName,cc.createdDate,"
                        . "w.warehouseName,d.locationName")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmAssetType', 'at')
                ->join('cc.ccmModel', 'ccm')
                ->join('ccm.ccmAssetType', 'cat')
                ->join('ccm.ccmMake', 'ccmake');
        if ($this->form_values['placed_at'] == 1) {
            $str_sql->join('cc.warehouse', 'w');
            $str_sql->join('w.district', 'd');
        }

        if ($this->form_values['placed_at'] == 0) {
            $str_sql->leftjoin('cc.warehouse', 'w');
            $str_sql->leftjoin('w.district', 'd');
        }
        $str_sql->where($where_s);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function searchVoltageRegulator() {
        $form_values = $this->form_values;

        if (!empty($form_values['ccm_make_id'])) {
            $where[] = "ccmake.pkId  = '" . $form_values['ccm_make_id'] . "'";
        }
        if (!empty($form_values['ccm_model_id'])) {
            $where[] = "ccm.pkId  = '" . $form_values['ccm_model_id'] . "'";
        }
        if (!empty($form_values['catalogue_id'])) {
            $where[] = "ccm.catalogueId  = '" . $form_values['catalogue_id'] . "'";
        }
        if (!empty($form_values['ccm_status_list_id'])) {
            $where[] = "cc.ccmStatusHistory  = '" . $form_values['ccm_status_list_id'] . "'";
        }
        if ($form_values['placed_at'] == 1 && !empty($form_values['warehouse'])) {
            $where[] = "w.pkId  = '" . $form_values['warehouse'] . "'";
        }
        if ($form_values['placed_at'] == 0) {
            $where[] = "w.pkId  IS NULL ";
        }


        $where[] = "cat.pkId = '" . Model_CcmAssetTypes::VOLTAGEREGULATOR . "'";
        $where[] = "cc.createdBy = '" . $this->_user_id . "'  ";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("cc.pkId,cc.assetId,cc.quantity,"
                        . "ccm.ccmModelName,csl.ccmStatusListName,"
                        . "ccmake.ccmMakeName,cc.createdDate,"
                        . "d.locationName as district, w.warehouseName as facility")
                ->from('ColdChain', 'cc')
                ->leftJoin('cc.ccmModel', 'ccm')
                ->leftJoin('ccm.ccmAssetType', 'cat')
                ->leftJoin('ccm.ccmMake', 'ccmake')
                ->leftJoin('cc.ccmStatusHistory', 'csh')
                ->leftJoin('csh.ccmStatusList', 'csl');
        if ($this->form_values['placed_at'] == 1) {
            $str_sql->join('cc.warehouse', 'w');
            $str_sql->join('w.district', 'd');
        }

        if ($this->form_values['placed_at'] == 0) {
            $str_sql->leftjoin('cc.warehouse', 'w');
            $str_sql->leftjoin('w.district', 'd');
        }
        $str_sql->where($where_s);
//echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function searchIcePacks($order = null, $sort = null) {

        if (!empty($this->form_values['ccm_make_id'])) {
            $where[] = "ccmake.pkId  = '" . $this->form_values['ccm_make_id'] . "'";
        }
        if (!empty($this->form_values['ccm_model_id'])) {
            $where[] = "ccm.pkId  = '" . $this->form_values['ccm_model_id'] . "'";
        }

        if ($this->form_values['placed_at'] == 1 && !empty($this->form_values['warehouse'])) {
            $where[] = "w.pkId  = '" . $this->form_values['warehouse'] . "'";
        }

        if ($this->form_values['placed_at'] == 0) {
            $where[] = "w.pkId  IS NULL ";
        }
        $where[] = "cat.pkId = '" . Model_CcmAssetTypes::ICEPACKS . "'";
        $where[] = "cc.createdBy = '" . $this->_user_id . "'  ";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("cc.pkId,cc.assetId,at.assetTypeName,"
                        . "cc.quantity,ccm.ccmModelName,ccmake.ccmMakeName,"
                        . "cc.createdDate,d.locationName,w.warehouseName")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmAssetType', 'at')
                ->join('cc.ccmModel', 'ccm')
                ->join('cc.ccmAssetType', 'cat')
                ->join('ccm.ccmMake', 'ccmake');
        if ($this->form_values['placed_at'] == 1) {
            $str_sql->join('cc.warehouse', 'w');
            $str_sql->join('w.district', 'd');
        }

        if ($this->form_values['placed_at'] == 0) {
            $str_sql->leftjoin('cc.warehouse', 'w');
            $str_sql->leftjoin('w.district', 'd');
        }

        $str_sql->where($where_s);
        //   echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function searchRefrigerator() {
        $form_values = $this->form_values;

        if (!empty($form_values['ccm_asset_sub_type_id'])) {
            $where[] = "cat.pkId  = '" . $form_values['ccm_asset_sub_type_id'] . "'";
        }
        if (!empty($form_values['source_id'])) {
            $where[] = "s.pkId  = '" . $form_values['source_id'] . "'";
        }
        if (!empty($form_values['ccm_status_list_id'])) {
            $where[] = "csl.pkId  = '" . $form_values['ccm_status_list_id'] . "'";
        }
        if (!empty($form_values['asset_id'])) {
            $where[] = "ccm.ccmAssetType  = '" . $form_values['asset_id'] . "'";
        }
        if (!empty($form_values['catalogue_id'])) {
            $where[] = "ccm.catalogueId  = '" . $form_values['catalogue_id'] . "'";
        }
        if (!empty($form_values['ccm_make_id'])) {
            $where[] = "ccmake.pkId  = '" . $form_values['ccm_make_id'] . "'";
        }
        if (!empty($form_values['ccm_model_id'])) {
            $where[] = "ccm.pkId  = '" . $form_values['ccm_model_id'] . "'";
        }
        if (!empty($form_values['serial_number'])) {
            $where[] = "cc.serialNumber  = '" . $form_values['serial_number'] . "'";
        }
        if (!empty($form_values['gross_capacity_from'])) {
            $where[] = "(ccm.grossCapacity20  >= '" . $form_values['gross_capacity_from'] . "' OR ccm.grossCapacity4 >= '" . $form_values['gross_capacity_from'] . "')";
        }
        if (!empty($form_values['gross_capacity_to'])) {
            $where[] = "(ccm.grossCapacity20  <= '" . $form_values['gross_capacity_to'] . "' OR ccm.grossCapacity4 <= '" . $form_values['gross_capacity_to'] . "' )";
        }
        if (!empty($form_values['working_since_from'])) {
            $where[] = "cc.workingSince  >= '" . App_Controller_Functions::dateToDbFormat($form_values['working_since_from']) . "'";
        }
        if (!empty($form_values['working_since_to'])) {
            $where[] = "cc.workingSince  <= '" . App_Controller_Functions::dateToDbFormat($form_values['working_since_to']) . "'";
        }
        if (!empty($form_values['cfc_free'])) {
            $where[] = "ccm.cfcFree  = '" . $form_values['cfc_free'] . "'";
        }
        if ($form_values['placed_at'] == 1 && !empty($form_values['warehouse'])) {
            $where[] = "w.pkId  = '" . $form_values['warehouse'] . "'";
        }

        if ($this->form_values['placed_at'] == 0) {
            $where[] = "w.pkId  IS NULL ";
        }
        $where[] = "cp.pkId = '" . Model_CcmAssetTypes::REFRIGERATOR . "'";
        //  $where[] = "cc.createdBy = '" . $this->_user_id . "'  ";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("cc.pkId,cc.assetId,cc.quantity,"
                        . "ccm.ccmModelName,csl.ccmStatusListName,"
                        . "ccmake.ccmMakeName,cc.createdDate,cc.workingSince,"
                        . "d.locationName district, w.warehouseName facility,"
                        . "ccm.grossCapacity20, ccm.grossCapacity4,"
                        . "cat.assetTypeName")
                ->from('ColdChain', 'cc')
                ->leftjoin('cc.source', 's')
                ->leftJoin('cc.ccmModel', 'ccm')
                ->leftJoin('cc.ccmAssetType', 'cat')
                ->leftJoin('cat.parent', 'cp')
                ->leftJoin('ccm.ccmMake', 'ccmake')
                ->leftJoin('cc.ccmStatusHistory', 'csh')
                ->leftJoin('csh.ccmStatusList', 'csl');

        if ($this->form_values['placed_at'] == 1) {
            $str_sql->join('cc.warehouse', 'w');
            $str_sql->join('w.district', 'd');
        }

        if ($this->form_values['placed_at'] == 0) {
            $str_sql->leftjoin('cc.warehouse', 'w');
            $str_sql->leftjoin('w.district', 'd');
        }

        $str_sql->where($where_s);
        //  echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    /**
     * @uses api Barcode
     * @return type
     */
    public function getCCMLocations($wh_id) {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
                cold_chain.pk_id,
                cold_chain.asset_id,
                cold_chain.auto_asset_id,
                cold_chain.serial_number,
                AssetSubtype.asset_type_name
               FROM
                cold_chain
               INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
               LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
               WHERE
               cold_chain.warehouse_id = $wh_id AND
               ((cold_chain.ccm_asset_type_id = 3 OR
               AssetMainType.pk_id = 3) OR (cold_chain.ccm_asset_type_id = 1 OR
               AssetMainType.pk_id = 1))");
        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    /**
     * @uses api Barcode
     * @return type
     */
    public function getNonCCMLocations($wh_id) {

        $str_sql = $this->_em->getConnection()->prepare("SELECT
            non_ccm_locations.pk_id,
            non_ccm_locations.location_name,
            non_ccm_locations.rack_information_id
            FROM
            non_ccm_locations
            where
            warehouse_id= '" . $wh_id . "'
");

        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function getLocationsName() {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "SELECT DISTINCT
                cold_chain.pk_id as pkId,
                        cold_chain.asset_id as assetId
                FROM
                        cold_chain
                INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
                LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                LEFT JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
                INNER JOIN ccm_status_history ON ccm_status_history.pk_id = cold_chain.ccm_status_history_id
                WHERE
                        cold_chain.warehouse_id = $wh_id
                AND (
                    (
                            cold_chain.ccm_asset_type_id = 3
                            OR AssetMainType.pk_id = 3
                    )
                    OR (
                            cold_chain.ccm_asset_type_id = 1
                            OR AssetMainType.pk_id = 1
                    )
                )
                AND placement_locations.location_type = 99
                GROUP BY
                        cold_chain.auto_asset_id
                ORDER BY
                        cold_chain.asset_id,
                        cold_chain.ccm_asset_type_id DESC";
        $row_ref = $this->_em->getConnection()->prepare($str_sql);
        $row_ref->execute();
        return $row_ref->fetchAll();
    }

    public function getAllNonQuantityAsetsReport() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT cc.pkId,cc.autoAssetId as generateAssetId,"
                        . "at.pkId as ccmAssetId,at.assetTypeName,"
                        . "cm.reasons,cm.utilizations")
                ->from('ColdChain', 'cc')
                ->join('cc.ccmModel', 'cm')
                ->join('cc.ccmAssetType', 'at')
                ->where('at.pkId IN (1,4,6,7)');

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllNonQuantityRefAsets() {
        if (!empty($this->form_values['warehouse'])) {
            $wh_id = $this->form_values['warehouse'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql_ref = "SELECT
	ccm_models.catalogue_id AS Cat_ID,
	ccm_models.ccm_model_name AS Model,
	ccm_makes.ccm_make_name AS Manufacturer,
	cold_chain.serial_number AS Serial_No,
	list_detail.list_value AS Refrigerator_Gas_Type,
	round(ccm_models.net_capacity_4,1) net_capacity_4,
	round(ccm_models.net_capacity_20,1) net_capacity_20,
	DATE_FORMAT(
		cold_chain.working_since,
		'%d-%m-%Y'
	) working_since,
	stakeholders.stakeholder_name,
	ccm_status_list.ccm_status_list_name,
	cold_chain.warehouse_id,
	Asset_Type.asset_type_name AS Asset_Type,
	Power_Source_Name.asset_type_name AS Power_Source
        FROM
            ccm_models
        INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
        LEFT JOIN list_detail ON ccm_models.gas_type = list_detail.pk_id
        INNER JOIN cold_chain ON cold_chain.ccm_model_id = ccm_models.pk_id
        INNER JOIN stakeholders ON cold_chain.source_id = stakeholders.pk_id
        INNER JOIN ccm_status_history ON cold_chain.pk_id = ccm_status_history.ccm_id
        INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
        INNER JOIN ccm_asset_types AS Asset_Type ON cold_chain.ccm_asset_type_id = Asset_Type.pk_id
        LEFT JOIN ccm_asset_types AS Power_Source_Name ON ccm_models.ccm_asset_type_id = Power_Source_Name.parent_id
        WHERE
            cold_chain.warehouse_id = " . $wh_id . "
        AND (
            Asset_Type.pk_id = " . Model_CcmAssetTypes::REFRIGERATOR . "
            OR Asset_Type.parent_id = " . Model_CcmAssetTypes::REFRIGERATOR . "
            )
        GROUP BY
        cold_chain.pk_id";
//echo $str_sql_ref."<br><br>";
        $row_ref = $this->_em->getConnection()->prepare($str_sql_ref);
        $row_ref->execute();
        return $row_ref->fetchAll();
    }

    public function getAllNonQuantityColdRoomAsets() {
        if (!empty($this->form_values['warehouse'])) {
            $wh_id = $this->form_values['warehouse'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }
//        $str_sql = "SELECT
//	ccm_asset_types.asset_type_name,
//	ccm_models.ccm_model_name,
//	ccm_makes.ccm_make_name,
//	cold_chain.serial_number,
//	list_detail.list_value,
//	ccm_cold_rooms.cooling_system,
//	round(ccm_models.net_capacity_4,1) net_capacity_4,
//	round(ccm_models.net_capacity_20,1) net_capacity_20,
//	DATE_FORMAT(
//		cold_chain.working_since,
//		'%Y'
//	) AS Supply_Year,
//	stakeholders.stakeholder_name,
//	ccm_status_list.ccm_status_list_name
//        FROM
//            ccm_models
//        INNER JOIN ccm_asset_types ON ccm_models.ccm_asset_type_id = ccm_asset_types.pk_id
//        INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
//        INNER JOIN cold_chain ON cold_chain.ccm_asset_type_id = ccm_models.ccm_asset_type_id
//        LEFT JOIN list_detail ON list_detail.pk_id = ccm_models.gas_type
//        LEFT JOIN ccm_cold_rooms ON ccm_cold_rooms.ccm_id = cold_chain.pk_id
//        INNER JOIN stakeholders ON cold_chain.source_id = stakeholders.pk_id
//        INNER JOIN ccm_status_history ON ccm_status_history.ccm_id = cold_chain.pk_id
//        INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
//        WHERE
//        (
//            ccm_asset_types.pk_id = " . Model_CcmAssetTypes::COLDROOM . "
//            OR ccm_asset_types.parent_id = " . Model_CcmAssetTypes::COLDROOM . "
//        )
//        AND cold_chain.warehouse_id = " . $wh_id . "
//        GROUP BY
//	cold_chain.pk_id";

        $str_sql = "SELECT
 ccm_models.ccm_model_name,
 ccm_makes.ccm_make_name,
 cold_chain.serial_number,
 list_detail.list_value,
 CoolingSystem.list_value AS cooling_system,
 ccm_models.net_capacity_4,
 ccm_models.net_capacity_20,
 YEAR (cold_chain.working_since) AS Supply_Year,
 stakeholders.stakeholder_name,
 ccm_status_list.ccm_status_list_name
FROM
 cold_chain
INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
INNER JOIN ccm_asset_types ON cold_chain.ccm_asset_type_id = ccm_asset_types.pk_id
INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
INNER JOIN list_detail ON ccm_models.gas_type = list_detail.pk_id
LEFT JOIN ccm_cold_rooms ON cold_chain.pk_id = ccm_cold_rooms.ccm_id
LEFT JOIN list_detail AS CoolingSystem ON ccm_cold_rooms.cooling_system = CoolingSystem.pk_id
INNER JOIN ccm_status_history ON cold_chain.ccm_status_history_id = ccm_status_history.pk_id
INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
INNER JOIN stakeholders ON cold_chain.source_id = stakeholders.pk_id
WHERE
 cold_chain.warehouse_id = " . $wh_id . " 
 AND (ccm_asset_types.pk_id = " . Model_CcmAssetTypes::COLDROOM . " OR ccm_asset_types.parent_id = " . Model_CcmAssetTypes::COLDROOM . ")" ;

        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllNonQuantityColdBoxAsets() {
        if (!empty($this->form_values['warehouse'])) {
            $wh_id = $this->form_values['warehouse'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql = "SELECT DISTINCT
 c1_.asset_type_name AS asset_type_name3,
 c2_.ccm_model_name,
 ccm_makes.ccm_make_name,
 c0_.serial_number,
 c0_.manufacture_year,
 round(c2_.net_capacity_20, 1) AS net_capacity_20,
 c2_.catalogue_id,
 ccm_status_list.ccm_status_list_name,
 c1_.asset_type_name,
 round(c2_.net_capacity_4, 1) AS net_capacity_4,
 CONCAT(
  c2_.internal_dimension_length,
  'x',
  c2_.internal_dimension_width,
  'x',
  c2_.internal_dimension_height
 ) AS internalDim,
 CONCAT(
  c2_.asset_dimension_length,
  'x',
  c2_.asset_dimension_width,
  'x',
  c2_.asset_dimension_height
 ) AS externalDim,
 CONCAT(
  c2_.storage_dimension_length,
  'x',
  c2_.storage_dimension_width,
  'x',
  c2_.storage_dimension_height
 ) AS storageDim,
 c2_.product_price,
 c2_.cold_life,
 ccm_status_history.working_quantity,
 ccm_history.quantity
FROM
 cold_chain AS c0_
INNER JOIN ccm_models AS c2_ ON c0_.ccm_model_id = c2_.pk_id
INNER JOIN ccm_asset_types AS c1_ ON c0_.ccm_asset_type_id = c1_.pk_id
INNER JOIN ccm_makes ON c2_.ccm_make_id = ccm_makes.pk_id
INNER JOIN ccm_status_history ON c0_.pk_id = ccm_status_history.ccm_id
INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
INNER JOIN ccm_history ON c0_.pk_id = ccm_history.ccm_id
WHERE
 c0_.warehouse_id = " . $wh_id . "
AND (
 c1_.pk_id = " . Model_CcmAssetTypes::VACCINECARRIER . "
 OR c1_.parent_id = " . Model_CcmAssetTypes::VACCINECARRIER . "
)
";
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllNonQuantityIcePackAsets() {
        if (!empty($this->form_values['warehouse'])) {
            $wh_id = $this->form_values['warehouse'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql = "SELECT DISTINCT
            c1_.asset_type_name AS asset_type_name3,
            c2_.ccm_model_name,
            ccm_makes.ccm_make_name,
            c0_.serial_number,
            c0_.manufacture_year,
            round(c2_.net_capacity_20,1) net_capacity_20,
            c2_.catalogue_id,
            ccm_status_list.ccm_status_list_name,
            ccm_asset_types.asset_type_name,
            ccm_cold_rooms.cooling_system,
            ccm_cold_rooms.refrigerator_gas_type,
            round(c2_.net_capacity_4,1) net_capacity_4,
            list_detail.list_value as gas_type_name
        FROM
            cold_chain AS c0_
        INNER JOIN ccm_models AS c2_ ON c0_.ccm_model_id = c2_.pk_id
        INNER JOIN ccm_asset_types AS c1_ ON c0_.ccm_asset_type_id = c1_.pk_id
        INNER JOIN ccm_makes ON c2_.ccm_make_id = ccm_makes.pk_id
        INNER JOIN ccm_status_history ON c0_.pk_id = ccm_status_history.ccm_id
        INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
        LEFT JOIN ccm_asset_types ON c1_.parent_id = ccm_asset_types.pk_id
        INNER JOIN ccm_cold_rooms ON c0_.pk_id = ccm_cold_rooms.ccm_id
        INNER JOIN list_detail ON list_detail.pk_id = ccm_cold_rooms.refrigerator_gas_type
        WHERE
            c0_.warehouse_id = " . $wh_id . "
        AND
        (
            ccm_asset_types.pk_id = " . Model_CcmAssetTypes::ICEPACKS . "
            OR ccm_asset_types.parent_id = " . Model_CcmAssetTypes::ICEPACKS . "
        )
        ";

//        $str_sql = "SELECT DISTINCT
// c1_.asset_type_name AS asset_type_name3,
// c2_.ccm_model_name,
// ccm_makes.ccm_make_name,
// c0_.serial_number,
// c0_.manufacture_year,
// round(c2_.net_capacity_20, 1) net_capacity_20,
// c2_.catalogue_id,
// ccm_status_list.ccm_status_list_name,
// c1_.asset_type_name,
// round(c2_.net_capacity_4, 1) net_capacity_4
//FROM
// cold_chain AS c0_
//INNER JOIN ccm_models AS c2_ ON c0_.ccm_model_id = c2_.pk_id
//INNER JOIN ccm_asset_types AS c1_ ON c0_.ccm_asset_type_id = c1_.pk_id
//INNER JOIN ccm_makes ON c2_.ccm_make_id = ccm_makes.pk_id
//INNER JOIN ccm_status_history ON c0_.pk_id = ccm_status_history.ccm_id
//INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
//WHERE
// c0_.warehouse_id = " . $wh_id . "
//AND (
// c1_.pk_id = " . Model_CcmAssetTypes::ICEPACKS . "
// OR c1_.parent_id = " . Model_CcmAssetTypes::ICEPACKS . "
//)";
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllNonQuantityVoltageRegulatorAsets() {
        if (!empty($this->form_values['warehouse'])) {
            $wh_id = $this->form_values['warehouse'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql = "SELECT
            warehouses.ccem_id,
            ccm_models.catalogue_id,
            ccm_models.ccm_model_name,
            ccm_makes.ccm_make_name,
            ccm_models.no_of_phases
        FROM
            cold_chain
        INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
        INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
        INNER JOIN warehouses ON cold_chain.warehouse_id = warehouses.pk_id
        WHERE
            cold_chain.ccm_asset_type_id = " . Model_CcmAssetTypes::VOLTAGEREGULATOR . "
                and warehouses.status = 1
            AND cold_chain.warehouse_id = " . $wh_id;
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllNonQuantityGeneratorAsets() {
        if (!empty($this->form_values['warehouse'])) {
            $wh_id = $this->form_values['warehouse'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql = "SELECT
            ccm_asset_types.asset_type_name,
            ccm_models.ccm_model_name,
            ccm_makes.ccm_make_name,
            cold_chain.serial_number,
            ccm_generators.power_source,
            ccm_generators.power_rating,
            ccm_generators.automatic_start_mechanism,
            ccm_models.no_of_phases,
            DATE_FORMAT(cold_chain.working_since,'%d-%m-%Y') AS Supply_Year,
            ccm_status_list.ccm_status_list_name
        FROM
            ccm_models
            INNER JOIN ccm_makes ON ccm_models.ccm_make_id = ccm_makes.pk_id
            INNER JOIN ccm_asset_types ON ccm_models.ccm_asset_type_id = ccm_asset_types.pk_id
            INNER JOIN cold_chain ON cold_chain.ccm_asset_type_id = ccm_models.ccm_asset_type_id
            INNER JOIN ccm_generators ON ccm_generators.ccm_id = cold_chain.pk_id
            INNER JOIN ccm_status_history ON ccm_status_history.ccm_id = cold_chain.pk_id
            INNER JOIN ccm_status_list ON ccm_status_history.ccm_status_list_id = ccm_status_list.pk_id
            WHERE
            cold_chain.warehouse_id = " . $wh_id . "
            AND (
		ccm_asset_types.pk_id = " . Model_CcmAssetTypes::GENERATOR . "
		OR ccm_asset_types.parent_id = " . Model_CcmAssetTypes::GENERATOR . "
        	)
            GROUP BY
            cold_chain.pk_id
            ";
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

}
