<?php

/**
 * Model_Graphs
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_Graphs extends Model_Base {

    private $_table;

    public function __construct() {
        parent::__construct();
    }

    public function compGraphOptionYearNational() {
        /*
          Yearly Comparision - National
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $yearcomp = $post['yearcomp'];
        $all_provinces = $post['all_provinces'];
        $all_districts = $post['all_districts'];
        $optvals = $post['optvals'];

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $rep_option = new Model_ReportOptions();
        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => $post['indicators'],
            'report_comp' => $optvals
        );
        //print_r($rep_option->form_values);
        $query = $rep_option->getReportDataSql();
        $title = $query->getReportTitleSql();

        $location = new Model_Locations();
        $loc_name = '';

        if (!empty($all_provinces)) {
            $location->form_values = array("pk_id" => $all_provinces);
            $loc_name = $location->getLocationName();
        }
        if (!empty($all_districts)) {
            $location->form_values = array("pk_id" => $all_districts);
            $loc_name = $location->getLocationName();
        }

        for ($k = 0; $k < sizeof($products); $k++) {
            $product_obj = new Model_ItemPackSizes();
            $product_obj->form_values['pk_id'] = $products[$k];
            $product_name = $product_obj->getProductName();
            list($indicator, $compare_options) = explode("-", str_replace("Report", "Graph", str_replace("Province", "Provincial", $title)));
            $graph_caption = $indicator . " of " . $product_name;
            if ($optvals == 1) {
                $graph_subcaption = $compare_options;
            } elseif ($optvals == 2) {
                $graph_subcaption = "Provincial " . $compare_options . " for " . $loc_name;
            } elseif ($optvals == 3) {
                $graph_subcaption = "District " . $compare_options . " for " . $loc_name;
            }

            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='" . $graph_caption . "' subCaption='" . $graph_subcaption . "' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $loc_name . " - " . $product_name . "' yAxisName='Doses' numberSuffix='' showValues='1' formatNumberScale='0' theme='fint'>";
            $xmlstore .= "<categories>";
            for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {

                $month_name = $monthval[$i - 1];
                $xmlstore .= "<category label='$month_name' />";

                for ($j = sizeof($yearcomp) - 1; $j >= 0; $j--) {

                    $sql = "select " . str_replace("\$i", $i, $query->getReportDataSql()) . " as xyz  from dual ";
                    $sql = str_replace("\$yearcomp[\$j]", $yearcomp[$j], $sql);
                    $sql = str_replace("'\$products[\$k]'", "'" . $products[$k] . "'", $sql);
                    $sql = str_replace("\$seluser", 1, $sql);
                    $sql = str_replace("\$all_provinces", $all_provinces, $sql);
                    $sql = str_replace("\$all_districts", "'" . $all_districts . "'", $sql);
                    $dbg_sql.=$sql . '<br>';
                    //echo $sql."<br>";
                    //exit;
                    $str_sql = $this->_em->getConnection()->prepare($sql);
                    $str_sql->execute();
                    $row = $str_sql->fetchAll();

                    if (!empty($row)) {
                        $res = explode('*', $row[0]['xyz']);
                        $row_data = $res[$query->getReportDataPosition()] / 1;
                        //echo $row_data."<br/>";
                        $filedata1[$yearcomp[$j]][$monthval[$i - 1]] = $row_data;
                    }
                }

                //$filedata1 = substr($filedata1, 0, -1);
                //$filedata.=$monthval[$i - 1] . "," . round($filedata1, 2) . "\n";
            }

            //echo "<pre>";
            //print_r($filedata1);
            //exit;

            $xmlstore .= "</categories>";

            foreach ($filedata1 as $key1 => $value1) {
                $xmlstore .= "<dataset seriesName='$key1'>";
                foreach ($value1 as $val2) {
                    $xmlstore .= "<set value='" . $val2 . "' />";
                }
                $xmlstore .= "</dataset>";
            }


            $xmlstore .="</chart>";

//            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='Test' exportFileName='Test " . date('Y-m-d H:i:s') . "' yAxisName='test' numberSuffix='' showValues='1' formatNumberScale='0'>";
//            foreach ($filedata1 as $key=>$row) {
//                $monthfd = $monthval[$key - 1];
//                $datafd = round($row, 2);
//            
//                $xmlstore .= "<set label='$monthfd' value='$datafd' />";
//            }
//            $xmlstore .="</chart>";
            //var_dump($xmlstore);
            //exit;
            $xmlstore_array[] = $xmlstore;
        }

        return $xmlstore_array;
    }

    public function MSGraphOptionYear() {
        /*
          Yearly Comparision - National
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $yearcomp = $post['yearcomp'];
        $all_provinces = $post['all_provinces'];
        $all_districts = $post['all_districts'];
        $optvals = $post['optvals'];

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $rep_option = new Model_ReportOptions();
        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => 'GISSUES',
            'report_comp' => $optvals
        );
        //print_r($rep_option->form_values);
        $query = $rep_option->getReportDataSql();
        //$title = $query->getReportTitleSql();

        $location = new Model_Locations();
        $location->form_values['pk_id'] = $all_provinces;
        $location_name = $location->getLocationName();

        $title = "Vaccination vs Average Monthly Consumption (" . $location_name . "-" . $yearcomp[0] . ")";

        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => 'GAMC',
            'report_comp' => $optvals
        );

        $query2 = $rep_option->getReportDataSql();

        $cache = Zend_Registry::get('cacheManager')->getCache('file');
        $vaccinationvsamc = "VACCVSAMC_$post[period]$yearcomp[0]$products[0]$all_provinces$optvals";

        if (!$xmlstore_array = $cache->load($vaccinationvsamc)) {

            for ($k = 0; $k < sizeof($products); $k++) {
                $product_obj = new Model_ItemPackSizes();
                $product_obj->form_values['pk_id'] = $products[$k];
                $product_name = $product_obj->getProductName();

                $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='$product_name $title' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $product_name . "' yAxisName='Doses' numberSuffix='' showValues='1' formatNumberScale='0' theme='fint'>";
                $xmlstore .= "<categories>";
                for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {

                    $month_name = $monthval[$i - 1];
                    $xmlstore .= "<category label='$month_name' />";

                    for ($j = sizeof($yearcomp) - 1; $j >= 0; $j--) {
                        $sql = "select " . str_replace("\$i", $i, $query->getReportDataSql()) . " as xyz  from dual ";
                        $sql = str_replace("\$yearcomp[\$j]", $yearcomp[$j], $sql);
                        $sql = str_replace("'\$products[\$k]'", "'" . $products[$k] . "'", $sql);
                        $sql = str_replace("\$seluser", 1, $sql);
                        $sql = str_replace("\$all_provinces", $all_provinces, $sql);
                        $sql = str_replace("\$all_districts", "'" . $all_districts . "'", $sql);

                        $str_sql = $this->_em->getConnection()->prepare($sql);
                        $str_sql->execute();
                        $row = $str_sql->fetchAll();

                        if (!empty($row)) {
                            $res = explode('*', $row[0]['xyz']);
                            $row_data = $res[$query->getReportDataPosition()] / 1;
                            $filedata1[$yearcomp[$j]][$monthval[$i - 1]] = $row_data;
                        }

                        $sql = "select " . str_replace("\$i", $i, $query2->getReportDataSql()) . " as xyz  from dual ";
                        $sql = str_replace("\$yearcomp[\$j]", $yearcomp[$j], $sql);
                        $sql = str_replace("'\$products[\$k]'", "'" . $products[$k] . "'", $sql);
                        $sql = str_replace("\$seluser", 1, $sql);
                        $sql = str_replace("\$all_provinces", $all_provinces, $sql);
                        $sql = str_replace("\$all_districts", "'" . $all_districts . "'", $sql);

                        $str_sql = $this->_em->getConnection()->prepare($sql);
                        $str_sql->execute();
                        $row = $str_sql->fetchAll();

                        if (!empty($row)) {
                            $res = explode('*', $row[0]['xyz']);
                            $row_data = $res[$query2->getReportDataPosition()] / 1;
                            $filedata2[$yearcomp[$j]][$monthval[$i - 1]] = $row_data;
                        }
                    }
                }

                $xmlstore .= "</categories>";

                foreach ($filedata1 as $key1 => $value1) {
                    $xmlstore .= "<dataset seriesName='Consumption'>";
                    foreach ($value1 as $val2) {
                        $xmlstore .= "<set value='" . round($val2) . "' />";
                    }
                    $xmlstore .= "</dataset>";
                }

                foreach ($filedata2 as $key1 => $value1) {
                    $xmlstore .= "<dataset seriesName='Average Monthly Consumption*'>";
                    foreach ($value1 as $val2) {
                        $xmlstore .= "<set value='" . round($val2) . "' />";
                    }
                    $xmlstore .= "</dataset>";
                }

                $xmlstore .="</chart>";
                $xmlstore_array[] = $xmlstore;
            }

            $cache->save($xmlstore_array, $vaccinationvsamc);
        }

        return $xmlstore_array;
    }

    public function getMSGraphConsMOS() {
        /*
          Yearly Comparision - National
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $yearcomp = $post['yearcomp'];
        $all_provinces = $post['all_provinces'];
        $all_districts = $post['all_districts'];
        $optvals = $post['optvals'];

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $rep_option = new Model_ReportOptions();
        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => 'GISSUES',
            'report_comp' => $optvals
        );
        //print_r($rep_option->form_values);
        $query = $rep_option->getReportDataSql();
        //$title = $query->getReportTitleSql();

        $location = new Model_Locations();
        $location->form_values['pk_id'] = $all_provinces;
        $location_name = $location->getLocationName();

        $title = "Vaccination vs Stock On Hand (" . $location_name . "-" . $yearcomp[0] . ")";

        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => 'GCLOSING',
            'report_comp' => $optvals
        );
        //print_r($rep_option->form_values);
        $query2 = $rep_option->getReportDataSql();

        for ($k = 0; $k < sizeof($products); $k++) {

            $product_obj = new Model_ItemPackSizes();
            $product_obj->form_values['pk_id'] = $products[$k];
            $product_name = $product_obj->getProductName();

            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='$product_name $title' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $product_name . "' yAxisName='Doses' numberSuffix='' showValues='1' formatNumberScale='0' theme='fint'>";
            $xmlstore .= "<categories>";
            for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {

                $month_name = $monthval[$i - 1];
                $xmlstore .= "<category label='$month_name' />";

                for ($j = sizeof($yearcomp) - 1; $j >= 0; $j--) {

                    $sql = "select " . str_replace("\$i", $i, $query->getReportDataSql()) . " as xyz  from dual ";
                    $sql = str_replace("\$yearcomp[\$j]", $yearcomp[$j], $sql);
                    $sql = str_replace("'\$products[\$k]'", "'" . $products[$k] . "'", $sql);
                    $sql = str_replace("\$seluser", 1, $sql);
                    $sql = str_replace("\$all_provinces", $all_provinces, $sql);
                    $sql = str_replace("\$all_districts", "'" . $all_districts . "'", $sql);
                    $dbg_sql.=$sql . '<br>';
                    //echo $sql."<br>";
                    //exit;
                    $str_sql = $this->_em->getConnection()->prepare($sql);
                    $str_sql->execute();
                    $row = $str_sql->fetchAll();

                    if (!empty($row)) {
                        $res = explode('*', $row[0]['xyz']);
                        $row_data = $res[$query->getReportDataPosition()] / 1;
                        //echo $row_data."<br/>";
                        $filedata1[$yearcomp[$j]][$monthval[$i - 1]] = $row_data;
                    }

                    $sql = "select REPgetCB('P','$i','" . $yearcomp[$j] . "','" . $products[$k] . "',1,'$all_provinces','$all_provinces') as xyz  from dual ";
                    $dbg_sql.=$sql . '<br>';
                    //echo $sql . "<br>";
                    //exit;
                    $str_sql = $this->_em->getConnection()->prepare($sql);
                    $str_sql->execute();
                    $row = $str_sql->fetchAll();

                    if (!empty($row)) {
                        $filedata2[] = explode('*', $row[0]['xyz']);
                    }
                }

                //$filedata1 = substr($filedata1, 0, -1);
                //$filedata.=$monthval[$i - 1] . "," . round($filedata1, 2) . "\n";
            }

            //echo "<pre>";
            //print_r($filedata2);
            //exit;

            $xmlstore .= "</categories>";

            foreach ($filedata1 as $key1 => $value1) {
                $xmlstore .= "<dataset seriesName='Consumption/Vaccination'>";
                foreach ($value1 as $val2) {
                    $xmlstore .= "<set value='" . round($val2) . "' />";
                }
                $xmlstore .= "</dataset>";
            }

            $xmlstore .= "<dataset seriesName='Stock On Hand(SOH)'>";
            foreach ($filedata2 as $val2) {
                $val = $val2[0];
                $xmlstore .= "<set value='" . round($val) . "' />";
            }
            $xmlstore .= "</dataset>";


            $xmlstore .="</chart>";

//            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='Test' exportFileName='Test " . date('Y-m-d H:i:s') . "' yAxisName='test' numberSuffix='' showValues='1' formatNumberScale='0'>";
//            foreach ($filedata1 as $key=>$row) {
//                $monthfd = $monthval[$key - 1];
//                $datafd = round($row, 2);
//            
//                $xmlstore .= "<set label='$monthfd' value='$datafd' />";
//            }
//            $xmlstore .="</chart>";
            //var_dump($xmlstore);
            //exit;
            $xmlstore_array[] = $xmlstore;
        }

        return $xmlstore_array;
    }

    public function coldChainCapacity($type) {
        $date = $this->form_values['to_date'];
        list($d, $m, $y) = explode("/", $date);
        $to_date = "$y-$m-$d";

        $is_return = $type;
        if ($type == 2) {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = 3
                                OR AssetMainType.pk_id = 3
                        )
                        OR (
                                cold_chain.ccm_asset_type_id = 1
                                OR AssetMainType.pk_id = 1
                        )
                )";
        } else {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = $type
                                OR AssetMainType.pk_id = $type
                        ) )";
        }

        $warehouse_id = $this->_identity->getWarehouseId();
        //AND MainAsset.pk_id IN (" . Model_CcmAssetTypes::REFRIGERATOR . ", " . Model_CcmAssetTypes::COLDROOM . ")
        $str_sql = "SELECT DISTINCT
	cold_chain.asset_id,
        ccm_models.gross_capacity_20 + ccm_models.gross_capacity_4 AS gross,
	ccm_models.net_capacity_20 + ccm_models.net_capacity_4 AS net_usable,
	ROUND(
		SUM(
			(
				placements.quantity * stakeholder_item_pack_sizes.volum_per_vial
			) / 1000
		)
	) AS being_used
FROM
	cold_chain
INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
INNER JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
INNER JOIN ccm_models ON ccm_models.pk_id = cold_chain.ccm_model_id
LEFT JOIN placements ON placements.placement_location_id = placement_locations.pk_id
LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
WHERE
	cold_chain.warehouse_id = $warehouse_id
$where
AND placement_locations.location_type = " . Model_PlacementLocations::LOCATIONTYPE_CCM . "
GROUP BY
	cold_chain.auto_asset_id
ORDER BY
	cold_chain.asset_id,
	cold_chain.ccm_asset_type_id DESC";
//echo $str_sql."<br><br>";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();

        if ($is_return == 2) {
            return $result;
        }

        if ($type == 3) {
            $title = "+2-8C Cold Rooms (In Litres)";
        }
        if ($type == 1) {
            $title = "-20C Cold Rooms (In Litres)";
        }

        $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption= '$title ' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . "' yAxisName='Litres' showValues='1' formatNumberScale='0' theme='fint'>";
        $xmlstore .= "<categories>";
        foreach ($result as $row) {
            $xmlstore .= "<category label='" . $row['asset_id'] . "' />";
        }
        $xmlstore .= "</categories>";

        $xmlstore .= "<dataset seriesName='Net Usable'>";
        foreach ($result as $row) {
            $xmlstore .= "<set value='" . round($row['net_usable']) . "' />";
        }
        $xmlstore .= "</dataset>";

        $xmlstore .= "<dataset seriesName='Being Used'>";
        foreach ($result as $row) {
            $xmlstore .= "<set value='" . round($row['being_used']) . "' />";
        }
        $xmlstore .= "</dataset>";

        $xmlstore .="</chart>";

        return $xmlstore;
    }

    public function MSGraphReportedWastage() {
        /*
          Yearly Comparision - National
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $yearcomp = $post['yearcomp'];
        $all_provinces = $post['all_provinces'];
        $all_districts = $post['all_districts'];
        //$optvals = $post['optvals'];

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $location = new Model_Locations();
        $location->form_values['pk_id'] = $all_provinces;
        $location_name = $location->getLocationName();

        $title = "Reporting Rate and Wastage Comparison  (" . $location_name . "-" . $yearcomp[0] . ")";

        $cache = Zend_Registry::get('cacheManager')->getCache('file');
        $reportedwastages = "REPORTEDWASTAGES_$post[period]$yearcomp[0]$products[0]$all_provinces";

        if (!$xmlstore_array = $cache->load($reportedwastages)) {
            for ($k = 0; $k < sizeof($products); $k++) {
                $product_obj = new Model_ItemPackSizes();
                $product_obj->form_values['pk_id'] = $products[$k];
                $product_name = $product_obj->getProductName();

                $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption= '$product_name $title ' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $product_name . "' yAxisName='Percentage' numberSuffix='%' showValues='1' formatNumberScale='0' theme='fint'>";
                $xmlstore .= "<categories>";
                for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {

                    $month_name = $monthval[$i - 1];
                    $xmlstore .= "<category label='$month_name' />";
                }

                $start_date = $yearcomp[0] . '-' . $months->getBeginMonth() . "-01";
                $end_date = $yearcomp[0] . '-' . $months->getEndMonth() . "-01";

                $sql = "select REPgetWastage('P','$start_date','$end_date',1,'$products[$k]',$all_provinces,0) as xyz  from dual ";
                $str_sql = $this->_em->getConnection()->prepare($sql);
                $str_sql->execute();
                $row = $str_sql->fetchAll();

                if (!empty($row)) {
                    $filedata1 = explode('*', $row[0]['xyz']);
                }

                $sql = "select REPgetRR('P','$start_date','$end_date',1,'$products[$k]',$all_provinces,0) as xyz  from dual ";
                $str_sql = $this->_em->getConnection()->prepare($sql);
                $str_sql->execute();
                $row = $str_sql->fetchAll();

                if (!empty($row)) {
                    $filedata2 = explode('*', $row[0]['xyz']);
                }

                $xmlstore .= "</categories>";

                $xmlstore .= "<dataset seriesName='Wastage'>";
                foreach ($filedata1 as $val2) {
                    $xmlstore .= "<set value='" . round($val2) . "' />";
                }
                $xmlstore .= "</dataset>";

                $xmlstore .= "<dataset seriesName='Reporting Rate'>";
                foreach ($filedata2 as $val2) {
                    $xmlstore .= "<set value='" . round($val2) . "' />";
                }
                $xmlstore .= "</dataset>";

                $obj_product = new Model_ItemPackSizes();
                $prod_result = $obj_product->getProductById($products[0]);

                $xmlstore .="<trendlines>
                <line startvalue='" . $prod_result->getWastageRateAllowed() . "' color='EE2000' displayvalue='Wastage Allowed:" . $prod_result->getWastageRateAllowed() . "%' valueonright='1' />
                </trendlines>";

                $xmlstore .="</chart>";

                $xmlstore_array[] = $xmlstore;
            }
            
            $cache->save($xmlstore_array, $reportedwastages);
        }


        return $xmlstore_array;
    }

    public function simpleGraphOptionYearNational() {
        /*
          Yearly Comparision - National
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $yearcomp = $post['yearcomp'];
        $all_provinces = $post['all_provinces'];
        $all_districts = $post['all_districts'];
        $optvals = $post['optvals'];

        $location = new Model_Locations();
        $loc_name = array();

        if (!empty($all_provinces)) {
            $location->form_values = array("pk_id" => $all_provinces);
            $province_name = $location->getLocationName();
        }
        if (!empty($all_districts)) {
            $location->form_values = array("pk_id" => $all_districts);
            $loc_name[] = $location->getLocationName();
        }

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $rep_option = new Model_ReportOptions();
        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => $post['indicators'],
            'report_comp' => $optvals
        );
        //print_r($rep_option->form_values);
        if ($post['indicators'] == 'GMOS') {
            $yaxis = "Months";
        } else {
            $yaxis = "Doses";
        }

        $query = $rep_option->getReportDataSql();
        $title = $query->getReportTitleSql();

        $location_name = implode(",", $loc_name);

        for ($k = 0; $k < sizeof($products); $k++) {
            $product_obj = new Model_ItemPackSizes();
            $product_obj->form_values['pk_id'] = $products[$k];
            $product_name = $product_obj->getProductName();
            list($indicator, $compare_options) = explode("-", str_replace("Report", "Graph", str_replace("Province", "Provincial", $title)));
            $graph_caption = $indicator . " of " . $product_name;
            if ($optvals == 9) {
                $graph_subcaption = $compare_options;
            } elseif ($optvals == 10) {
                $graph_subcaption = "" . $compare_options . " for " . $province_name;
            } elseif ($optvals == 11) {
                $graph_subcaption = "" . $compare_options . " for " . $location_name;
            }

            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='" . $graph_caption . "' subCaption='" . $graph_subcaption . "' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $loc_name . " - " . $product_name . "' yAxisName='$yaxis' numberSuffix='' showValues='1' formatNumberScale='0'>";
            $xmlstore .= "<categories>";

            for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {

                $month_name = $monthval[$i - 1];
                $xmlstore .= "<category label='$month_name' />";

                $sql = "select " . str_replace("\$i", $i, $query->getReportDataSql()) . " as xyz  from dual ";
                $sql = str_replace("\$year1", $yearcomp, $sql);
                $sql = str_replace("'\$products[\$k]'", "'" . $products[$k] . "'", $sql);
                $sql = str_replace("\$seluser", 1, $sql);
                $sql = str_replace("\$all_provinces", $all_provinces, $sql);
                $sql = str_replace("\$all_districts", "'" . $all_districts . "'", $sql);
                $dbg_sql.=$sql . '<br>';
                //echo $sql . "<br>";
                $str_sql = $this->_em->getConnection()->prepare($sql);
                $str_sql->execute();
                $row = $str_sql->fetchAll();

                if (!empty($row)) {
                    $res = explode('*', $row[0]['xyz']);
                    $row_data = $res[$query->getReportDataPosition()] / 1;
                    //echo $row_data."<br/>";
                    $filedata1[$yearcomp][$monthval[$i - 1]] = $row_data;
                }
            }
            //exit;

            $xmlstore .= "</categories>";

            foreach ($filedata1 as $key1 => $value1) {
                $xmlstore .= "<dataset seriesName='$key1'>";
                foreach ($value1 as $val2) {
                    $xmlstore .= "<set value='" . $val2 . "' />";
                }
                $xmlstore .= "</dataset>";
            }

            $xmlstore .="</chart>";
            $xmlstore_array[] = $xmlstore;
        }

        return $xmlstore_array;
    }

    public function compGraphOptionGeoProvincial() {
        /*
          Provincial
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $year1 = $post['yearcomp'];
        $provinces = $post['all_provinces'];
        $all_districts = $post['all_districts'];
        $optvals = $post['optvals'];

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $rep_option = new Model_ReportOptions();
        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => $post['indicators'],
            'report_comp' => $optvals
        );
        $query = $rep_option->getReportDataSql();
        $title = $query->getReportTitleSql();

        $location = new Model_Locations();
        $loc_name = array();

        foreach ($provinces as $prov_id) {
            $location->form_values = array("pk_id" => $prov_id);
            $loc_name[] = $location->getLocationName();
        }

        $location_name = implode(",", $loc_name);

        for ($k = 0; $k < sizeof($products); $k++) {
            $product_obj = new Model_ItemPackSizes();
            $product_obj->form_values['pk_id'] = $products[$k];
            $product_name = $product_obj->getProductName();
            list($indicator, $compare_options) = explode("-", str_replace("Report", "Graph", str_replace("Province", "Provincial", $title)));
            $graph_caption = $indicator . " of " . $product_name;
            if ($optvals == 1) {
                $graph_subcaption = $compare_options;
            } elseif ($optvals == 2) {
                $graph_subcaption = "Provincial " . $compare_options . " for " . $loc_name;
            } elseif ($optvals == 3) {
                $graph_subcaption = "District " . $compare_options . " for " . $loc_name;
            } elseif ($optvals == 7) {
                $graph_subcaption = "" . $compare_options . " for " . $location_name;
            }

            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='" . $graph_caption . "' subcaption='" . $graph_subcaption . "' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $location_name . " - " . $product_name . "' yAxisName='Doses' numberSuffix='' showValues='1' formatNumberScale='0' theme='fint'>";
            $xmlstore .= "<categories>";

            for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {
                $month_name = $monthval[$i - 1];
                $xmlstore .= "<category label='$month_name' />";

                for ($j = 0; $j < sizeof($provinces); $j++) {
                    $location_obj = new Model_Locations();
                    $location_obj->form_values['product_id'] = $provinces[$j];
                    $loc_name = $location_obj->getLocationById();

                    $sql = "select " . str_replace("\$i", $i, $query->getReportDataSql()) . " as xyz  from dual ";
                    $sql = str_replace("\$year1", $year1, $sql);
                    $sql = str_replace("'\$products[\$k]'", "'" . $products[$k] . "'", $sql);
                    $sql = str_replace("\$seluser", 1, $sql);
                    $sql = str_replace("\$provinces[\$j]", $provinces[$j], $sql);
                    $dbg_sql.=$sql . '<br>';

                    $str_sql = $this->_em->getConnection()->prepare($sql);
                    $str_sql->execute();
                    $row = $str_sql->fetchAll();

                    if (!empty($row)) {
                        $res = explode('*', $row[0]['xyz']);
                        $row_data = $res[$query->getReportDataPosition()] / 1;
                        $filedata1[$loc_name][$monthval[$i - 1]] = $row_data;
                    }
                }
            }

            $xmlstore .= "</categories>";

            foreach ($filedata1 as $key1 => $value1) {
                $xmlstore .= "<dataset seriesName='$key1'>";
                foreach ($value1 as $val2) {
                    $xmlstore .= "<set value='" . $val2 . "' />";
                }
                $xmlstore .= "</dataset>";
            }

            $xmlstore .="</chart>";
            $xmlstore_array[] = $xmlstore;
        }

        return $xmlstore_array;
    }

    public function compGraphOptionGeoDistrict() {
        /*
          District
         */
        $monthval = array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");

        $post = $this->form_values;

        $products = $post['products'];
        $year1 = $post['yearcomp'];
        $provinces = $post['all_provinces'];
        $districts = $post['all_districts'];
        $optvals = $post['optvals'];

        $period = new Model_Period();
        $period->form_values = array(
            'id' => $post['period']
        );
        $months = $period->getPeriodById();

        $rep_option = new Model_ReportOptions();
        $rep_option->form_values = array(
            'stakeholder' => 1,
            'report_id' => $post['indicators'],
            'report_comp' => $optvals
        );
        $query = $rep_option->getReportDataSql();
        $title = $query->getReportTitleSql();

        $location = new Model_Locations();
        $loc_name = array();

        if (!empty($provinces)) {
            $location->form_values = array("pk_id" => $provinces);
            ;
            $province_name = $location->getLocationName();
        }

        foreach ($districts as $dist_id) {
            $location->form_values = array("pk_id" => $dist_id);
            $loc_name[] = $location->getLocationName();
        }

        $location_name = implode(",", $loc_name);

        for ($k = 0; $k < sizeof($products); $k++) {

            $product_obj = new Model_ItemPackSizes();
            $product_obj->form_values['pk_id'] = $products[$k];
            $product_name = $product_obj->getProductName();
            list($indicator, $compare_options) = explode("-", str_replace("Report", "Graph", str_replace("Province", "Provincial", $title)));
            $graph_caption = $indicator . " of " . $product_name;
            if ($optvals == 1) {
                $graph_subcaption = $compare_options;
            } elseif ($optvals == 2) {
                $graph_subcaption = "Provincial " . $compare_options . " for " . $location_name;
            } elseif ($optvals == 3) {
                $graph_subcaption = "District " . $compare_options . " for " . $location_name;
            } elseif ($optvals == 7) {
                $graph_subcaption = "" . $compare_options . " for " . $location_name;
            } elseif ($optvals == 8) {
                $graph_subcaption = "" . $compare_options . " for " . $province_name . "(" . $location_name . ")";
            }

            $xmlstore = "<chart exportEnabled='1' labelDisplay='rotate' slantLabels='1' yAxisMaxValue='100' exportAction='Download' caption='" . $graph_caption . "' subCaption='" . $graph_subcaption . "' exportFileName='" . $title . " - " . date('Y-m-d H:i:s') . " - " . $location_name . " - " . $product_name . "' yAxisName='Doses' numberSuffix='' showValues='1' formatNumberScale='0' theme='fint'>";
            $xmlstore .= "<categories>";

            for ($i = $months->getBeginMonth(); $i <= $months->getEndMonth(); $i++) {
                $month_name = $monthval[$i - 1];
                $xmlstore .= "<category label='$month_name' />";

                for ($j = 0; $j < sizeof($districts); $j++) {
                    $location_obj = new Model_Locations();
                    $location_obj->form_values['product_id'] = $districts[$j];
                    $loc_name = $location_obj->getLocationById();

                    $sql = "select " . str_replace("\$i", $i, $query->getReportDataSql()) . " as xyz  from dual ";
                    $sql = str_replace("\$year1", $year1, $sql);
                    $sql = str_replace("'\$products[\$k]'", "'" . $products[$j] . "'", $sql);
                    $sql = str_replace("\$seluser", 1, $sql);
                    $sql = str_replace("\$provinces[0]", $provinces, $sql);
                    $sql = str_replace("\$dists[\$j]", $districts[$j], $sql);
                    $dbg_sql.=$sql . '<br>';

                    //echo $sql."; ";
                    $str_sql = $this->_em->getConnection()->prepare($sql);
                    $str_sql->execute();
                    $row = $str_sql->fetchAll();

                    if (!empty($row)) {
                        $res = explode('*', $row[0]['xyz']);
                        $row_data = $res[$query->getReportDataPosition()] / 1;
                        $filedata1[$loc_name][$monthval[$i - 1]] = $row_data;
                    }
                }
            }
            //exit;
            //echo "<pre>";
            //print_r($filedata1);
            //exit;

            $xmlstore .= "</categories>";

            foreach ($filedata1 as $key1 => $value1) {
                $xmlstore .= "<dataset seriesName='$key1'>";
                foreach ($value1 as $val2) {
                    $xmlstore .= "<set value='" . $val2 . "' />";
                }
                $xmlstore .= "</dataset>";
            }

            $xmlstore .="</chart>";
            $xmlstore_array[] = $xmlstore;
        }

        //var_dump($xmlstore_array);
        //exit;
        return $xmlstore_array;
    }

    public function coldChainCapacityProduct($type) {
        $date = $this->form_values['to_date'];
        list($d, $m, $y) = explode("/", $date);
        $to_date = "$y-$m-$d";

        $is_return = $type;
        if ($type == 2) {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = 3
                                OR AssetMainType.pk_id = 3
                        )
                        OR (
                                cold_chain.ccm_asset_type_id = 1
                                OR AssetMainType.pk_id = 1
                        )
                )";
        } else {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = $type
                                OR AssetMainType.pk_id = $type
                        ) )";
        }
        $warehouse_id = $this->_identity->getWarehouseId();
        //AND MainAsset.pk_id IN (" . Model_CcmAssetTypes::REFRIGERATOR . ", " . Model_CcmAssetTypes::COLDROOM . ")
        $str_sql = "SELECT
                        cold_chain.asset_id,
                        i2_.item_name AS item_name,
                         s1_.item_pack_size_id,
                         cold_chain.pk_id as location_id,
                        round(
                                Sum(
                                        (
                                                p0_.quantity * stakeholder_item_pack_sizes.volum_per_vial
                                        ) / 1000
                                )
                        ) AS quantity,
                        round(
		Sum(
			
				p0_.quantity
			
		)
	) AS quantityvials,
                        i2_.color
                FROM
                        placements AS p0_
                INNER JOIN stock_batch AS s1_ ON p0_.stock_batch_id = s1_.pk_id
                INNER JOIN item_pack_sizes AS i2_ ON s1_.item_pack_size_id = i2_.pk_id
                INNER JOIN stakeholder_item_pack_sizes ON s1_.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                INNER JOIN placement_locations ON p0_.placement_location_id = placement_locations.pk_id
                INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
                LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                WHERE
                        s1_.warehouse_id = $warehouse_id
                 $where AND 
                i2_.item_category_id = 1
                GROUP BY
                        cold_chain.asset_id,
                        i2_.item_name
                HAVING
                        quantity > 0
                ORDER BY
                        cold_chain.asset_id,i2_.item_name ASC";
//echo $str_sql."<br>";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();

        if ($is_return == 2) {
            return $result;
        }

        if ($type == 3) {
            $title = "+2-8C Cold Rooms Capacity (In Litres)";
        }
        if ($type == 1) {
            $title = "-20C Cold Rooms Capacity (In Litres)";
        }

        $number_prefix = "";
        $xmlstore = "<?xml version=\"1.0\"?>";
        $xmlstore .='<chart caption="' . $title . '" labelDisplay="rotate"  numberprefix="' . $number_prefix . '" showvalues="0" exportEnabled="1" rotateValues="1" formatNumberScale="0" theme="fint">';
        $data_arr = array();
        $items = array();
        $asset_id = array();
        foreach ($result as $row) {
            if (!in_array($row['item_name'], $items)) {
                $items[] = $row['item_name'];
            }if (!in_array($row['asset_id'], $asset_id)) {
                $asset_id[] = $row['asset_id'];
            }
        }

        foreach ($items as $item) {
            foreach ($asset_id as $asset) {
                $data_arr[$item][$asset]['quantity'] = '';
            }
        }

        //App_Controller_Functions::pr($data_arr);
        foreach ($result as $row) {
            $data_arr[$row['item_name']][$row['asset_id']]['quantity'] = $row['quantity'];
            $data_arr[$row['item_name']]['color'] = $row['color'];
        }

        $dataset = "";
        $categories = '<categories>';
        foreach ($asset_id as $asset) {

            $categories .='<category label="' . $asset . '" />';
        }
        $categories .= '</categories>';

        foreach ($data_arr as $item => $sub) {
            $dataset .= '<dataset seriesname="' . $item . '" color="' . $data_arr[$item]['color'] . '" >';
            foreach ($sub as $key => $val) {
                //echo $data_arr[$item][$key]['color'];
                $dataset .= '<set color="' . $data_arr[$item]['color'] . '" value="' . $data_arr[$item][$key]['quantity'] . '" />';
            }
            $dataset .='</dataset>';
        }

        $xmlstore .= $categories;
        $xmlstore .= $dataset;
        $xmlstore .="</chart>";
        // App_Controller_Functions::pr($xmlstore);
        return $xmlstore;
    }

    public function coldChainCapacityProductSummary($type) {
        $date = $this->form_values['to_date'];
        list($d, $m, $y) = explode("/", $date);
        $to_date = "$y-$m-$d";

        $is_return = $type;
        if ($type == 2) {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = 3
                                OR AssetMainType.pk_id = 3
                        )
                        OR (
                                cold_chain.ccm_asset_type_id = 1
                                OR AssetMainType.pk_id = 1
                        )
                )";
        } else {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = $type
                                OR AssetMainType.pk_id = $type
                        ) )";
        }
        $warehouse_id = $this->_identity->getWarehouseId();
        //AND MainAsset.pk_id IN (" . Model_CcmAssetTypes::REFRIGERATOR . ", " . Model_CcmAssetTypes::COLDROOM . ")
        $str_sql = "SELECT
                cold_chain.asset_id,
                cold_chain.pk_id AS location_id,
                round(
                                Sum(
                                        (
                                                p0_.quantity * stakeholder_item_pack_sizes.volum_per_vial
                                        ) / 1000
                                )
                        ) AS quantity,
                i2_.color,
                items.description AS item_name
                FROM
                placements AS p0_
                INNER JOIN stock_batch AS s1_ ON p0_.stock_batch_id = s1_.pk_id
                INNER JOIN item_pack_sizes AS i2_ ON s1_.item_pack_size_id = i2_.pk_id
                INNER JOIN stakeholder_item_pack_sizes ON s1_.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                INNER JOIN placement_locations ON p0_.placement_location_id = placement_locations.pk_id
                INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                INNER JOIN items ON i2_.item_id = items.pk_id
                WHERE
                        s1_.warehouse_id = $warehouse_id
                $where
                GROUP BY
                cold_chain.asset_id,
                items.description
                HAVING
                        quantity > 0
                ORDER BY
                        cold_chain.asset_id,
                        i2_.item_name ASC";
//echo $str_sql."<br>";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();

        if ($is_return == 2) {
            return $result;
        }

        if ($type == 3) {
            $title = "+2-8C Cold Rooms Capacity (In Litres)";
        }
        if ($type == 1) {
            $title = "-20C Cold Rooms Capacity (In Litres)";
        }

        $number_prefix = "";
        $xmlstore = "<?xml version=\"1.0\"?>";
        $xmlstore .='<chart caption="' . $title . '" labelDisplay="rotate"  numberprefix="' . $number_prefix . '" showvalues="0" exportEnabled="1" rotateValues="1" formatNumberScale="0" theme="fint">';
        $data_arr = array();
        $items = array();
        $asset_id = array();
        foreach ($result as $row) {
            if (!in_array($row['item_name'], $items)) {
                $items[] = $row['item_name'];
            }if (!in_array($row['asset_id'], $asset_id)) {
                $asset_id[] = $row['asset_id'];
            }
        }

        foreach ($items as $item) {
            foreach ($asset_id as $asset) {
                $data_arr[$item][$asset]['quantity'] = '';
            }
        }

        //App_Controller_Functions::pr($data_arr);
        foreach ($result as $row) {
            $data_arr[$row['item_name']][$row['asset_id']]['quantity'] = $row['quantity'];
            $data_arr[$row['item_name']]['color'] = $row['color'];
        }

        $dataset = "";
        $categories = '<categories>';
        foreach ($asset_id as $asset) {

            $categories .='<category label="' . $asset . '" />';
        }
        $categories .= '</categories>';

        foreach ($data_arr as $item => $sub) {
            $dataset .= '<dataset seriesname="' . $item . '" color="' . $data_arr[$item]['color'] . '" >';
            foreach ($sub as $key => $val) {
                echo $data_arr[$item][$key]['color'];
                $dataset .= '<set color="' . $data_arr[$item]['color'] . '" value="' . $data_arr[$item][$key]['quantity'] . '" />';
            }
            $dataset .='</dataset>';
        }

        $xmlstore .= $categories;
        $xmlstore .= $dataset;
        $xmlstore .="</chart>";
        // App_Controller_Functions::pr($xmlstore);
        return $xmlstore;
    }

    public function coldChainCapacityVvm($type) {
        $date = $this->form_values['to_date'];
        list($d, $m, $y) = explode("/", $date);
        $to_date = "$y-$m-$d";

        $is_return = $type;
        if ($type == 2) {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = 3
                                OR AssetMainType.pk_id = 3
                        )
                        OR (
                                cold_chain.ccm_asset_type_id = 1
                                OR AssetMainType.pk_id = 1
                        )
                )";
        } else {
            $where = " AND (
                        (
                                cold_chain.ccm_asset_type_id = $type
                                OR AssetMainType.pk_id = $type
                        ) )";
        }
        $warehouse_id = $this->_identity->getWarehouseId();
        //AND MainAsset.pk_id IN (" . Model_CcmAssetTypes::REFRIGERATOR . ", " . Model_CcmAssetTypes::COLDROOM . ")
        $str_sql = "SELECT
                        cold_chain.asset_id,
                        i2_.item_name AS item_name,
                         s1_.item_pack_size_id,
                         cold_chain.pk_id as location_id,
                         vvm_stages.pk_id as vvm_stage,
                         vvm_stages.vvm_stage_value,
                        round(
                                Sum(
                                        (
                                                p0_.quantity * stakeholder_item_pack_sizes.volum_per_vial
                                        ) / 1000
                                )
                        ) AS quantity
                FROM
                        placements AS p0_
                INNER JOIN stock_batch AS s1_ ON p0_.stock_batch_id = s1_.pk_id
                INNER JOIN item_pack_sizes AS i2_ ON s1_.item_pack_size_id = i2_.pk_id
                INNER JOIN stakeholder_item_pack_sizes ON s1_.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                INNER JOIN placement_locations ON p0_.placement_location_id = placement_locations.pk_id
                INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
                LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                INNER JOIN vvm_stages ON p0_.vvm_stage = vvm_stages.pk_id
                WHERE
                        s1_.warehouse_id = $warehouse_id
                 $where AND 
                i2_.item_category_id = 1
                GROUP BY
                        p0_.vvm_stage,
                        i2_.item_name
                HAVING
                        quantity > 0
                ORDER BY
                        p0_.vvm_stage,i2_.item_name ASC";
//echo $str_sql;

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();

        if ($is_return == 2) {
            return $result;
        }

        if ($type == 3) {
            $title = "+2-8C Cold Rooms Capacity (In Litres)";
        }
        if ($type == 1) {
            $title = "-20C Cold Rooms Capacity (In Litres)";
        }

        $number_prefix = "";
        $xmlstore = "<?xml version=\"1.0\"?>";
        $xmlstore .='<chart caption="' . $title . '" labelDisplay="rotate"  numberprefix="' . $number_prefix . '" showvalues="0" exportEnabled="1" rotateValues="1" formatNumberScale="0" theme="fint">';
        $data_arr = array();
        $vvm_stage = array();
        $item_name = array();
        foreach ($result as $row) {
            if (!in_array($row['vvm_stage_value'], $vvm_stage)) {
                $vvm_stage[] = $row['vvm_stage_value'];
            }if (!in_array($row['item_name'], $item_name)) {
                $item_name[] = $row['item_name'];
            }
        }

        foreach ($vvm_stage as $vvm) {
            foreach ($item_name as $items) {
                $data_arr[$vvm][$items]['quantity'] = '';
            }
        }

        //App_Controller_Functions::pr($data_arr);
        foreach ($result as $row) {
            $data_arr[$row['vvm_stage_value']][$row['item_name']]['quantity'] = $row['quantity'];
        }

        $dataset = "";
        $categories = '<categories>';
        foreach ($item_name as $item) {

            $categories .='<category label="' . $item . '" />';
        }
        $categories .= '</categories>';

        foreach ($data_arr as $vvm => $sub) {

            $dataset .= '<dataset seriesname="VVM ' . $vvm . '" >';
            foreach ($sub as $key => $val) {
                $dataset .= '<set value="' . $data_arr[$vvm][$key]['quantity'] . '" />';
            }
            $dataset .='</dataset>';
        }


        $xmlstore .= $categories;
        $xmlstore .= $dataset;
        $xmlstore .="</chart>";
        // App_Controller_Functions::pr($xmlstore);
        return $xmlstore;
    }

}
