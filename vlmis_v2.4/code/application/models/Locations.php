<?php

/**
 * Model_Locations
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_Locations extends Model_Base {

    private $_table;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('Locations');
    }

    public function getAllUCByUserId() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT l.locationName AS location_name,
                        l.pkId AS pk_id,
                        wu.pkId AS wu_pk_id,
                        ws.pkId AS ws_pk_id')
                ->from("WarehouseUsers", "wu")
                ->innerJoin("wu.warehouse", "ws")
                ->innerJoin("ws.location", "l")
                ->where("l.geoLevel = 6")
                ->andWhere("wu.user = " . $this->_identity->getIdentity());
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return FALSE;
        }
    }

    public function getLocationsByLevel() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.locationName,l.pkId')
                ->from("Locations", "l")
                ->where("l.geoLevel = '" . $this->form_values['geo_level_id'] . "' ")
                ->andWhere("l.parent =  '" . $this->form_values['parent_id'] . "'  ");

        $rs = $str_sql->getQuery()->getResult();
        if ($rs != false) {
            $data = array();
            foreach ($rs as $row) {
                $data[] = array(
                    'key' => $row['pkId'],
                    'value' => $row['locationName']
                );
            }
            return $data;
        } else {
            return false;
        }
    }

    public function getWarehouseByLevel() {
        $level = $this->form_values['level'];
        $prov_id = $this->form_values['prov_id'];
        $loc_id = $this->form_values['loc_id'];

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT w.pkId')
                ->from("Warehouses", "w")
                ->join("w.stakeholderOffice", "s")
                ->where("s.stakeholderType = 1")
                ->andWhere("w.status = 1");

        switch ($level) {
            case 1:
                $str_sql->andWhere("s.geoLevel = 1");
                break;
            case 2:
                $str_sql->andWhere("s.geoLevel = 2");
                $str_sql->andWhere("w.province = " . $prov_id);
                break;
            case 6:
                $str_sql->andWhere("s.geoLevel = 4");
                $str_sql->andWhere("w.district = " . $loc_id);
                break;
        }

        $rs = $str_sql->getQuery()->getResult();
        if (!empty($rs[0]['pkId'])) {
            return $rs[0]['pkId'];
        } else {
            return $this->_identity->getWarehouseId();
        }
    }

    public function getLocationById() {
        $id = $this->form_values['product_id'];
        $row = $this->_table->find($id);
        if (count($row) > 0) {
            return $row->getLocationName();
        } else {
            return false;
        }
    }

    public function getLocationsByLevelByProvince() {
        $geo_level_id = $this->form_values['geo_level_id'];
        $province_id = $this->form_values['province_id'];
        $querypro = "SELECT
			l.pk_id as pkId,l.location_name as locationName
			FROM
			locations l
			INNER JOIN pilot_districts ON pilot_districts.district_id = l.district_id
			WHERE
			(l.geo_level_id = $geo_level_id "
                . "AND l.province_id=  $province_id )"
                . "ORDER BY locationName";
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        $rs = $row->fetchAll();

        if ($rs != false) {
            $data = array();
            foreach ($rs as $row) {
                $data[] = array(
                    'key' => $row['pkId'],
                    'value' => $row['locationName']
                );
            }
            return $data;
        } else {
            return false;
        }
    }

    public function getLocationsByLevelByProvinceConsumption() {
        $geo_level_id = $this->form_values['geo_level_id'];
        $province_id = $this->form_values['province_id'];
        $querypro = "SELECT
			l.pk_id as pkId,l.location_name as locationName
			FROM
			locations l
			
			WHERE
			(l.geo_level_id = $geo_level_id "
                . "AND l.province_id=  $province_id)"
                . "ORDER BY locationName";
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        $rs = $row->fetchAll();

        if ($rs != false) {
            $data = array();
            foreach ($rs as $row) {
                $data[] = array(
                    'key' => $row['pkId'],
                    'value' => $row['locationName']
                );
            }
            return $data;
        } else {
            return false;
        }
    }

    public function nationalReport() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT l.locationName AS location_name,
                        l.pkId AS pk_id')
                ->from("Locations", "l")
                ->where("l.geoLevel = 2")
                ->andWhere("l.province IS NOT NULL");

        $rows = $str_sql->getQuery()->getResult();
        return $rows;
    }

    public function stockAvailabilityReport() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT l.locationName AS location_name,
                        l.pkId AS pk_id')
                ->from("Locations", "l")
                ->where("l.geoLevel = 2 ")
                ->andWhere("l.province IS NOT NULL ");
        $row = $str_sql->fetchArray();
        return $row;
    }

    public function devisionalReport() {
        $querypro = "SELECT DISTINCT
                    l0_.pk_id,
                    l0_.location_name
                    FROM
                    locations AS l0_
                    INNER JOIN locations AS dist ON dist.province_id = l0_.pk_id
                    INNER JOIN pilot_districts ON pilot_districts.district_id = dist.pk_id
                    WHERE
                    l0_.geo_level_id = 2 AND
                    l0_.province_id IS NOT NULL
                    ORDER BY l0_.pk_id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        return $rs = $row->fetchAll();
    }

    public function getProvinceForDropoutReport() {
        $querypro = "SELECT DISTINCT
                    l0_.pk_id,
                    l0_.location_name
                    FROM
                    locations AS l0_
                    INNER JOIN locations AS dist ON dist.province_id = l0_.pk_id
                    INNER JOIN pilot_districts ON pilot_districts.district_id = dist.pk_id
                    WHERE
                    l0_.geo_level_id = 2 AND
                    l0_.province_id = 2
                    ORDER BY l0_.pk_id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        return $rs = $row->fetchAll();
    }

    public function conusmptionReportLocations() {
        $querypro = "SELECT DISTINCT
                    l0_.pk_id,
                    l0_.location_name
                    FROM
                    locations AS l0_
                    INNER JOIN locations AS dist ON dist.province_id = l0_.pk_id
                    INNER JOIN pilot_districts ON pilot_districts.district_id = dist.pk_id
                    WHERE
                    l0_.geo_level_id = 2 AND
                    l0_.pk_id = 2 AND
                    l0_.province_id IS NOT NULL
                    ORDER BY l0_.pk_id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        return $rs = $row->fetchAll();
    }

    public function devisionalLocations() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId as pk_id,l.locationName as location_name')
                ->from("Locations", "l")
                ->where("l.geoLevel = 3 ")
                ->andWhere("l.province=$this->province_id");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function districtLocations() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId as pk_id,l.locationName as location_name')
                ->from("PilotDistricts", "pd")
                ->join("pd.district", "l")
                ->where("l.geoLevel = '4' ")
                ->andWhere("l.province= '" . $this->form_values['province_id'] . "' ");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getLocationsByLevelByDistrict() {
        if (!empty($this->form_values['district_id'])) {
            $district_id = $this->form_values['district_id'];
        } else {
            $district_id = '0';
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId as pk_id,l.locationName as location_name')
                ->from("Locations", "l")
                ->where("l.geoLevel = " . $this->form_values['geo_level_id'])
                ->andWhere("l.district = " . $district_id)
                ->orderBy("l.locationName", "ASC");
        $rs = $str_sql->getQuery()->getResult();
        if ($rs != false) {
            $data = array();
            foreach ($rs as $row) {
                $data[] = array(
                    'key' => $row['pk_id'],
                    'value' => $row['location_name']
                );
            }
            return $data;
        } else {
            return false;
        }
    }

    public function getLocationsByLevelByTehsil() {
        if (!empty($this->form_values['parent_id'])) {
            $district_id = $this->form_values['parent_id'];
        } else {
            $district_id = '0';
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId as pk_id,l.locationName as location_name')
                ->from("Locations", "l")
                ->where("l.geoLevel = '" . $this->form_values['geo_level_id'] . "' ")
                ->andWhere("l.parent = '" . $district_id . "' ")
                ->orderBy("l.locationName", "ASC");
        $rs = $str_sql->getQuery()->getResult();
        if ($rs != false) {
            $data = array();
            foreach ($rs as $row) {
                $data[] = array(
                    'key' => $row['pk_id'],
                    'value' => $row['location_name']
                );
            }
            return $data;
        } else {
            return false;
        }
    }

    public function getLocationsByLevelByUc() {
        if (!empty($this->form_values['parent_id'])) {
            $tehsil_id = $this->form_values['parent_id'];
        } else {
            $tehsil_id = '0';
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId as pk_id,l.locationName as location_name')
                ->from("Locations", "l")
                ->where("l.geoLevel = " . $this->form_values['geo_level_id'])
                ->andWhere("l.parent = " . $tehsil_id)
                ->orderBy("l.locationName", "ASC");
        $rs = $str_sql->getQuery()->getResult();
        if ($rs != false) {
            $data = array();
            foreach ($rs as $row) {
                $data[] = array(
                    'key' => $row['pk_id'],
                    'value' => $row['location_name']
                );
            }

            return $data;
        } else {
            return false;
        }
    }

    public function getLocationName() {
        if (!empty($this->form_values['pk_id'])) {
            $pk_id = $this->form_values['pk_id'];
        } else {
            $pk_id = '0';
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.locationName as location_name')
                ->from('Locations', 'l')
                ->where("l.pkId = " . $pk_id);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row[0]['location_name'];
        } else {
            return FALSE;
        }
    }

    public function tehsilLocations() {
        if (!empty($this->form_values['province_id'])) {
            $where[] = "l.province = '" . $this->form_values['province_id'] . "'";
        }
        if (!empty($this->form_values['district_id'])) {
            $where[] = "l.district = '" . $this->form_values['district_id'] . "'";
        }
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId as pk_id,l.locationName as location_name')
                ->from("Locations", "l")
                ->where("l.geoLevel = 5 ")
                ->andWhere($where_s)
                ->orderBy("l.locationName");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function tehsilLocationsDistrict() {
        if (!empty($this->form_values['province_id'])) {
            $where[] = "l.province = '" . $this->form_values['province_id'] . "'";
        }
        if (!empty($this->form_values['district_id'])) {
            $where[] = "l.district = '" . $this->form_values['district_id'] . "'";
        }
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('l.pkId,l.locationName')
                ->from("Locations", "l")
                ->where("l.geoLevel = 5 ")
                ->andWhere($where_s)
                ->orderBy("l.locationName");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function ucLocations() {

        if (!empty($this->form_values['province_id'])) {
            if ($this->form_values['province_id'] != '0') {
                $where[] = "w.province = '" . $this->form_values['province_id'] . "'";
            }
        }
        if (!empty($this->form_values['district_id'])) {
            if ($this->form_values['district_id'] != '0') {
                $where[] = "w.district = '" . $this->form_values['district_id'] . "'";
            }
        }
        if (!empty($this->form_values['tehsil_id'])) {
            if ($this->form_values['tehsil_id'] != '0') {
                $where[] = "l.parent = '" . $this->form_values['tehsil_id'] . "'";
            }
        }

        if (!empty($this->form_values['uc_id'])) {
            if ($this->form_values['uc_id'] != '') {
                $where[] = "l.pkId = '" . $this->form_values['uc_id'] . "'";
            }
        }

        $where[] = "l.geoLevel = 6";
        $where[] = "s.pkId = 1";
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        if (!empty($this->form_values['uc_id']) && $this->form_values['uc_id'] > 0) {
            $wh_name = "w.pkId as pk_id,w.warehouseName as location_name";
        } else {
            $wh_name = "l.pkId as pk_id,l.locationName AS location_name";
        }
        if (!empty($this->form_values['province_id'])) {
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("DISTINCT $wh_name,p.pkId as province")//,p.pkId as province
                    ->from("Warehouses", "w")
                    ->join("w.location", "l")
                    ->join("l.parent", "p")
                    ->join("w.stakeholder", "s")
                    ->where($where_s)
                    ->andWhere("w.status = 1")
                    ->orderBy("s.pkId", "ASC");

            $row = $str_sql->getQuery()->getResult();
            return $row;
        }
    }

    public function getAllLocations() {
        $form_values = $this->form_values;

        if (!empty($form_values['location_level'])) {
            $where[] = "gl.pkId = '" . $form_values['location_level'] . "'";
        } else {

//$where[] = "gl.pkId IN (3,4,5,6)";
            $where[] = "gl.pkId  = '3' ";
        }
        if (!empty($form_values['combo1'])) {
            $where[] = "l.province = '" . $form_values['combo1'] . "'";
        }
        if (!empty($form_values['combo2'])) {
            $where[] = "l.district  = '" . $form_values['combo2'] . "'";
        }
//$where[] = "l.district  = '107' ";
        if (!empty($form_values['combo3'])) {
            $where[] = "l.parent = '" . $form_values['combo3'] . "'";
        }

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        $sub_sql = $this->_em->createQueryBuilder()
                ->select("lo.pkId")
                ->from("Warehouses", "w")
                ->join("w.location", "lo")
                ->where("w.status = 1");


        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName,l.ccmLocationId,gl.geoLevelName,lt.locationTypeName,p.locationName as parent")
                ->from("Locations", "l")
                ->join("l.geoLevel", "gl")
                ->join("l.locationType", "lt")
                ->join("l.parent", "p")
                ->where($where_s);
        if (!empty($form_values['not_used'])) {
            $str_sql->AndWhere("l.pkId NOT IN (" . $sub_sql->getQuery()->getDql() . ")");
        }

//echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getAllProvinces() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->where("l.parent = 10");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getProvince() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->where("l.parent = 10")
                ->andWhere("l.pkId = 2");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function checkLocation() {
        $form_values = $this->form_values;

        if ($form_values['locLvl'] == 3) {
            $where = "l.province='" . $form_values['province'] . "' and l.geoLevel='3' ";
        }
        if ($form_values['locLvl'] == 4) {
            $where = "l.province='" . $form_values['province'] . "' and l.geoLevel='4' ";
        }
        if ($form_values['locLvl'] == 5) {
            $where = "l.district='" . $form_values['district'] . "' and l.geoLevel='5' ";
        }
        if ($form_values['locLvl'] == 6) {
            $where = "l.parent='" . $form_values['locid'] . "' and l.geoLevel='6' ";
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.locationName")
                ->from('Locations', 'l')
                ->where("l.locationName= '" . $form_values['location_name_add'] . "' ")
                ->AndWhere($where);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkLocationUpdate() {
        $form_values = $this->form_values;

        if ($form_values['locLvl'] == 3) {
            $where = "l.province='" . $form_values['province'] . "' and l.geoLevel='3'   ";
        }
        if ($form_values['locLvl'] == 4) {
            $where = "l.province='" . $form_values['province'] . "' and l.geoLevel='4'   ";
        }
        if ($form_values['locLvl'] == 5) {
            $where = "l.district='" . $form_values['district'] . "' and l.geoLevel='5'   ";
        }
        if ($form_values['locLvl'] == 6) {
            $where = "l.parent='" . $form_values['locid'] . "' and l.geoLevel='6'  ";
        }
//        if (is_array($where)) {
//            $where_s = implode(" AND ", $where);
//        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.locationName")
                ->from('Locations', 'l')
                ->where("l.locationName= '" . $form_values['location_name_update'] . "' ")
                ->AndWhere($where);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getLocationType() {
        $form_values = $this->form_values;
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationTypeName")
                ->from('LocationTypes', 'l')
                ->join('l.geoLevel', 'gl')
                ->where("gl.pkId= '" . $form_values . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkCcmLocationId() {
        $form_values = $this->form_values;
//App_Controller_Functions::pr($form_values);
        if ($form_values['locLvl'] == 3) {
            $where = "l.province ='" . $form_values['province'] . "' and gl.pkId='3' and l.ccmLocationId='" . $form_values['ccm_location_id'] . "' ";
        }
        if ($form_values['locLvl'] == 4) {
            $where = "l.province='" . $form_values['province'] . "' and gl.pkId='4' and l.ccmLocationId='" . $form_values['ccm_location_id'] . "' ";
        }
        if ($form_values['locLvl'] == 5) {
            $where = "l.district='" . $form_values['district'] . "' and gl.pkId='5' and l.ccmLocationId='" . $form_values['ccm_location_id'] . "' ";
        }
        if ($form_values['locLvl'] == 6) {
            $where = "l.parent='" . $form_values['locid'] . "' and gl.pkId='6' and l.ccmLocationId='" . $form_values['ccm_location_id'] . "' ";
        }
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }


        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->join('l.geoLevel', 'gl')
                ->where($where);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkCcmLocationIdUpdate() {
        $form_values = $this->form_values;
//App_Controller_Functions::pr($form_values);
        if ($form_values['locLvl'] == 3) {
            $where = "l.province ='" . $form_values['province'] . "' and gl.pkId='3' and l.ccmLocationId='" . $form_values['ccm_location_id_update'] . "' and l.locationName='" . $form_values['location_name_update'] . "' ";
        }
        if ($form_values['locLvl'] == 4) {
            $where = "l.province='" . $form_values['province'] . "' and gl.pkId='4' and l.ccmLocationId='" . $form_values['ccm_location_id_update'] . "'  and l.locationName='" . $form_values['location_name_update'] . "' ";
        }
        if ($form_values['locLvl'] == 5) {
            $where = "l.district='" . $form_values['district'] . "' and gl.pkId='5' and l.ccmLocationId='" . $form_values['ccm_location_id_update'] . "' and l.locationName='" . $form_values['location_name_update'] . "' ";
        }
        if ($form_values['locLvl'] == 6) {
            $where = "l.parent='" . $form_values['locid'] . "' and gl.pkId='6' and l.ccmLocationId='" . $form_values['ccm_location_id_update'] . "' and l.locationName='" . $form_values['location_name_update'] . "' ";
        }
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }


        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->join('l.geoLevel', 'gl')
                ->where($where);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getStakeholderGeoLevel() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("gl.pkId,gl.geoLevelName")
                ->from('GeoLevels', 'gl')
                ->where('gl.pkId=1');
        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getOfficeGeoLevels() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("gl.pkId,gl.geoLevelName")
                ->from('GeoLevels', 'gl')
                ->where('gl.pkId <> 1');
        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    /**
     * @uses api Barcode
     * @return type
     */
    public function getPlacementLocations($wh_id, $type) {
        if ($type == 99) {
            $str_sql = $this->_em->getConnection()->prepare("SELECT
placement_locations.pk_id,
placement_locations.location_type,
placement_locations.location_barcode,
placement_locations.location_id
FROM
placement_locations
INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
WHERE
cold_chain.warehouse_id = $wh_id AND
placement_locations.location_type = $type");
        } else {
            $str_sql = $this->_em->getConnection()->prepare("SELECT
placement_locations.pk_id,
placement_locations.location_type,
placement_locations.location_barcode,
placement_locations.location_id
FROM
placement_locations
INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
WHERE
non_ccm_locations.warehouse_id = $wh_id AND
placement_locations.location_type = $type");
        }

        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    /**
     * @uses api Barcode
     * @return type
     */
    public function getRackInformation() {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
            rack_information.pk_id,
            rack_information.rack_type,
            rack_information.bin_net_capacity,
            rack_information.no_of_bins,
            rack_information.gross_capacity,
            rack_information.capacity_unit
            FROM
            rack_information");
        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function getAllUcsByCampaignId() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("w.pkId,w.warehouseName")
                ->from('Warehouses', 'w')
                ->join('w.district', 'd')
                ->join('w.stakeholder', 's')
                ->join('s.geoLevel', 'gl')
                ->where("s.pkId='" . Model_Stakeholders::CAMPAIGN . "' ")
                ->AndWhere('w.status=1')
                ->AndWhere('d.pkId=' . $this->form_values['district_id']);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getLocations() {
        if (isset($this->form_values['dist_id'])) {
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("l.pkId,l.locationName")
                    ->from("PilotDistricts", "pd")
                    ->join("pd.district", "l")
                    ->join('l.province', 'p')
                    ->join('l.geoLevel', 'gl')
                    ->AndWhere('gl.pkId=5')
                    ->AndWhere('l.pkId=' . $this->form_values['dist_id']);
        } else {
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("l.pkId,l.locationName")
                    ->from("PilotDistricts", "pd")
                    ->join("pd.district", "l")
                    ->join('l.province', 'p')
                    ->join('l.geoLevel', 'gl')
                    ->AndWhere('gl.pkId=4')
                    ->AndWhere('p.pkId=' . $this->form_values['province_id']);
        }

        $rs = $str_sql->getQuery()->getResult();

        return $rs;
    }

    public function getLocationWastages() {
        $prov = $this->form_values['province_id'];
        $district = $this->form_values['district_id'];
        if ($this->form_values['level_id'] == '2') {


            $str_sql = "SELECT
							District.pk_id AS districtId,
							District.location_name AS districtName,
							COUNT(DISTINCT UC.pk_id) AS totalWH
						FROM
							locations AS District
						INNER JOIN locations AS UC ON District.pk_Id = UC.district_id
						INNER JOIN warehouses ON UC.pk_id =  warehouses.location_id
                                                INNER JOIN pilot_districts ON District.pk_Id = pilot_districts.district_id
						WHERE
							 District.geo_level_id = 4
                                                        and warehouses.status = 1
							AND UC.province_id = " . $prov . "
                                                           
						GROUP BY
							District.pk_id
						ORDER BY
							districtId ASC";
        } else {
            $str_sql = "SELECT DISTINCT
	District.pk_id AS districtId,
	District.location_name AS districtName

        FROM
                locations AS District
        INNER JOIN locations AS UC ON District.pk_Id = UC.parent_id
        INNER JOIN warehouses ON UC.pk_id = warehouses.location_id

        WHERE
                District.geo_level_id = 5
        AND warehouses. STATUS = 1
        AND  UC.district_id = " . $district . "
        GROUP BY
                UC.pk_id
        ORDER BY
                districtId ASC";
        }


        $this->_em = Zend_Registry::get('doctrine');
        $row = $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getProvincesName() {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
					Province.pk_id,
					Province.location_name
				FROM
					locations AS Province
				WHERE
					Province.geo_level_id = 2
				AND Province.parent_id IS NOT NULL
				ORDER BY
					Province.pk_id ASC");

        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function getProvinceToWarehouse() {
        $prov_id = isset($this->form_values['combo']) ? $this->form_values['combo'] : '';
        $and = '';
        if (!empty($prov_id)) {
            $and = " AND warehouses.province_id = $prov_id";
        }

        if ($this->form_values['SkOfcLvl'] == 1) {
            $str_sql = $this->_em->getConnection()->prepare("SELECT
					pk_id,
					warehouse_name,
					stakeholder_office_id
				FROM
					warehouses
					WHERE stakeholder_office_id=" . $this->form_values['SkOfcLvl'] . "
                                        and warehouses.status = 1  
				ORDER BY
					warehouse_name");
        } else if ($this->form_values['SkOfcLvl'] == 2) {
            $str_sql = $this->_em->getConnection()->prepare("SELECT
					pk_id,
					warehouse_name,
					stakeholder_office_id
				FROM
					warehouses
				WHERE
					 stakeholder_office_id=" . $this->form_values['SkOfcLvl'] . "
                                AND warehouses.status = 1  
				AND warehouses.province_id IN (
					SELECT DISTINCT
						locations.province_id
					FROM
						locations
					
				)
				ORDER BY
					warehouse_name");
        } else if ($this->form_values['SkOfcLvl'] > 2) {
            $str_sql = $this->_em->getConnection()->prepare("SELECT  pk_id,warehouse_name,stakeholder_office_id FROM warehouses WHERE   warehouses.status = 1 and  stakeholder_office_id=" . $this->form_values['SkOfcLvl'] . $and . '  ORDER BY warehouse_name');
        }

        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function getProvinceName() {
        $str_sql = "SELECT DISTINCT
                        p.pk_id,
                        p.location_name
                FROM
                        locations
                INNER JOIN pilot_districts ON locations.district_id = pilot_districts.district_id
                INNER JOIN locations AS p ON p.pk_id = locations.province_id
                ORDER BY
                        p.pk_id ASC";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        return $result;
    }

// Added by GM 
    public function getCcmLocationsStatus($wh_id) {

        $str_sql = "SELECT
            placement_locations.location_id,
            cold_chain.asset_id AS location_name,
           IF (
	ROUND(
                    abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
            ) = 0,
            NULL,
            item_pack_sizes.item_name
    ) AS item_name,

    IF (
            ROUND(
                    abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
            ) = 0,
            NULL,
            item_pack_sizes.pk_id
    ) AS item_id,
            ROUND(abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack) AS pack_quantity,
            abs(Sum(placements.quantity)) AS quantity
            FROM
            placement_locations
            LEFT JOIN placements ON placement_locations.pk_id = placements.placement_location_id
            INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
            LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
            LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
            LEFT JOIN  item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
            WHERE
                    cold_chain.warehouse_id =" . $wh_id . "
            GROUP BY
                    cold_chain.pk_id,	
            item_pack_sizes.pk_id";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

// Added by GM
    public function getNonCcmLocationsStatus($wh_id) {

        $str_sql = "SELECT
	placement_locations.location_id,
	non_ccm_locations.location_name,

IF (
	ROUND(
		abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
	) = 0,
	NULL,
	item_pack_sizes.item_name
) AS item_name,

IF (
	ROUND(
		abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
	) = 0,
	NULL,
	item_pack_sizes.pk_id
) AS item_id,
 ROUND(
	abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
) AS pack_quantity,
 abs(Sum(placements.quantity)) AS quantity
FROM
	placement_locations
LEFT JOIN placements ON placement_locations.pk_id = placements.placement_location_id
INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
LEFT JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
WHERE
	non_ccm_locations.warehouse_id = " . $wh_id . "
GROUP BY
	non_ccm_locations.pk_id,
	item_pack_sizes.pk_id";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getPilotProvinces() {
        $str_sql = "SELECT DISTINCT
                        p.pk_id,
                        p.location_name
                FROM
                        locations
                INNER JOIN pilot_districts ON locations.district_id = pilot_districts.district_id
                INNER JOIN locations AS p ON p.pk_id = locations.province_id
                ORDER BY
                        p.pk_id ASC";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getDistrictName() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->Where('l.pkId =' . $this->form_values['district_id']);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getDistrictsByProvince() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->where('l.geoLevel =4')
                ->andWhere('l.province =' . $this->form_values['province_id']);

        $rs = $str_sql->getQuery()->getResult();

        return $rs;
    }

    public function getTehsilsByDistrict() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->where('l.geoLevel =5')
                ->andWhere('l.district =' . $this->form_values['district_id']);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getUcsByTehsil() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->where('l.geoLevel =6')
                ->andWhere('l.parent =' . $this->form_values['tehsil_id']);

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getSindhDistricts() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->where('l.geoLevel =4')
                ->andWhere('l.province =2');

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getUcsByDistrict() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("l.pkId,l.locationName")
                ->from('Locations', 'l')
                ->Where('l.district =' . $this->form_values['district_id'])
                ->andWhere('l.geoLevel =6');

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getLocationsForConsumptionReport() {
        $dist_id = $this->form_values['dist_id'];
        $year = $this->form_values['year'];
        if (!empty($this->form_values['dist_id'])) {
            $where = "  AND
                    locations.pk_id = $dist_id ";
        } else {
            $where = "";
        }

        $str_sql = "SELECT
                    ucs.pk_id as pk_id,
                    locations.location_name AS district,
                    tehsils.location_name AS tehsil,
                    ucs.location_name AS ucs,
                    ROUND(COALESCE(ROUND((((location_populations.population*1)/100*3.5)))/12,null,0)) AS target
                    FROM
                    locations
                    INNER JOIN locations AS tehsils ON locations.pk_id = tehsils.parent_id
                    INNER JOIN locations AS ucs ON tehsils.pk_id = ucs.parent_id
                    INNER JOIN warehouses ON ucs.pk_id = warehouses.location_id
                    INNER JOIN location_populations ON ucs.pk_id = location_populations.location_id
                    WHERE
                    locations.geo_level_id = 4 AND
                    YEAR(location_populations.estimation_date) = '$year' AND
                    locations.province_id = 2 $where
                    GROUP BY ucs.pk_id
                    ORDER BY tehsil,ucs";



        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getLocationsForConsumptionReport2() {

        $str_sql = "SELECT
                    ucs.pk_id as pk_id,
                    locations.location_name AS district,
                    tehsils.location_name AS tehsil,
                    ucs.location_name AS ucs,
                    warehouse_population.facility_total_pouplation
                    FROM
                    locations
                    INNER JOIN locations AS tehsils ON locations.pk_id = tehsils.parent_id
                    INNER JOIN locations AS ucs ON tehsils.pk_id = ucs.parent_id
                    INNER JOIN warehouses ON ucs.pk_id = warehouses.location_id
                    LEFT  JOIN warehouse_population ON warehouses.pk_id = warehouse_population.warehouse_id
                    WHERE
                    locations.geo_level_id = 4 AND
                    locations.province_id = 2 
                    ORDER BY tehsil,ucs";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getLocationForReport() {
        $id = $this->form_values['dist_id'];
        $row = $this->_table->find($id);
        if (count($row) > 0) {
            return $row->getLocationName();
        } else {
            return false;
        }
    }

    public function getBatchVvmLocations($batch_id) {
        $str_sql = "SELECT
                            cold_chain.asset_id AS location,
                            Sum(placements.quantity) AS placed_qty,
                            vvm_stages.vvm_stage_value,
                            vvm_stages.pk_id AS vvm_stage,
                            item_pack_sizes.vvm_group_id,
                            stock_batch.pk_id as batch_id,
                            placement_locations.pk_id as location_id
                    FROM
                            placements
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                    INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    WHERE
                            placements.stock_batch_id = $batch_id
                    AND placement_locations.location_type = " . Model_Placements::LOCATIONTYPE_CCM . "
                    GROUP BY
                            placements.vvm_stage,
                            placements.placement_location_id,
                            placements.stock_batch_id";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getCountryList() {
        $str_sql = "SELECT
                        tbl_country.id AS country_id,
                        tbl_country.countryName AS country_name
                    FROM
                        tbl_country";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

}
