<?php

/**
 * Model_Placements
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_Placements extends Model_Base {

    const LOCATIONTYPE_CCM = 99;

    private $_table;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('Placements');
    }

    public function getListing() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("p.quantity,"
                        . "c.pkId, c.assetId,"
                        . "s.number,a.assetTypeName")
                ->from("Placements", "p")
                ->leftJoin("p.stockBatch", "s")
                ->leftJoin("p.ccm", "c")
                ->leftJoin("c.ccmAssetType", "a")
                ->where("p.isPlaced = 1")
                ->andWhere("p.stockDetail = " . $this->form_values['stock_detail']);

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function add() {
        $data = $this->form_values;

        $qty = $data['quantity'];

        $placement = new Placements();
        $placement->setQuantity($qty);

        $placement_loc_id = $this->_em->getRepository("PlacementLocations")->find($data['placement_loc_id']);
        $placement->setPlacementLocation($placement_loc_id);
        $batch_id = $this->_em->getRepository("StockBatch")->find($data['batch_id']);
        $placement->setStockBatch($batch_id);
        if ($data['detail_id'] != 0) {
            $detail_id = $this->_em->getRepository("StockDetail")->find($data['detail_id']);
            $placement->setStockDetail($detail_id);
        }
        $type_id = $this->_em->getRepository("ListDetail")->find($data['placement_loc_type_id']);
        $placement->setPlacementTransactionType($type_id);
        $created_by = $this->_em->getRepository("Users")->find($data['user_id']);
        $placement->setCreatedBy($created_by);
        $placement->setCreatedDate(new \DateTime($data['created_date']));
        $vvms = $this->_em->getRepository("VvmStages")->find($data['vvmstage']);
        $placement->setVvmStage($vvms);
        $placement->setIsPlaced($data['is_placed']);

        $this->_em->persist($placement);
        $this->_em->flush();

        return $placement->getPkId();
    }

    public function addPlacement() {
        $form_values = $this->form_values;
        // App_Controller_Functions::pr($form_values);
        if ($form_values['rcvedit'] == "Yes") {
            $plcs = $this->_em->getRepository("Placements")->findOneBy(array("stockDetail" => $form_values['stock_detail_id']));
            if (count($plcs) > 0) {
                $placement = $this->_em->getRepository("Placements")->findOneBy(array("stockDetail" => $form_values['stock_detail_id']));
            } else {
                $placement = new Placements();
            }
        } else {
            $placement = new Placements();
        }

        if (!empty($form_values['batchId'])) {
            // echo "here";exit;
            $stock_batch_id = $this->_em->find("StockBatch", $form_values['batchId']);
            $placement->setStockBatch($stock_batch_id);
            $qty = str_replace(",", "", $form_values['quantity']);
            //$qty_per_pack = $stock_batch_id->getStakeholderItemPackSize()->getQuantityPerPack();
            //$quantity = $qty * $qty_per_pack;
            $placement->setQuantity($qty);
        }

        if (!empty($form_values['placement_location_id'])) {
            $placement_location_id = $this->_em->getRepository("PlacementLocations")->findOneBy(array("locationId" => $form_values['placement_location_id'], "locationType" => Model_PlacementLocations::LOCATIONTYPE_CCM));
            if (count($placement_location_id) > 0) {
                $placement->setPlacementLocation($placement_location_id);
            }
        }

        if (!empty($form_values['stock_detail_id'])) {
            $stock_detail_id = $this->_em->find("StockDetail", $form_values['stock_detail_id']);
            $placement->setStockDetail($stock_detail_id);
        }

        $transaction_type = $this->_em->find("ListDetail", Model_PlacementLocations::PLACEMENT_TRANSACTION_TYPE_P);
        $placement->setPlacementTransactionType($transaction_type);
        $vvms = $this->_em->getRepository("VvmStages")->find($form_values['vvm_stage']);
        $placement->setVvmStage($vvms);
        $placement->setIsPlaced($form_values['is_placed']);

        $user_id = $this->_em->find("Users", $this->_user_id);
        $placement->setCreatedBy($user_id);
        $placement->setCreatedDate(new DateTime(date("Y-m-d h:i:s")));

        $this->_em->persist($placement);
        $this->_em->flush();

        return true;
    }

    public function addTransferStock() {
        $form_values = $this->form_values;
        $placement_location_id = $this->_em->getRepository("PlacementLocations")->findOneBy(array("locationId" => $form_values['non_ccm_location_id'], "locationType" => Model_PlacementLocations::LOCATIONTYPE_NONCCM));
        $placement_id = $form_values['id'];
        $plac = $this->_em->find("PlacementSummary", $placement_id);
        $stock_batch = $plac->getStockBatch();
        $plc_transaction_type = $this->_em->find("ListDetail", Model_PlacementLocations::PLACEMENT_TRANSACTION_TYPE_T);
        $user_id = $this->_em->find("Users", $this->_user_id);

        $placement = new Placements();
        $placement->setPlacementLocation($placement_location_id);
        $placement->setQuantity($form_values['quantity']);
        $placement->setStockBatch($stock_batch);
        $placement->setPlacementTransactionType($plc_transaction_type);
        $placement->setCreatedBy($user_id);
        $placement->setCreatedDate(new \DateTime());
        $vvms = $this->_em->getRepository("VvmStages")->find(0);
        $placement->setVvmStage($vvms);
        $this->_em->persist($placement);

        $placement2 = new Placements();
        $placement2->setQuantity("-" . $form_values['quantity']);
        $placement2->setPlacementLocation($plac->getPlacementLocation());
        $placement2->setStockBatch($plac->getStockBatch());
        $placement2->setPlacementTransactionType($plc_transaction_type);
        $placement2->setCreatedBy($user_id);
        $placement2->setCreatedDate(new \DateTime());
        $vvms = $this->_em->getRepository("VvmStages")->find(0);
        $placement2->setVvmStage($vvms);
        $this->_em->persist($placement2);

        $this->_em->flush();

        return true;
    }

    public function addTransferStockVaccines() {

        $form_values = $this->form_values;

        $placement_location_id = $this->_em->getRepository("PlacementLocations")->findOneBy(array("locationId" => $form_values['asset_id'], "locationType" => Model_PlacementLocations::LOCATIONTYPE_CCM));
        $placement_id = $form_values['id'];
        $plac = $this->_em->find("PlacementSummary", $placement_id);
        $plc_transaction_type = $this->_em->find("ListDetail", Model_PlacementLocations::PLACEMENT_TRANSACTION_TYPE_T);
        $user_id = $this->_em->find("Users", $this->_user_id);

        //echo "<pre>";
        //print_r($form_values);
        //exit;
        $placement = new Placements();
        $placement->setPlacementLocation($placement_location_id);
        $placement->setQuantity($form_values['quantity']);
        $placement->setStockBatch($plac->getStockBatch());
        //if ($plac->getStockDetail() != null) {
        //$placement->setStockDetail($plac->getStockDetail());
        //}
        $placement->setPlacementTransactionType($plc_transaction_type);
        $placement->setCreatedBy($user_id);
        $placement->setCreatedDate(new \DateTime(date("Y-m-d")));
        $placement->setVvmStage($plac->getVvmStage());
        $placement->setIsPlaced(1);
        $this->_em->persist($placement);

        $placement2 = new Placements();
        $placement2->setQuantity("-" . $form_values['quantity']);
        $placement2->setPlacementLocation($plac->getPlacementLocation());
        $placement2->setStockBatch($plac->getStockBatch());
        //if ($placement2->getStockDetail() != null) {
        //$placement2->setStockDetail($plac->getStockDetail());
        //}
        $placement2->setPlacementTransactionType($plc_transaction_type);
        $placement2->setCreatedBy($user_id);
        $placement2->setCreatedDate(new \DateTime(date("Y-m-d")));
        $placement2->setVvmStage($plac->getVvmStage());
        $placement2->setIsPlaced(0);
        $this->_em->persist($placement2);

        $this->_em->flush();

        return true;
    }

    public function getProductPlacements($plc_id, $id) {
        $em = Zend_Registry::get('doctrine');
        $str_sql = $em->getConnection()->prepare("SELECT
                    placements.pk_id,
                    placements.quantity,
                    stock_batch.number,
                    item_pack_sizes.item_name,
                    placement_locations.pk_id,
                    item_pack_sizes.quantity_per_pack
                FROM
                    placements
                INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                WHERE
                    placements.stock_detail_id =" . $id . " AND
                    placements.placement_location_id =" . $plc_id);

        // echo  $str_sql->getQuery()->getSql();
        $str_sql->execute();
        $result = $str_sql->fetchAll();

        return $result;
    }

    public function getStockInBin($order, $sort) {
        $wh_id = $this->_identity->getWarehouseId();
        $em = Zend_Registry::get('doctrine');

        $str_sql = "SELECT
                            placement_summary.batch_number AS BatchNo,
                            placement_summary.stock_batch_id AS BatchID,
                            non_ccm_locations.location_name AS LocationName,
                            non_ccm_locations.pk_id AS LocationID,
                            placement_summary.pk_id AS PlacementID,
                            Sum(placement_summary.quantity) AS Qty,
                            placement_summary.item_name,
                            stakeholder_item_pack_sizes.pk_id,
                            stakeholder_item_pack_sizes.quantity_per_pack as quantity_per_pack
                    FROM
                            placement_summary
                    INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
                    INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                    INNER JOIN stock_batch ON placement_summary.stock_batch_id = stock_batch.pk_id
                    INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                    WHERE
                            non_ccm_locations.warehouse_id = " . $wh_id . "
                    AND placement_summary.placement_location_id = " . $this->form_values['id'] . "
                    GROUP BY
                            placement_summary.stock_batch_id";

        if ($order == 'product') {
            $str_sql .= " ORDER BY placement_summary.item_name $sort";
        }
        if ($order == 'batch_no') {
            $str_sql .= " ORDER BY stock_batch.number $sort";
        }
        if ($order == 'carton_qty') {
            $str_sql .= " ORDER BY placement_summary.quantity $sort";
        }
        if ($order == 'qty') {
            $str_sql .= " ORDER BY placement_summary.quantity $sort";
        }

        $res = $em->getConnection()->prepare($str_sql);

        $res->execute();
        $result = $res->fetchAll();
        return $result;
    }

    public function getStockInBinVaccines($order, $sort) {

        $warehouse_id = $this->_identity->getWarehouseId();
        $id = $this->form_values['id'];

        $str_sql = $this->_em->createQueryBuilder()
                ->select("ps")
                ->from("PlacementSummary", "ps")
                ->join('ps.stockBatch', 'sb')
                ->where("ps.placementLocation = $id")
                ->andWhere("sb.warehouse =" . $warehouse_id);

        switch ($order) {
            case 'product':
                $str_sql->orderBy("ps.itemName", $sort);
                break;
            case 'batch_no':
                $str_sql->orderBy("ps.batchNumber", $sort);
                break;
            case 'qty':
                $str_sql->orderBy("ps.quantity", $sort);
                break;
            case 'expiry':
                $str_sql->orderBy("sb.expiryDate", $sort);
                break;
            case 'vvm_stage':
                $str_sql->orderBy("ps.vvmStage", $sort);
                break;
            default:
                $str_sql->orderBy("ps.itemName,sb.number", "ASC");
                break;
        }

        $str_sql->having("ps.quantity > 0");
        //echo $str_sql->getQuery()->getSql();
        //exit;
        return $str_sql->getQuery()->getResult();
    }

    public function getProductPlacementsByStock($sb) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('ips.quantityPerPack')
                ->from("Placements", "p")
                ->join('p.stockBatch', 'sb')
                ->join('sb.itemPackSize', 'ips')
                ->where("p.stockBatch =" . $sb);

        $result = $str_sql->getQuery()->getResult();
        if (!empty($result) && count($result) > 0) {
            return $result[0]['quantityPerPack'];
        } else {
            return false;
        }
    }

    public function getPlacementByBatch($sb) {
        //echo $sb; exit;
//       echo "SELECT
//                placements.quantity,
//                placements.placement_location_id,
//                non_ccm_locations.location_name,
//                item_pack_sizes.quantity_per_pack
//                FROM
//                placements
//                INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
//                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
//                INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
//                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
//                WHERE
//                placements.stock_batch_id = 1";exit;


        $em = Zend_Registry::get('doctrine');
        $str_sql = $em->getConnection()->prepare("SELECT
                placements.quantity,
                placements.placement_location_id,
                non_ccm_locations.location_name,
                item_pack_sizes.quantity_per_pack
                FROM
                placements
                INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                WHERE
                placements.stock_batch_id =" . $sb);

        // echo $str_sql->getQuery()->getSql();exit;

        $str_sql->execute();
        $result = $str_sql->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function searchBatchLocations() {

        $type = $this->form_values['loc_type'];

        // 100 - Non CCm
        // 99 - CCM

        if ($type == Model_PlacementLocations::LOCATIONTYPE_NONCCM) {
            $em = Zend_Registry::get('doctrine');

            $str_sql = "SELECT
            placement_locations.location_id as LocationID,
            non_ccm_locations.location_name AS LocationName,
            item_pack_sizes.pk_id AS ItemID,
            item_pack_sizes.item_name AS ItemName,
            item_pack_sizes.item_category_id,
            ROUND(
                            abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
                    ) AS pack_quantity,
            abs(Sum(placements.quantity)) AS Qty,
            stock_batch.pk_id AS BatchID,
            stock_batch.number AS BatchNo,
            stakeholder_item_pack_sizes.quantity_per_pack AS quantity_per_pack,
            placement_locations.pk_id as PlacementID
            FROM
                    placement_locations
            LEFT JOIN placements ON placement_locations.pk_id = placements.placement_location_id
            INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
            LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
            LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
            LEFT JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
            WHERE
                    non_ccm_locations.warehouse_id = " . $this->form_values['wh_id'] . "
            AND stock_batch.pk_id =" . $this->form_values['batch_id'] . "
            GROUP BY
                    non_ccm_locations.pk_id  HAVING Qty > 0
            ";
//            $str_sql = 'SELECT
//             stock_batch.expiry_date AS Expiry,
//             stock_batch.number AS BatchNo,
//             items.pk_id AS ItemID,
//             stock_batch.pk_id AS BatchID,
//             items.description AS ItemName,
//             placements.stock_detail_id AS DetailID,
//             non_ccm_locations.location_name AS LocationName,
//             non_ccm_locations.pk_id AS LocationID,
//             placements.pk_id AS PlacementID,
//             placements.vvm_stage AS VVMStage,
//            abs(SUM(placements.quantity)) AS Qty,
//            item_pack_sizes.item_category_id,
//            stakeholder_item_pack_sizes.quantity_per_pack
//            FROM
//             placements
//            INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
//            INNER JOIN stakeholder_item_pack_sizes ON  stock_batch.stakeholder_item_pack_size_id =stakeholder_item_pack_sizes.pk_id
//            INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id  = item_pack_sizes.pk_id
//            INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
//            INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
//            INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
//            WHERE placements.stock_batch_id = "' . $this->form_values['batch_id'] . '" AND non_ccm_locations.warehouse_id = "' . $this->form_values['wh_id'] . '"'
//                    . 'GROUP BY placements.stock_batch_id,placements.placement_location_id ';
//            //HAVING Qty > 0
            $result = $em->getConnection()->prepare($str_sql);
        } else {
            $em = Zend_Registry::get('doctrine');

            $str_sql = "SELECT
                placement_locations.location_id AS LocationID,
                cold_chain.asset_id AS LocationName,
                item_pack_sizes.pk_id AS ItemID,
                item_pack_sizes.item_name AS ItemName,
                item_pack_sizes.item_category_id,
                ROUND(
                        abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
                ) AS pack_quantity,
                abs(Sum(placements.quantity)) AS Qty,
                placements.vvm_stage AS VVMStage,
                stock_batch.pk_id AS BatchID,
                stock_batch.number AS BatchNo,
                stakeholder_item_pack_sizes.quantity_per_pack AS quantity_per_pack,
                placement_locations.pk_id AS PlacementID,
                 placements.pk_id as placements_id
        FROM
                placement_locations
        LEFT JOIN placements ON placement_locations.pk_id = placements.placement_location_id
        INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
        LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
        LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
        LEFT JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
        WHERE
                cold_chain.warehouse_id = " . $this->form_values['wh_id'] . "
        AND stock_batch.pk_id = " . $this->form_values['batch_id'] . "
        GROUP BY
                cold_chain.pk_id";

//            $str_sql = 'SELECT  stock_batch.expiry_date AS Expiry,
//             stock_batch.number AS BatchNo,
//             items.pk_id AS ItemID,
//             stock_batch.pk_id AS BatchID,
//             items.description AS ItemName,
//             placements.pk_id AS PlacementID,
//              placements.vvm_stage AS VVMStage,
//             placements.stock_detail_id AS DetailID,
//             abs(SUM(placements.quantity)) AS Qty,
//             cold_chain.asset_id AS LocationName,
//             cold_chain.serial_number AS SerialNo,
//             cold_chain.auto_asset_id AS AutoAssetID,
//             cold_chain.pk_id AS LocationID,
//             item_pack_sizes.item_category_id,
//             stakeholder_item_pack_sizes.quantity_per_pack
//             FROM
//                    placements
//            INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
//            INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//            INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//            INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
//            INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
//            INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
//            WHERE placements.stock_batch_id = "' . $this->form_values['batch_id'] . '" AND cold_chain.warehouse_id = "' . $this->form_values['wh_id'] . '"'
//                    . 'GROUP BY placements.stock_batch_id, placements.placement_location_id';
//            //HAVING Qty > 0
            $result = $em->getConnection()->prepare($str_sql);
        }
        $result->execute();
        $res = $result->fetchAll();
        if (count($res) > 0) {
            return $res;
        } else {
            return false;
        }
    }

    public function searchLocationsProducts() {
        $type = $this->form_values['loc_type'];

        // 100 - Non CCm
        // 99 - CCM

        if ($type == 100) {
            $em = Zend_Registry::get('doctrine');
            $str_sql = "SELECT
placement_locations.location_id AS LocationID,
non_ccm_locations.location_name AS LocationName,
item_pack_sizes.pk_id AS ItemID,
item_pack_sizes.item_name AS ItemName,
ROUND(
		abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
	) AS pack_quantity,
abs(Sum(placements.quantity)) AS Qty,
stock_batch.pk_id AS BatchID,
stakeholder_item_pack_sizes.quantity_per_pack AS quantity_per_pack,
placement_locations.pk_id AS placement_locationsid,
item_pack_sizes.item_category_id,
stock_batch.expiry_date AS Expiry,
stock_batch.number as BatchNo,
placements.stock_detail_id AS DetailID,
non_ccm_locations.warehouse_id as wh_id
FROM
	placement_locations
LEFT JOIN placements ON placement_locations.pk_id = placements.placement_location_id
INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
LEFT JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
WHERE
	non_ccm_locations.warehouse_id =" . $this->form_values['wh_id'] . " and placement_locations.pk_id = " . $this->form_values['p_loc_id'] . "
GROUP BY
	non_ccm_locations.pk_id,
stock_batch.pk_id HAVING Qty > 0
";
//            $str_sql = 'SELECT stock_batch.expiry_date AS Expiry,
//	stock_batch.number AS BatchNo,
//	items.pk_id AS ItemID,
//        stock_batch.pk_id AS BatchID,
//        items.description AS ItemName,
//        placements.stock_detail_id AS DetailID,
//        non_ccm_locations.location_name AS LocationName,
//        non_ccm_locations.pk_id AS LocationID,
//        placement_locations.pk_id as placement_locationsid,
//        non_ccm_locations.warehouse_id as wh_id,
//        placements.pk_id AS PlacementID,
//       abs(sum(placements.quantity)) AS Qty,
//        item_pack_sizes.item_category_id,
//        stakeholder_item_pack_sizes.quantity_per_pack
//        FROM
//        placements
//        INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
//        INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//        INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//        INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
//        INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
//        INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
//        WHERE placements.placement_location_id = "' . $this->form_values['p_loc_id'] . '" AND non_ccm_locations.warehouse_id = "' . $this->form_values['wh_id'] . '"'
//                    . 'GROUP BY placements.stock_batch_id ';
            //HAVING Qty > 0
            $result = $em->getConnection()->prepare($str_sql);
        } else {
            $em = Zend_Registry::get('doctrine');

            $str_sql = "SELECT
placement_locations.location_id AS LocationID,
cold_chain.asset_id AS LocationName,
item_pack_sizes.pk_id AS ItemID,
item_pack_sizes.item_name AS ItemName,
ROUND(
		abs(Sum(placements.quantity)) / stakeholder_item_pack_sizes.quantity_per_pack
	) AS pack_quantity,
abs(Sum(placements.quantity)) AS Qty,
stock_batch.pk_id AS BatchID,
stakeholder_item_pack_sizes.quantity_per_pack AS quantity_per_pack,
placement_locations.pk_id AS placement_locationsid,
item_pack_sizes.item_category_id,
stock_batch.expiry_date AS Expiry,
stock_batch.number as BatchNo,
placements.stock_detail_id AS DetailID,
cold_chain.warehouse_id as wh_id
FROM
	placement_locations
LEFT JOIN placements ON placement_locations.pk_id = placements.placement_location_id
INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
LEFT JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
WHERE
	cold_chain.warehouse_id =" . $this->form_values['wh_id'] . " and placement_locations.pk_id = " . $this->form_values['p_loc_id'] . "
GROUP BY
	cold_chain.pk_id,
stock_batch.pk_id
";
//            $str_sql = 'SELECT
//            stock_batch.expiry_date AS Expiry,
//            stock_batch.number AS BatchNo,
//            items.pk_id AS ItemID,
//            stock_batch.pk_id AS BatchID,
//            items.description AS ItemName,
//            placement_locations.pk_id as placement_locationsid,
//            placements.pk_id AS PlacementID,
//            placements.stock_detail_id AS DetailID,
//            abs(placements.quantity) AS Qty,
//            cold_chain.asset_id AS LocationName,
//            cold_chain.serial_number AS SerialNo,
//            cold_chain.auto_asset_id AS AutoAssetID,
//            cold_chain.pk_id AS LocationID,
//            item_pack_sizes.item_category_id,
//            stakeholder_item_pack_sizes.quantity_per_pack
//            FROM
//            placements
//            INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
//            INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//            INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//            INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
//            INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
//            INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
//            WHERE placements.placement_location_id = "' . $this->form_values['p_loc_id'] . '" AND cold_chain.warehouse_id = "' . $this->form_values['wh_id'] . '"'
//                    . 'GROUP BY placements.stock_batch_id';
            //HAVING Qty > 0
            $result = $em->getConnection()->prepare($str_sql);
        }

        $result->execute();
        $res = $result->fetchAll();
        if (count($res) > 0) {
            return $res;
        } else {
            return false;
        }
    }

    public function addPlaceStock() {
        $form_values = $this->form_values;
        // print_r($form_values);exit;

        foreach ($form_values['quantity'] as $key => $value) {
            if (!empty($value) && $value > 0) {
                $placement = new Placements();
                list($stcdetail, $stcbatch) = explode('_', $key);
                $placement->setQuantity($value * $form_values['quantity_per_pack']);
                $stock_batch = $this->_em->find("StockBatch", $stcbatch);
                $placement->setStockBatch($stock_batch);
                $stock_detail = $this->_em->find("StockDetail", $stcdetail);
                $placement->setStockDetail($stock_detail);
                $placement_location = $this->_em->find("PlacementLocations", $form_values['placement_loc_id']);
                $placement->setPlacementLocation($placement_location);

                $plc_transaction_type = $this->_em->find("ListDetail", Model_PlacementLocations::PLACEMENT_TRANSACTION_TYPE_P);
                $placement->setPlacementTransactionType($plc_transaction_type);
                $user_id = $this->_em->find("Users", $this->_user_id);
                $placement->setCreatedBy($user_id);
                $placement->setCreatedDate(new \DateTime());
                $this->_em->persist($placement);
            }
        }
        $this->_em->flush();
        return true;
    }

    public function addPlaceStockVaccines() {
        $form_values = $this->form_values;
        //post_max_size = 40M;
        // ini_set('post_max_size', '64M');
        //print_r($form_values['quantity']);exit;
        // if (!empty($form_values['quantity']) && $form_values['quantity'] > 0) {
        foreach ($form_values['quantity'] as $key => $value) {
            if (!empty($value) && $value > 0) {
                $placement = new Placements();
                list($stcdetail, $stcbatch) = explode('_', $key);
                $placement->setQuantity($value);
                $stock_batch = $this->_em->find("StockBatch", $stcbatch);
                $placement->setStockBatch($stock_batch);
                $stock_detail = $this->_em->find("StockDetail", $stcdetail);
                $placement->setStockDetail($stock_detail);
                $placement_location = $this->_em->find("PlacementLocations", $form_values['placement_loc_id']);
                $placement->setPlacementLocation($placement_location);
                $placement->setVvmStage($stock_detail->getVvmStage());
                $placement->setIsPlaced(1);
                $plc_transaction_type = $this->_em->find("ListDetail", Model_PlacementLocations::PLACEMENT_TRANSACTION_TYPE_P);
                $placement->setPlacementTransactionType($plc_transaction_type);
                $user_id = $this->_em->find("Users", $this->_user_id);
                $placement->setCreatedBy($user_id);
                $placement->setCreatedDate(new \DateTime());
                $this->_em->persist($placement);
            }
        }
        // }
        $this->_em->flush();
        return true;
    }

    // 17-07-2014
    public function updateVvmStage() {

        $batch_id = $this->form_values['batch_id'];
        $placement_id = $this->form_values['placement_id'];
        $vvm_stage = $this->form_values['vvm_stage'];
        $qty = $this->form_values['qty'];
        $old_vvm_stage = $this->form_values['old_vvm_stage'];

        $placements = $this->_em->getRepository("Placements")->findOneBy(array("vvmStage" => $vvm_stage, "stockBatch" => $batch_id, "placementLocation" => $placement_id));
        if (count($placements) > 0) {
            $placements->setQuantity($placements->getQuantity() + $qty);
            $this->_em->persist($placements);
            $this->_em->flush();
        }

        $placements2 = $this->_em->getRepository("Placements")->findOneBy(array("vvmStage" => $old_vvm_stage, "stockBatch" => $batch_id, "placementLocation" => $placement_id));
        if (count($placements2) > 0) {
            $result = $placements2->getQuantity() - $qty;
            if ($result > 0) {
                $placements2->setQuantity($placements2->getQuantity() - $qty);
            } else {
                $placements2->setQuantity(0);
            }

            $this->_em->persist($placements2);
            $this->_em->flush();
        }

        return true;
    }

    public function stockPickDetailVaccines($stcdet, $stcbat, $wh_id, $item_cat) {
        $str_sql = "SELECT
	stock_batch.expiry_date AS Expiry,
	stock_batch.number AS BatchNo,
	items.pk_id AS ItemID,
	stock_batch.pk_id AS BatchID,
	items.description AS ItemName,
	placements.stock_detail_id AS DetailID,
cold_chain.asset_id as LocationName,
cold_chain.pk_id as LocationID,
	placements.pk_id AS PlacementID,
	placements.vvm_stage AS VVMStage,
	Sum(placements.quantity) AS Qty,
	stakeholder_item_pack_sizes.quantity_per_pack,
	placements.placement_location_id AS plc_loc_id
FROM
	placements
INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
WHERE
	placements.stock_batch_id = " . $stcbat . "
AND cold_chain.warehouse_id = " . $wh_id . "
GROUP BY
	placements.stock_batch_id,
	cold_chain.asset_id";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        //print_r($result);exit;
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function stockPickDetail($stcdet, $stcbat, $wh_id, $item_cat) {
        $em = Zend_Registry::get('doctrine');

//       $str_sql = "SELECT
//sum(placements.quantity) as quantity,
//placements.pk_id,
//non_ccm_locations.location_name,
//stakeholder_item_pack_sizes.quantity_per_pack
//FROM
//placements
//INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
//INNER JOIN non_ccm_locations ON non_ccm_locations.pk_id = placement_locations.location_id
//INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
//INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//WHERE placements.stock_batch_id = " . $stcbat . " AND
//        placement_locations.location_type =" . Model_PlacementLocations::LOCATIONTYPE_NONCCM." GROUP BY
//	placements.stock_batch_id" ;
//


        $str_sql = "SELECT
	stock_batch.expiry_date AS Expiry,
	stock_batch.number AS BatchNo,
	item_pack_sizes.pk_id AS ItemID,
	stock_batch.pk_id AS BatchID,
	item_pack_sizes.item_name AS ItemName,
	placements.stock_detail_id AS DetailID,
	non_ccm_locations.location_name AS LocationName,
	non_ccm_locations.pk_id AS LocationID,
	placements.pk_id AS PlacementID,
	placements.vvm_stage AS VVMStage,
	Sum(placements.quantity) AS Qty,
	stakeholder_item_pack_sizes.quantity_per_pack,
	placements.placement_location_id AS plc_loc_id
FROM
	placements
INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
WHERE
	placements.stock_batch_id = " . $stcbat . "
AND non_ccm_locations.warehouse_id = " . $wh_id . "
GROUP BY
	placements.stock_batch_id,
non_ccm_locations.location_name";

        /* $str_sql = "SELECT
          SUM(placements.quantity) as Qty,
          non_ccm_locations.location_name as LocationName,
          placements.placement_location_id as plc_loc_id
          FROM
          placements
          INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
          INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
          WHERE
          placements.stock_batch_id = $stcbat AND
          placement_locations.location_type = 100
          GROUP BY
          placements.stock_batch_id"; */

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        //print_r($result);exit;
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function addStockQuantity() {
        $data = $this->form_values;
        $loc_id = $data['loc_id'];
        foreach ($data['quantity'] as $key => $value) {
            if (!empty($value) && $value > 0) {
                $placement = new Placements();
                $placement->setQuantity("-" . $value);
                $placement_loc_id = $this->_em->find("PlacementLocations", $loc_id[$key]);
                $placement->setPlacementLocation($placement_loc_id);
                $batch_id = $this->_em->find("StockBatch", $data['BatchID']);
                $placement->setStockBatch($batch_id);
                $detail_id = $this->_em->find("StockDetail", $data['DetailID']);
                $placement->setStockDetail($detail_id);
                $placement->setVvmStage($detail_id->getVvmStage());
                $placement->setIsPlaced(0);
                $plc_transaction_type = $this->_em->find("ListDetail", Model_PlacementLocations::PLACEMENT_TRANSACTION_TYPE_PICK);
                $placement->setPlacementTransactionType($plc_transaction_type);
                $user_id = $this->_em->find("Users", $this->_user_id);
                $placement->setCreatedBy($user_id);

                $placement->setCreatedDate(new \DateTime($data['created_date']));
                $this->_em->persist($placement);
            }
        }
        $this->_em->flush();
        return true;
    }

    public function getBatchPlacmentDetail($id) {
        $str_sql = "SELECT
cold_chain.asset_id,
placement_summary.quantity,
placement_summary.vvm_stage,
placement_summary.batch_number
FROM
placement_summary
INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
WHERE
placement_summary.stock_batch_id = $id";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getNonVaccineBatchPlacmentDetail($id) {
        $str_sql = "SELECT
	placement_summary.quantity,
	placement_summary.batch_number,
	non_ccm_locations.pk_id AS asset_id,
	non_ccm_locations.location_name
FROM
	placement_summary
INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
WHERE placement_summary.stock_batch_id = $id";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getProductPlacmentDetail($id) {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "SELECT
                            cold_chain.asset_id,
                            placement_summary.quantity,
                            placement_summary.batch_number,
                            placement_locations.pk_id,
                            IF(item_pack_sizes.vvm_group_id=1,vvm_stages.pk_id,vvm_stages.vvm_stage_value) vvm_stage
                    FROM
                            placement_summary
                    INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN stock_batch ON placement_summary.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    INNER JOIN vvm_stages ON placement_summary.vvm_stage = vvm_stages.pk_id
                    WHERE
                            stock_batch.item_pack_size_id = $id AND
                    stock_batch.warehouse_id = $wh_id ORDER BY cold_chain.asset_id,placement_summary.batch_number";
        //echo $str_sql;
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getProductPlacmentSummary($id) {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "SELECT
                            cold_chain.asset_id,
                            SUM(placement_summary.quantity) as quantity,
                            placement_locations.pk_id,
                            IF(item_pack_sizes.vvm_group_id=1, vvm_stages.pk_id, vvm_stages.vvm_stage_value) vvm_stage
                    FROM
                            placement_summary
                    INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN stock_batch ON placement_summary.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    INNER JOIN vvm_stages ON placement_summary.vvm_stage = vvm_stages.pk_id
                    WHERE
                            stock_batch.item_pack_size_id = $id AND
                    stock_batch.warehouse_id = $wh_id "
                . "GROUP BY cold_chain.asset_id,placement_summary.vvm_stage"
                . "  ORDER BY cold_chain.asset_id";
//echo $str_sql;
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getStockInBinVaccinesGraph() {

        $warehouse_id = $this->_identity->getWarehouseId();
        $id = $this->form_values['id'];
        $str_sql = "SELECT DISTINCT
                cold_chain.pk_id,
                cold_chain.asset_id,
                cold_chain.auto_asset_id,
                AssetSubtype.asset_type_name,
                placement_locations.pk_id AS plc_pk_id,
                ccm_models.ccm_model_name,
                round(
		 (
			SUM(
				(
					placements.quantity * stakeholder_item_pack_sizes.volum_per_vial
				) / 1000
			)
		) / (
						ccm_models.net_capacity_20 + ccm_models.net_capacity_4
		) * 100
                ) AS used_percentage
                FROM
                cold_chain
                INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
                LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                LEFT JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
                INNER JOIN ccm_models ON ccm_models.pk_id = cold_chain.ccm_model_id
                LEFT JOIN placements ON placements.placement_location_id = placement_locations.pk_id
                LEFT JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                LEFT JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                WHERE
                        cold_chain.warehouse_id = $warehouse_id
                AND (
                        (
                                cold_chain.ccm_asset_type_id = 3
                                OR AssetMainType.pk_id = 3
                        )
                        OR (
                                cold_chain.ccm_asset_type_id = 1
                                OR AssetMainType.pk_id = 1
                        )
                )
                AND placement_locations.location_type = " . self::LOCATIONTYPE_CCM . "
                    AND placement_locations.pk_id = '" . $id . "'

                GROUP BY
                cold_chain.auto_asset_id ORDER BY cold_chain.asset_id,cold_chain.ccm_asset_type_id DESC";

        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        $data = $row->fetchAll();
        //  $total_per = $data[0]['used_percentage'];
        $used_per = $data[0]['used_percentage'];
        $total_per = 100 - $data[0]['used_percentage'];

        if ($used_per > 100) {
            $total_per = 0;
        }

        $asset_id = $data[0]['asset_id'];
        $xmlstore = "<chart exportEnabled='1' exportAction='Download' caption='$asset_id Capacity (In Percentage)' subcaption='' exportFileName=' " . date('Y-m-d H:i:s') . "' yAxisName='Percentage' numberSuffix='%'  formatNumberScale='0' >";
        $xmlstore .= "<set label='Remaining' color='#008000' value='$total_per' />";
        $xmlstore .= "<set label='Used' color='#FF0000' value='$used_per' />";

        $xmlstore .="</chart>";

        return $xmlstore;
    }

    public function locationType($id) {

        $str_sql = "SELECT
                placement_locations.location_type

                FROM
                placement_locations
                WHERE
                placement_locations.pk_id = $id";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result[0]['location_type'];
        } else {
            return false;
        }
    }

    public function getAvailableVvmStages($batch_id, $item_cat) {

        $form_values = $this->form_values;
        $where = '';

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        if (!empty($form_values)) {
            $priority = $form_values['priority'];

            switch (trim($priority)) {
                case 'P1':
                    $where = " AND (
                            placements.vvm_stage = 2
                            OR (
                                    placements.vvm_stage = 1
                                    AND DATE_FORMAT(
                                            stock_batch.expiry_date,
                                            '%Y-%m-%d'
                                    ) BETWEEN '$today'
                                    AND '$after3month'
                            )
                    )";
                    break;
                case 'P2':
                    $where = " AND placements.vvm_stage = 1
                            AND DATE_FORMAT(
                                    stock_batch.expiry_date,
                                    '%Y-%m-%d'
                            ) BETWEEN '$after3month'
                            AND '$afteryear'";
                    break;
                case 'P3':
                    $where = " AND placements.vvm_stage = 1
                            AND DATE_FORMAT(
                                    stock_batch.expiry_date,
                                    '%Y-%m-%d'
                            ) > '$afteryear'";
                    break;
            }
        }

        if ($item_cat == 1) {
            $str_sql = "SELECT DISTINCT
                            Sum(placements.quantity) AS qty,
                            placements.placement_location_id,
                            cold_chain.asset_id,
                            vvm_stages.pk_id as vvm_stage_id,
                            IF(item_pack_sizes.vvm_group_id=1,vvm_stages.pk_id,vvm_stages.vvm_stage_value) vvm_stage
                    FROM
                            placements
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                    INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    WHERE
                            placements.stock_batch_id = $batch_id
                    AND placement_locations.location_type = 99
                    $where
                    GROUP BY
                            vvm_stages.pk_id,
                            placements.stock_batch_id,
                            placements.placement_location_id HAVING qty > 0";
        } else {
            $str_sql = "SELECT DISTINCT
                            Sum(placements.quantity) AS qty,
                            placements.placement_location_id,
                            non_ccm_locations.location_name as asset_id
                    FROM
                            placements
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                    WHERE
                            placements.stock_batch_id = $batch_id
                    AND placement_locations.location_type = 100
                    GROUP BY
                            placements.stock_batch_id,
                            placements.placement_location_id HAVING qty > 0";
        }

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function addIssuePlacement() {
        $data = $this->form_values;

        $qty = $data['quantity'];

        $placement = new Placements();
        $placement->setQuantity($qty);

        $placement_loc_id = $this->_em->getRepository("PlacementLocations")->find($data['placement_loc_id']);
        $placement->setPlacementLocation($placement_loc_id);
        $batch_id = $this->_em->getRepository("StockBatch")->find($data['batch_id']);
        $placement->setStockBatch($batch_id);
        if ($data['detail_id'] != 0) {
            $detail_id = $this->_em->getRepository("StockDetail")->find($data['detail_id']);
            $placement->setStockDetail($detail_id);
        }
        $type_id = $this->_em->getRepository("ListDetail")->find($data['placement_loc_type_id']);
        $placement->setPlacementTransactionType($type_id);
        $created_by = $this->_em->getRepository("Users")->find($data['user_id']);
        $placement->setCreatedBy($created_by);
        $placement->setCreatedDate(new \DateTime($data['created_date']));
        $vvms = $this->_em->getRepository("VvmStages")->find($data['vvmstage']);
        $placement->setVvmStage($vvms);
        $placement->setIsPlaced($data['is_placed']);

        $this->_em->persist($placement);
        $this->_em->flush();

        return $placement->getPkId();
    }

    public function getIssueAvailableVvmStages() {


        $batch_id = $this->form_values['batch_id'];
        $priority = $this->form_values['priority'];


        $batch = $this->_em->getRepository("StockBatch")->find($batch_id);
        $item_cat = $batch->getItemPackSize()->getItemCategory()->getPkId();



        $form_values['priority'] = $priority;
        $where = '';

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        if (!empty($form_values)) {
            $priority = $form_values['priority'];

            switch (trim($priority)) {
                case 'P1':
                    $where = " AND (
                            placements.vvm_stage = 2
                            OR (
                                    placements.vvm_stage = 1
                                    AND DATE_FORMAT(
                                            stock_batch.expiry_date,
                                            '%Y-%m-%d'
                                    ) BETWEEN '$today'
                                    AND '$after3month'
                            )
                    )";
                    break;
                case 'P2':
                    $where = " AND placements.vvm_stage = 1
                            AND DATE_FORMAT(
                                    stock_batch.expiry_date,
                                    '%Y-%m-%d'
                            ) BETWEEN '$after3month'
                            AND '$afteryear'";
                    break;
                case 'P3':
                    $where = " AND placements.vvm_stage = 1
                            AND DATE_FORMAT(
                                    stock_batch.expiry_date,
                                    '%Y-%m-%d'
                            ) > '$afteryear'";
                    break;
            }
        }

        if ($item_cat == 1) {
            $str_sql = "SELECT DISTINCT
                            Sum(placements.quantity) AS qty,
                            placements.placement_location_id,
                            cold_chain.asset_id,
                            vvm_stages.pk_id as vvm_stage_id,
                            IF(item_pack_sizes.vvm_group_id=1,vvm_stages.pk_id,vvm_stages.vvm_stage_value) vvm_stage
                    FROM
                            placements
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                    INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    WHERE
                            placements.stock_batch_id = $batch_id
                    AND placement_locations.location_type = 99
                    $where
                    GROUP BY
                            vvm_stages.pk_id,
                            placements.stock_batch_id,
                            placements.placement_location_id HAVING qty > 0";
        } else {
            $str_sql = "SELECT DISTINCT
                            Sum(placements.quantity) AS qty,
                            placements.placement_location_id,
                            non_ccm_locations.location_name as asset_id
                    FROM
                            placements
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                    WHERE
                            placements.stock_batch_id = $batch_id
                    AND placement_locations.location_type = 100
                    GROUP BY
                            placements.stock_batch_id,
                            placements.placement_location_id HAVING qty > 0";
        }

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

}
