<?php

/**
 * Model_ItemPackSizes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_StakeholderItemPackSizes extends Model_Base {

    private $_table;

    const GTIN = 1;
    const BATCH = 1;
    const EXPIRY = 1;
    const GTIN_START = 3;
    const GTIN_END = 16;
    const BATCH_START = 28;
    const BATCH_END = 36;
    const EXPIRY_START = 19;
    const EXPIRY_END = 25;
    const NON_GSI = 48;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('StakeholderItemPackSizes');
    }

    public function setupBarcode() {
        $form_values = $this->form_values;
        $stakeholder_item_pack = new StakeholderItemPackSizes();


        if (!empty($form_values['item_pack_size_id'])) {
            $item_pack = $this->_em->find("ItemPackSizes", $form_values['item_pack_size_id']);
            $stakeholder_item_pack->setItemPackSize($item_pack);
        }

        if (!empty($form_values['stakeholder_id'])) {
            $stakeholder = $this->_em->find("Stakeholders", $form_values['stakeholder_id']);
            $stakeholder_item_pack->setStakeholder($stakeholder);
        }

        if (!empty($form_values['packaging_level'])) {
            $packaging_level = $this->_em->find("ListDetail", $form_values['packaging_level']);
            $stakeholder_item_pack->setPackagingLevel($packaging_level);
        }
        if (!empty($form_values['batch_length'])) {

            $stakeholder_item_pack->setBatchLength($form_values['batch_length']);
        }


        $stakeholder_item_pack->setItemGtin($form_values['item_gtin']);

        $stakeholder_item_pack->setGtin($form_values['gtin']);
        $stakeholder_item_pack->setBatch($form_values['batch']);
        $stakeholder_item_pack->setExpiry($form_values['expiry']);
        $stakeholder_item_pack->setGtinStartPosition($form_values['gtin_start_position']);
        $stakeholder_item_pack->setBatchNoStartPosition($form_values['batch_no_start_position']);
        $stakeholder_item_pack->setExpiryDateStartPosition($form_values['expiry_date_start_position']);
        $stakeholder_item_pack->setGtinEndPosition($form_values['gtin_end_position']);
        $stakeholder_item_pack->setBatchNoEndPosition($form_values['batch_no_end_position']);
        $stakeholder_item_pack->setExpiryDateEndPosition($form_values['expiry_date_end_position']);
        $stakeholder_item_pack->setPackSizeDescription($form_values['pack_size_description']);
        $stakeholder_item_pack->setLength($form_values['length']);
        $stakeholder_item_pack->setWidth($form_values['width']);
        $stakeholder_item_pack->setHeight($form_values['height']);
        if (!empty($form_values['expiry_date_format'])) {
            //$expiry_date_format = $this->_em->find("ListDetail", $form_values['expiry_date_format']);
            $stakeholder_item_pack->setExpiryDateFormat($form_values['expiry_date_format']);
        }
        $stakeholder_item_pack->setQuantityPerPack($form_values['quantity_per_pack']);
        $stakeholder_item_pack->setVolumePerUnitNet($form_values['volume_per_unit_net']);
        $stakeholder_item_pack->setPrePrintedBarcode($form_values['pre_printed_barcode']);
        $this->_em->persist($stakeholder_item_pack);
        $this->_em->flush();
    }

    public function updateBarcodeSave() {
        $form_values = $this->form_values;

        $stakeholder_item_pack = $this->_em->find("StakeholderItemPackSizes", $form_values['barcode_id']);

        if (!empty($form_values['item_pack_size_id_update'])) {
            $item_pack = $this->_em->find("ItemPackSizes", $form_values['item_pack_size_id_update']);
            $stakeholder_item_pack->setItemPackSize($item_pack);
        }

        if (!empty($form_values['stakeholder_id_update'])) {
            $stakeholder = $this->_em->find("Stakeholders", $form_values['stakeholder_id_update']);
            $stakeholder_item_pack->setStakeholder($stakeholder);
        }

        if (!empty($form_values['packaging_level_update'])) {
            $packaging_level = $this->_em->find("ListDetail", $form_values['packaging_level_update']);
            $stakeholder_item_pack->setPackagingLevel($packaging_level);
        }
        if (!empty($form_values['batch_length'])) {
            $stakeholder_item_pack->setBatchLength($form_values['batch_length']);
        }


        $stakeholder_item_pack->setItemGtin($form_values['item_gtin']);

        $stakeholder_item_pack->setGtin($form_values['gtin']);
        $stakeholder_item_pack->setBatch($form_values['batch']);
        $stakeholder_item_pack->setExpiry($form_values['expiry']);
        $stakeholder_item_pack->setGtinStartPosition($form_values['gtin_start_position']);
        $stakeholder_item_pack->setBatchNoStartPosition($form_values['batch_no_start_position']);
        $stakeholder_item_pack->setExpiryDateStartPosition($form_values['expiry_date_start_position']);
        $stakeholder_item_pack->setGtinEndPosition($form_values['gtin_end_position']);
        $stakeholder_item_pack->setBatchNoEndPosition($form_values['batch_no_end_position']);
        $stakeholder_item_pack->setExpiryDateEndPosition($form_values['expiry_date_end_position']);
        $stakeholder_item_pack->setPackSizeDescription($form_values['pack_size_description']);
        $stakeholder_item_pack->setLength($form_values['length']);
        $stakeholder_item_pack->setWidth($form_values['width']);
        $stakeholder_item_pack->setHeight($form_values['height']);

        $stakeholder_item_pack->setQuantityPerPack($form_values['quantity_per_pack']);
        $stakeholder_item_pack->setVolumePerUnitNet($form_values['volume_per_unit_net']);
        $stakeholder_item_pack->setPrePrintedBarcode($form_values['pre_printed_barcode']);
        $this->_em->persist($stakeholder_item_pack);
        $this->_em->flush();
    }

    public function getStakeholderItemPackSizes() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('si.pkId,si.quantityPerPack,si.volumePerUnitNet,si.itemGtin,si.batchLength,ip.itemName,s.stakeholderName,ld.listValue')
                ->from("StakeholderItemPackSizes", "si")
                ->join('si.itemPackSize', 'ip')
                ->join('si.stakeholder', 's')
                ->join('si.packagingLevel', 'ld')
                ->where("s.stakeholderType = 3")
                ->orderBy("s.stakeholderName");
        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function getStakeholderItemPackSizesByItem() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sips')
                ->from("StakeholderItemPackSizes", "sips")
                ->join('sips.stakeholder', 's')
                ->where("s.stakeholderType = 3")
                ->andWhere("sips.itemPackSize = " . $this->form_values['item_id']);
        $result = $str_sql->getQuery()->getResult();

        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getStakeholderItemPackSizesAll($barcode_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('si.pkId,si.itemGtin,si.gtin,si.batch,si.expiry,si.batchNoStartPosition,si.batchNoEndPosition,si.expiryDateStartPosition,si.expiryDateEndPosition,si.gtinStartPosition,si.gtinEndPosition,si.prePrintedBarcode,si.packSizeDescription,si.length,si.width,si.height,si.quantityPerPack,si.volumePerUnitNet,ip.itemName,s.stakeholderName,ld.listValue as barcodeType,ld1.listValue as expiryDateFormat')
                ->from("StakeholderItemPackSizes", "si")
                ->join('si.itemPackSize', 'ip')
                ->join('si.stakeholder', 's')
                ->join('si.barcodeType', 'ld')
                ->join('si.expiryDateFormat', 'ld1')
                ->where('si.pkId =' . $barcode_id);
        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function updateBarcode() {
        $form_values = $this->form_values;

        $stakeholder_item_pack = $this->_table->find($form_values['barcode_id']);
        $barcode_type = $this->_em->find("ListDetail", $form_values['barcode_type']);
        $stakeholder_item_pack->setBarcodeType($barcode_type);
        $stakeholder_id = $this->_em->find("Stakeholders", $form_values['stakeholder_id']);
        $stakeholder_item_pack->setStakeholder($stakeholder_id);
        $item_pack_id = $this->_em->find("ItemPackSizes", $form_values['item_pack_size_id']);
        $stakeholder_item_pack->setItemPackSize($item_pack_id);
        $stakeholder_item_pack->setGtin($form_values['gtin']);
        $stakeholder_item_pack->setBatch($form_values['batch']);
        $stakeholder_item_pack->setExpiry($form_values['expiry']);
        $stakeholder_item_pack->setItemGtin($form_values['item_gtin']);
        $stakeholder_item_pack->setGtinStartPosition($form_values['gtin_start_position']);
        $stakeholder_item_pack->setBatchNoStartPosition($form_values['batch_no_start_position']);
        $stakeholder_item_pack->setExpiryDateStartPosition($form_values['expiry_date_start_position']);
        //$expiry_date_format = $this->_em->find("ListDetail", $form_values['expiry_date_format']);
        $stakeholder_item_pack->setExpiryDateFormat($form_values['expiry_date_format']);
        $stakeholder_item_pack->setGtinEndPosition($form_values['gtin_end_position']);
        $stakeholder_item_pack->setBatchNoEndPosition($form_values['batch_no_end_position']);
        $stakeholder_item_pack->setExpiryDateEndPosition($form_values['expiry_date_end_position']);
        $stakeholder_item_pack->setPackSizeDescription($form_values['pack_size_description']);
        $stakeholder_item_pack->setLength($form_values['length']);
        $stakeholder_item_pack->setWidth($form_values['width']);
        $stakeholder_item_pack->setHeight($form_values['height']);
        $stakeholder_item_pack->setQuantityPerPack($form_values['quantity_per_pack']);
        $stakeholder_item_pack->setVolumePerUnitNet($form_values['volume_per_unit_net']);
        $stakeholder_item_pack->setPrePrintedBarcode($form_values['pre_printed_barcode']);
        $this->_em->persist($stakeholder_item_pack);
        return $this->_em->flush();
    }

    public function getAllProductsByStakeholderType() {
        /* $str_qry = "SELECT
          DISTINCT item_pack_sizes.item_name,
          stakeholder_item_pack_sizes.item_pack_size_id
          FROM
          stakeholder_item_pack_sizes
          INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
          INNER JOIN stakeholders ON stakeholder_item_pack_sizes.stakeholder_id = stakeholders.pk_id
          WHERE
          stakeholders.stakeholder_activity_id = '" . $this->form_values['stakeholder_id'] . "' "
          . "ORDER BY item_pack_sizes.list_rank ASC";
          $row = $this->_em->getConnection()->prepare($str_qry);
          $row->execute();
          $result = $row->fetchAll();
          return $result; */

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT ips.itemName as item_name, ips.pkId as item_pack_size_id')
                ->from("StakeholderItemPackSizes", 'sips')
                ->join("sips.itemPackSize", "ips")
                ->join("sips.stakeholder", "s")
                ->where("s.stakeholderActivity = '" . $this->form_values['stakeholder_id'] . "' ")
                ->orderBy("ips.listRank", 'ASC');
        //echo $str_sql->getQuery()->getSql();
        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function getAllProductsByStakeholderTypeVaccines() {

        if (empty($this->form_values['stakeholder_id'])) {
            $this->form_values['stakeholder_id'] = '1';
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT ips.itemName as item_name,ips.description, ips.pkId as item_pack_size_id')
                ->from("ItemSchedule", 'sips')
                ->join("sips.itemPackSize", "ips")
                ->join("ips.itemCategory", "ic")
                ->where("sips.stakeholderActivity = '" . $this->form_values['stakeholder_id'] . "' ")
                ->andWhere("ic.pkId=1")
                ->orderBy("sips.pkId", 'ASC');

       // echo $str_sql->getQuery()->getSql();
        
        //  $result = $str_sql->getQuery()->setMaxResults(6)->getResult();

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function getAllIssueProductsByStakeholder() {
        $arr_data = array();
        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT ips.pkId')
                ->from('StockBatch', 'sb')
                ->join("sb.itemPackSize", "ips")
                ->where("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->andWhere("DATE_FORMAT(sb.expiryDate,'%Y-%m-%d') > '" . date("Y-m-d") . "'")
                ->andWhere("sb.quantity > 0")
                ->orderBy("ips.listRank", "ASC");

        $rows = $str_sql->getQuery()->getResult();
        if (!empty($rows) && count($rows) > 0) {
            foreach ($rows as $row) {
                $item_ids[] = $row['pkId'];
            }

            $str_sql = $this->_em->createQueryBuilder()
                    ->select('DISTINCT ips.itemName as item_name, ips.pkId as item_pack_size_id')
                    ->from("ItemPackSizes", 'ips')
                    ->where("ips.pkId IN (" . implode(",", $item_ids) . ") ")
                    ->andWhere("ips.stakeholderActivity IN( '" . $this->form_values['stakeholder_id'] . "',5)")
                    ->orderBy("ips.listRank", 'ASC');
            $rows = $str_sql->getQuery()->getResult();

            return $rows;
        } else {
            return false;
        }
    }

    public function checkSetupBarcodeCombination() {

        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sip.pkId")
                ->from('StakeholderItemPackSizes', 'sip')
                ->join('sip.itemPackSize', 'ips')
                ->join('sip.stakeholder', 's')
                ->join('sip.packagingLevel', 'pl')
                ->where("ips.pkId= '" . $form_values['item_pack_size_id'] . "' ")
                ->Andwhere("s.pkId= '" . $form_values['stakeholder_id'] . "' ")
                ->Andwhere("pl.pkId= '" . $form_values['packaging_level'] . "' ");

        $rows = $str_sql->getQuery()->getResult();
        return $rows;
    }

    public function checkSetupBarcodeCombinationUpdate() {

        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sip.pkId")
                ->from('StakeholderItemPackSizes', 'sip')
                ->join('sip.itemPackSize', 'ips')
                ->join('sip.stakeholder', 's')
                ->join('sip.packagingLevel', 'pl')
                ->where("ips.pkId= '" . $form_values['item_pack_size_id'] . "' ")
                ->Andwhere("s.pkId= '" . $form_values['stakeholder_id'] . "' ")
                ->Andwhere("pl.pkId= '" . $form_values['packaging_level'] . "' ")
                ->Andwhere("sip.pkId <> '" . $form_values['barcode_type'] . "' ");

        $rows = $str_sql->getQuery()->getResult();
        return $rows;
    }

    public function getProductByItemPurpose() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT ips.itemName, ips.pkId")
                ->from('StakeholderItemPackSizes', 'sip')
                ->join('sip.itemPackSize', 'ips')
                ->join('sip.stakeholder', 's')
                ->where("ips.item = '" . $form_values['item_id'] . "'")
                ->andWhere("s.stakeholderActivity = '" . $form_values['purpose'] . "' ");
        $rows = $str_sql->getQuery()->getResult();
        return $rows;
    }

}
