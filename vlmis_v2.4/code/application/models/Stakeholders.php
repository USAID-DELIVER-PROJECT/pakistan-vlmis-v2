<?php

/**
 * Model_Stakeholders
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_Stakeholders extends Model_Base {

    protected $_table;

    const TYPE_REPORTING = 1;
    const TYPE_SUPPLIER = 2;
    const TYPE_MANUFACTURER = 3;
    const CAMPAIGN = 40;
    const CAMPAIGN_DISTRICT = 43;
    const CAMPAIGN_TEAMS = 45;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('Stakeholders');
    }

    public function nationReport() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName")
                ->from("Stakeholders", "s")
                ->where("s.parent IS NULL")
                ->orderBy("s.listRank", "ASC");
        $rows = $str_sql->getQuery()->getResult();
        return $rows;
    }

    public function stockAvailabilityReport() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId as pk_id,s.stakeholderName as stakeholder_name")
                ->from("Stakeholders", "s")
                ->where("s.parent IS NULL")
                ->orderBy("s.listRank");
        $rows = $str_sql->getQuery()->getResult();
        $result = $str_sql->fetchArray();
        return $result;
    }

    public function getStakholder() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId as pk_id,s.stakeholderName as stakeholder_name")
                ->from("Stakeholders", "s")
                ->where("s.stakeholderType = 1")
                ->orderBy("s.listRank");

        $rows = $str_sql->getQuery()->getResult();
        return $rows;
    }

    public function getStakeholderName() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId as pk_id,s.stakeholderName as stakeholder_name")
                ->from("Stakeholders", "s")
                ->where("s.pkId =" . $this->form_values['pk_id']);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row[0]['stakeholder_name'];
        } else {
            return FALSE;
        }
    }

    public function getAllStakeholders() {
        $form_values = $this->form_values;
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName")
                ->from('Stakeholders', 's')
                ->join('s.geoLevel', 'gl')
                ->join('s.stakeholderType', 'st')
                ->where('gl.pkId=1')
                ->andWhere('st.pkId=1');
        if ($form_values['type'] == 1) {
            $str_sql->andWhere("s.pkId <> 40");
        }
        //  echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getManufacturerByProduct() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("si.pkId,s.stakeholderName")
                ->from('StakeholderItemPackSizes', 'si')
                ->join('si.stakeholder', 's')
                ->where('s.stakeholderType = ' . Model_Stakeholders::TYPE_MANUFACTURER)
                ->andWhere('si.packagingLevel = 140')
                ->andWhere('si.itemPackSize = ' . $this->form_values['item_id'])
                ->orderBy("s.listRank", "ASC");
        // echo $str_sql->getQuery()->getSql();
        //exit;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getUnaccociatedManufacturer($associated_array) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("si.pkId,s.stakeholderName")
                ->from('StakeholderItemPackSizes', 'si')
                ->join('si.stakeholder', 's')
                ->where('s.stakeholderType = ' . Model_Stakeholders::TYPE_MANUFACTURER)
                ->andWhere('si.packagingLevel = 140')
                ->andWhere('si.itemPackSize != ' . $this->form_values['item_id']);
        if (is_array($associated_array)) {
            $in_sips = "'".implode("','", $associated_array)."'";
            $str_sql->andWhere("s.stakeholderName NOT IN ($in_sips)");
        }
        $str_sql->orderBy("s.listRank", "ASC")
                ->groupBy("s.stakeholderName");
        //echo $str_sql->getQuery()->getSql();
        //exit;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getManufacturerByProductSetUpBarcode() {
        $item_id = $this->form_values['item_id'];
//        $str_sql = $this->_em->createQueryBuilder()
//                ->select("Distinct s.pkId,s.stakeholderName")
//                ->from('StakeholderItemPackSizes', 'si')
//                ->join('si.stakeholder', 's')
//                ->where('s.stakeholderType = ' . Model_Stakeholders::TYPE_MANUFACTURER)
//                ->andWhere('si.itemPackSize = ' . $this->form_values['item_id'])
//                ->orderBy("s.listRank", "ASC");

        $str_sql = "Select * from (
                (SELECT DISTINCT
                        s0_.pk_id AS pkId,
                        UPPER(s0_.stakeholder_name) AS stakeholderName,
                        s0_.list_rank
                FROM
                        stakeholder_item_pack_sizes s1_
                INNER JOIN stakeholders s0_ ON s1_.stakeholder_id = s0_.pk_id
                WHERE
                        s0_.stakeholder_type_id =  '" . Model_Stakeholders::TYPE_MANUFACTURER . "'
                AND s1_.item_pack_size_id = $item_id

                )
                UNION
                (SELECT DISTINCT
                        s0_.pk_id AS pkId,
                        s0_.stakeholder_name AS stakeholderName,
                        s0_.list_rank 
                FROM
                        stakeholder_item_pack_sizes s1_
                INNER JOIN stakeholders s0_ ON s1_.stakeholder_id = s0_.pk_id
                AND s1_.item_pack_size_id <> $item_id
                WHERE
                        s0_.stakeholder_type_id = '" . Model_Stakeholders::TYPE_MANUFACTURER . "')

) a 
";


        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $row = $rec->fetchAll();

        // $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getManufacturer() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName")
                ->from('Stakeholders', 's')
                ->where('s.stakeholderType = ' . Model_Stakeholders::TYPE_MANUFACTURER);
        //echo $str_sql->getQuery()->getSql();exit;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllManufacturers() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s")
                ->from('Stakeholders', 's')
                ->where('s.stakeholderType = ' . Model_Stakeholders::TYPE_MANUFACTURER)
                ->orderBy("s.stakeholderName");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllSectors() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderSectorName")
                ->from('StakeholderSectors', 's');
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllActivities() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.activity")
                ->from('StakeholderActivities', 's');
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getStakeholders() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName,gl.geoLevelName,ss.stakeholderSectorName,sa.activity")
                ->from('Stakeholders', 's')
                ->join('s.stakeholderType', 'st')
                ->join('s.stakeholderSector', 'ss')
                ->join('s.stakeholderActivity', 'sa')
                ->join('s.geoLevel', 'gl')
                ->where('st.pkId=1');
        if (!empty($this->form_values['stakeholderName'])) {
            $str_sql->AndWhere("s.stakeholderName = '" . $this->form_values['stakeholderName'] . "' ");
        }
        if (!empty($this->form_values['geo_level'])) {
            $str_sql->AndWhere("gl.pkId = '" . $this->form_values['geo_level'] . "' ");
        } else {
            $str_sql->AndWhere("gl.pkId = '1' ");
        }
        if (!empty($this->form_values['sector'])) {
            $str_sql->AndWhere("ss.pkId = '" . $this->form_values['sector'] . "' ");
        }
        if (!empty($this->form_values['activity'])) {
            $str_sql->AndWhere("sa.pkId = '" . $this->form_values['activity'] . "' ");
        }

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getOffices() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName,gl.geoLevelName,ss.stakeholderSectorName,sa.activity")
                ->from('Stakeholders', 's')
                ->join('s.stakeholderType', 'st')
                ->join('s.stakeholderSector', 'ss')
                ->join('s.stakeholderActivity', 'sa')
                ->join('s.geoLevel', 'gl')
                ->join('s.mainStakeholder', 'ms');
        //->where('st.pkId=1');
        if (!empty($this->form_values['office'])) {
            $str_sql->AndWhere("s.stakeholderName = '" . $this->form_values['office'] . "' ");
        }
        if (!empty($this->form_values['geo_level'])) {
            $str_sql->AndWhere("gl.pkId = '" . $this->form_values['geo_level'] . "' ");
        } else {
            $str_sql->AndWhere("gl.pkId <> '1' ");
        }
        if (!empty($this->form_values['stakeholder'])) {
            $str_sql->AndWhere("ms.pkId = '" . $this->form_values['stakeholder'] . "' ");
        }


        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getManufacturers() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName,gl.geoLevelName,ss.stakeholderSectorName,sa.activity")
                ->from('Stakeholders', 's')
                ->join('s.stakeholderType', 'st')
                ->join('s.stakeholderSector', 'ss')
                ->join('s.stakeholderActivity', 'sa')
                ->join('s.geoLevel', 'gl')
                ->join('s.mainStakeholder', 'ms')
                ->where('st.pkId=2')
                ->AndWhere("gl.pkId=1");
        if (!empty($this->form_values['manufacturer'])) {
            $str_sql->AndWhere("s.stakeholderName = '" . $this->form_values['manufacturer'] . "' ");
        }

        if (!empty($this->form_values['sector'])) {
            $str_sql->AndWhere("ss.pkId = '" . $this->form_values['sector'] . "' ");
        }


        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function checkStakeholders() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId")
                ->from('Stakeholders', 's')
                ->join('s.geoLevel', 'gl')
                ->join('s.stakeholderActivity', 'a')
                ->join('s.stakeholderSector', 'ss')
                ->where("s.stakeholderName= '" . $form_values['stakeholder_name'] . "' ")
                ->AndWhere("gl.pkId= '" . $form_values['geo_level'] . "' ")
                ->AndWhere("ss.pkId= '" . $form_values['sector'] . "' ")
                ->AndWhere("a.pkId= '" . $form_values['activity'] . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkOffice() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId")
                ->from('Stakeholders', 's')
                ->join('s.geoLevel', 'gl')
                ->join('s.stakeholderActivity', 'a')
                ->join('s.stakeholderSector', 'ss')
                ->join('s.mainStakeholder', 'ms')
                ->where("s.stakeholderName= '" . $form_values['office'] . "' ")
                ->AndWhere("gl.pkId= '" . $form_values['geo_level'] . "' ")
                ->AndWhere("ms.pkId= '" . $form_values['stakeholder'] . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkManufacturerAdmin() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId")
                ->from('Stakeholders', 's')
                ->join('s.stakeholderSector', 'ss')
                ->where("s.stakeholderName= '" . $form_values['manufacturer'] . "' ")
                ->AndWhere("ss.pkId= '" . $form_values['sector'] . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkManufacturer() {
        $form_values = $this->form_values;
        $result = $this->_table->findOneBy(array("stakeholderType" => 3, "stakeholderName" => $form_values['name']));

        if (count($result) > 0) {
            return $result->getPkId();
        } else {
            return false;
        }
    }

    public function getStakeholderActivities() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.activity")
                ->from('StakeholderActivities', 's');
        if (!empty($form_values['stakeholder_activity'])) {
            $str_sql->where("s.activity= '" . $form_values['stakeholder_activity'] . "' ");
        }
        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkStakeholderActivity() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId")
                ->from('StakeholderActivities', 's')
                ->where("s.activity= '" . $form_values . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getStakeholderTypes() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderTypeName")
                ->from('StakeholderTypes', 's');
        if (!empty($form_values['stakeholder_type'])) {
            $str_sql->where("s.stakeholderTypeName= '" . $form_values['stakeholder_type'] . "' ");
        }
        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getStakeholderSectors() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderSectorName")
                ->from('StakeholderSectors', 's');
        if (!empty($form_values['stakeholder_sector'])) {
            $str_sql->where("s.stakeholderSectorName= '" . $form_values['stakeholder_sector'] . "' ");
        }
        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkStakeholderType() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId")
                ->from('StakeholderTypes', 's')
                ->where("s.stakeholderTypeName= '" . $form_values . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkStakeholderSector() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId")
                ->from('StakeholderSectors', 's')
                ->where("s.stakeholderSectorName= '" . $form_values . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function getAllStakeholdersItems() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId,s.stakeholderName")
                ->from('Stakeholders', 's')
                ->where('s.pkId <> 1');
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function addStakeholder() {
        $data = $this->form_values;
        //  App_Controller_Functions::pr($data);

        $id = $this->checkManufacturer();

        if ($id == false) {
            $stakeholder = new Stakeholders();
            $stakeholder->setStakeholderName($data['name']);
            $type = $this->_em->getRepository("StakeholderTypes")->findOneBy(array("stakeholderTypeName" => 'Manufacturer'));
            $stakeholder->setStakeholderType($type);
            $main_stakeholder = $this->_em->getRepository("Stakeholders")->findOneBy(array("stakeholderName" => 'EPI Program'));
            $stakeholder->setMainStakeholder($main_stakeholder);
            $stakeholder_activity = $this->_em->getRepository("StakeholderActivities")->findOneBy(array("activity" => 'Routine'));
            $stakeholder->setStakeholderActivity($stakeholder_activity);
            $geo_level = $this->_em->getRepository("GeoLevels")->find("1");
            $stakeholder->setGeoLevel($geo_level);
            $stakeholder->setParent($main_stakeholder);
            $sector = $this->_em->find("StakeholderSectors", 1);
            $stakeholder->setStakeholderSector($sector);

            $this->_em->persist($stakeholder);
            $this->_em->flush();

            $id = $stakeholder->getPkId();
        }

        $check_stak_items = $this->_em->getRepository("StakeholderItemPackSizes")->findOneBy(array("stakeholder" => $id, "itemPackSize" => $data['item_id']));
        if (count($check_stak_items) == 0) {
            $stakeholder_items = new StakeholderItemPackSizes();
            $stakeholder_id = $this->_em->getRepository("Stakeholders")->find($id);
            $stakeholder_items->setStakeholder($stakeholder_id);
            $stakeholder_items->setQuantityPerPack($data['quantity']);
            $item_id = $this->_em->getRepository("ItemPackSizes")->find($data['item_id']);
            $stakeholder_items->setItemPackSize($item_id);
            $pck_id = $this->_em->getRepository("ListDetail")->find('140');
            $stakeholder_items->setPackagingLevel($pck_id);
            $this->_em->persist($stakeholder_items);
            $this->_em->flush();
        }

        return true;
    }

}
