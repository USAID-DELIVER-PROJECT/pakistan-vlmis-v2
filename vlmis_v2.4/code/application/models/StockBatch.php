<?php

/**
 * Model_StockBatch
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_StockBatch extends Model_Base {

    protected $_table;

    const FINISHED = "Finished";
    const STACKED = "Stacked";
    const RUNNING = "Running";
    const EXPIRED = "Expired";
    const TOTAL = "Total";
    const PRIORITY1 = "Priority1";
    const PRIORITY2 = "Priority2";
    const PRIORITY3 = "Priority3";

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('StockBatch');
    }

    public function addStockBatch($array) {
        return ($array['rcvedit'] == "Yes") ? $this->updateBatch($array) : $this->createBatch($array);
    }

    public function autoRunningLEFOBatch($item_id) {
        $this->expiryDate = $this->isBatchExists($item_id);


        if ($this->expiryDate != false) {

            // Make stacked all the batches
            $stock_stacked = $this->_table->find(array(
                'itemPackSize' => $item_id,
                'warehouse' => $this->_identity->getWarehouseId()
            ));
            $stock_stacked->setStatus(self::STACKED);
            $this->_em->flush();

            // Make Running near to expiry batch
            $stock_running = $this->_table->find(array(
                'itemPackSize' => $item_id,
                'warehouse' => $this->_identity->getWarehouseId(),
                'expiryDate' => $this->expiryDate
            ));
            $stock_running->setStatus(self::RUNNING);
            $this->_em->flush();
            return true;
        } else {
            return FALSE;
        }
    }

    public function isBatchExists($item_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("MIN(sb.expiryDate) AS MinDate")
                ->from('StockBatch', 'sb')
                ->where('sb.itemPackSize =' . $item_id)
                ->andWhere('sb.warehouse =' . $this->_identity->getWarehouseId())
                ->andWhere('sb.quantity <> 0');
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row['0']['MinDate'];
        } else {
            return false;
        }
    }

    public function getBatchQuantityById($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.quantity')
                ->from('StockBatch', 'sb')
                ->where('sb.pkId =' . $id);
        $row = $str_sql->getQuery()->getResult();

        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return FALSE;
        }
    }

    public function deleteStockBatch($id) {
        $stockBatch = $this->_table->find($id);
        $this->_em->remove($stockBatch);
        return $this->_em->flush();
    }

    function adjustQuantity($id, $qty) {
        $str_sql = $this->_em->createQueryBuilder()
                ->update('Model_StockBatch')
                ->set("quantity", '?', $qty)
                ->where("pk_id= ? ", $id);
        $str_sql->execute();
    }

    function adjustQuantityByWarehouse($batch_id) {
        $row = $this->_em->getConnection()->prepare("SELECT AdjustQty($batch_id," . $this->_identity->getWarehouseId() . ") from DUAL");
        $row->execute();
    }

    public function pickBatch($batch_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('number')
                ->from('Model_StockBatch')
                ->where('pk_id =' . $batch_id);
        $result = $str_sql->fetchArray();
        return $result;
    }

    /**
     * @uses API & Application
     * @return boolean
     */
    public function getItemAllBatches($wh_id) {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
                                                        stock_batch.pk_id AS 'pkId',
                                                        stock_batch.number,
                                                        stock_batch.batch_master_id,
                                                        stock_batch.expiry_date AS 'expiryDate',
                                                        stock_batch.quantity,
                                                        stock_batch.`status`,
                                                        stock_batch.unit_price,
                                                        stock_batch.production_date,
                                                        stock_batch.last_update,
                                                        stock_batch.item_pack_size_id AS 'itemPackSize',
                                                        stock_batch.vvm_type_id,
                                                        stock_batch.warehouse_id,
                                                        stock_batch.stakeholder_item_pack_size_id AS 'StakeholderItemPackSizeID'
                                                        FROM
                                                        stock_batch
                                                        WHERE
                                                        stock_batch.`status` <> 'Finished' AND warehouse_id= '" . $wh_id . "'");
        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function getBatchesByStatus($status) {
        $date_curr = date('Y-m-d');
        $str_sql = $this->_em->createQueryBuilder()->select('DISTINCT sb.pkId,
		sb.number,
		sb.expiryDate,
		sb.status,
		sb.quantity AS BatchQty,
		ips.itemName,
		iu.itemUnitName,
                ips.numberOfDoses as description,
                sd.temporary')
                ->from('StockDetail', 'sd')
                ->innerJoin("sd.stockMaster", "sm")
                ->innerJoin("sd.stockBatch", "sb")
                ->innerJoin("sb.itemPackSize", "ips")
                ->innerJoin("ips.itemUnit", "iu")
                ->where('sb.warehouse =' . $this->_identity->getWarehouseId())
                ->andWhere('sd.temporary = 0');

        if (!empty($this->form_values['item_pack_size_id'])) {
            $str_sql->andWhere("sb.itemPackSize = " . $this->form_values['item_pack_size_id']);
        }
        if (!empty($this->form_values['number'])) {
            $str_sql->andWhere("sb.number LIKE '" . $this->form_values['number'] . "%'");
        }
        if (!empty($this->form_values['transaction_refernece'])) {
            $str_sql->andWhere("sm.transactionReference LIKE '%" . $this->form_values['transaction_refernece'] . "%'");
        }
        if (!empty($this->form_values['expired_before'])) {
            $str_sql->andWhere("DATE_FORMAT(sb.expiryDate,'%Y-%m-%d') BETWEEN '" . $date_curr . "' AND '" . $this->form_values['expired_before'] . "'");
        } else if (!empty($this->form_values['expired_after'])) {
            $str_sql->andWhere("DATE_FORMAT(sb.expiryDate,'%Y-%m-%d') >= '" . $this->form_values['expired_after'] . "'");
        }

        if ($status == self::TOTAL) {
            $str_sql->andWhere("sb.status IN ('STACKED','RUNNING')");
        } else if ($status == self::EXPIRED) {
            $date_curr = date('Y-m-d');
            $str_sql->andWhere("DATE_FORMAT(sb.expiryDate,'%Y-%m-%d') < '$date_curr'");
        } else if (!empty($status)) {
            $str_sql->andWhere("sb.status = '" . $status . "'");
        } else {
            $status = self::TOTAL;
        }
//echo $str_sql->getQuery()->getSql();
        // Finished means 0 quantity, We don't need this check for Finished Qty
        /* if (!empty($this->form_values['status']) && $status != self::FINISHED && $status != self::TOTAL) {
          $str_sql->andWhere("sb.quantity <> 0");
          } */

        //$str_sql->groupBy("sb.itemPackSize, sb.number, sb.expiryDate, sb.status");
        //echo $str_sql->getQuery()->getSql();
        //exit;

        return $str_sql->getQuery()->getResult();
    }

    public function searchStockBatch() {

        $search_by = $this->form_values['searchby'];
        $search_input = $this->form_values['searchinput'];

        if (!empty($search_by) || !empty($search_input)) {
            switch ($search_by) {
                case 'number':
                    $this->form_values['number'] = $search_input;
                    break;
                case 'transaction_refernece':
                    $this->form_values['transaction_refernece'] = $search_input;
                    break;
                case 'expired_before':
                    $this->form_values['expired_before'] = App_Controller_Functions::dateToDbFormat($search_input);
                    break;
                case 'expired_after':
                    $this->form_values['expired_after'] = App_Controller_Functions::dateToDbFormat($search_input);
                    break;
            }
        }

        $item_id = $this->form_values['item_pack_size_id'];
        $items = $this->_em->getRepository("ItemPackSizes")->find($item_id);
        $item_cat = 0;
        if (count($items) > 0) {
            $item_cat = $items->getItemCategory()->getPkId();
        }

        if ($item_cat == 1) {
            if (!empty($this->form_values['status'])) {
                switch ($this->form_values['status']) {
                    case 1:
                        $status = self::PRIORITY1;
                        $result = $this->getPriority1Batches();
                        break;
                    case 2:
                        $status = self::PRIORITY2;
                        $result = $this->getPriority2Batches();
                        break;
                    case 3:
                        $status = self::PRIORITY3;
                        $result = $this->getPriority3Batches();
                        break;
                    case 4:
                        //$status = self::FINISHED;
                        $result = $this->getBatchesByStatus(self::FINISHED);
                        break;
                    case 5:
                        //$status = self::EXPIRED;
                        $result = $this->getBatchesByStatus(self::EXPIRED);
                        break;
                    case 6:
                        //$status = self::EXPIRED;
                        $result = $this->getTotalPriorityBatches();
                        break;
                    case 7:
                        //$status = self::PRIORITY3;
                        $result = $this->getUnusableBatches();
                        break;
                    default:

                        break;
                }
            } else {
                $result = $this->getTotalPriorityBatches();
            }
        } else {
            switch ($this->form_values['status']) {
                case 1:
                case 2:
                case 3:
                case 6:
                    $status = self::TOTAL;
                    break;
                case 4:
                    $status = self::FINISHED;
                    break;
                case 5:
                    $status = self::EXPIRED;
                    break;
                default:
                    $status = self::TOTAL;
                    break;
            }
            $result = $this->getBatchesByStatus($status);
        }

        return $result;
    }

    public function getNonVaccineBatchDetail() {
        $item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "SELECT
	COUNT(*) AS cnt,
	A.number,
	A.itemName,
	A.description,
	A.itemUnitName,
	SUM(A.BatchQty) AS BatchQty,
	'Priority 1' AS `status`
FROM
	(
		SELECT
			stock_batch.pk_id AS pkId,
			stock_batch.number,
			stock_batch.expiry_date AS expiryDate,
			stock_batch.`status`,
			stock_batch.quantity AS BatchQty,
			item_pack_sizes.item_name AS itemName,
			item_units.item_unit_name AS itemUnitName,
			item_pack_sizes.number_of_doses AS description,
			stock_detail.`temporary`
		FROM
			stock_detail
		INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
		INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND stock_detail.`temporary` = 0
		AND stock_batch.item_pack_size_id = $item_id
		GROUP BY
			stock_batch.pk_id
		HAVING
			BatchQty > 0
	) A";
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getBatchDetail() {
        $item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        $str_sql = "SELECT
	COUNT(*) AS cnt,
	A.number,
	A.itemName,
	A.description,
	A.itemUnitName,
	SUM(A.BatchQty) AS BatchQty,
	A.`status`
FROM
	(
		SELECT
			stock_batch.pk_id,
			stock_batch.number,
			item_pack_sizes.item_name AS itemName,
			item_pack_sizes.number_of_doses AS description,
			item_units.item_unit_name AS itemUnitName,
			Sum(placements.quantity) AS BatchQty,
			'Priority 1' AS `status`,
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
		INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND (
			placements.vvm_stage = 2
			OR (
				placements.vvm_stage = 1
				AND DATE_FORMAT(
					stock_batch.expiry_date,
					'%Y-%m-%d'
				) BETWEEN '$today'
				AND '$after3month'
			)
		) AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) > '$today'
		AND item_pack_sizes.pk_id = $item_id
		GROUP BY
			placements.stock_batch_id
		HAVING
			BatchQty > 0
		UNION
			SELECT
				stock_batch.pk_id,
				stock_batch.number,
				item_pack_sizes.item_name AS itemName,
				item_pack_sizes.number_of_doses AS description,
				item_units.item_unit_name AS itemUnitName,
				Sum(placements.quantity) AS BatchQty,
				'Priority 2' AS `status`,
				item_pack_sizes.list_rank,
				stock_batch.expiry_date
			FROM
				stock_batch
			INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
			LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
			INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
			INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
			INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
			INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
			WHERE
				stock_batch.warehouse_id = $wh_id
			AND item_pack_sizes.item_category_id = 1
			AND placements.vvm_stage = 1
			AND DATE_FORMAT(
				stock_batch.expiry_date,
				'%Y-%m-%d'
			) BETWEEN '$after3month'
			AND '$afteryear'
			AND item_pack_sizes.pk_id = $item_id
			GROUP BY
				placements.stock_batch_id
			HAVING
				BatchQty > 0
			UNION
				SELECT
					stock_batch.pk_id,
					stock_batch.number,
					item_pack_sizes.item_name AS itemName,
					item_pack_sizes.number_of_doses AS description,
					item_units.item_unit_name AS itemUnitName,
					Sum(placements.quantity) AS BatchQty,
					'Priority 3' AS `status`,
					item_pack_sizes.list_rank,
					stock_batch.expiry_date
				FROM
					stock_batch
				INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
				LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
				INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
				INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
				INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
				INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
				WHERE
					stock_batch.warehouse_id = $wh_id
				AND item_pack_sizes.item_category_id = 1
				AND placements.vvm_stage = 1
				AND DATE_FORMAT(
					stock_batch.expiry_date,
					'%Y-%m-%d'
				) > '$afteryear'
				AND item_pack_sizes.pk_id = $item_id
				GROUP BY
					placements.stock_batch_id
				HAVING
					BatchQty > 0
	) A
GROUP BY
	A.`status`
ORDER BY
	A.`status`";

        /* $str_sql = $this->_em->createQueryBuilder()
          ->select("sb.number,
          ips.itemName,
          ips.numberOfDoses as description,
          iu.pkId as itemUnitId,
          SUM(IF(sb.status = '" . self::STACKED . "', sb.quantity, 0)) as StackedQty,
          SUM(IF(sb.status = '" . self::RUNNING . "', sb.quantity, 0)) as RunningQty,
          SUM(IF(sb.status = '" . self::FINISHED . "', sb.quantity, 0)) as FinishedQty,
          SUM(IF(sb.status = '" . self::STACKED . "', 1, 0)) stacked,
          SUM(IF(sb.status = '" . self::RUNNING . "', 1, 0)) running,
          SUM(IF(sb.status = '" . self::FINISHED . "', 1, 0)) finished")
          ->from("StockBatch", "sb")
          ->innerJoin("sb.itemPackSize", "ips")
          ->innerJoin("ips.itemUnit", "iu")
          ->where("sb.itemPackSize = " . )
          ->andWhere("sb.warehouse = " . );
          //echo $str_sql->getQuery()->getSql();
          //exit;
          $result = $str_sql->getQuery()->getResult();
          return $result; */

        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function changeStatus() {
        $stock = $this->_table->find($this->form_values['pk_id']);
        if (count($stock) >= 1) {
            $stock->setStatus($this->form_values['status']);
            $this->_em->persist($stock);
            $this->_em->flush();
            return true;
        }
    }

    public function batchSummary() {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
                        ips.numberOfDoses as description,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        sb.number")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemUnit", "iu")
                ->where("ips.itemCategory = 1")
                ->andWhere("sb.warehouse = " . $wh_id);

        if ($wh_id == 159) {
            $str_sql->andWhere("sb.expiryDate >= '" . date("Y-m-d") . "'");
            $str_sql->andWhere("ips.pkId NOT IN(35,10,38)");
        }

        $str_sql->groupBy("ips.pkId")
                ->orderBy("ips.listRank");

        //echo $str_sql->getQuery()->getSql()."<br>";

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function expiredBatchSummary() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
                        ips.numberOfDoses as description,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        sb.number")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemUnit", "iu")
                ->where("ips.itemCategory = 1")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->andWhere("sb.expiryDate < '" . date("Y-m-d") . "'");
        $str_sql->groupBy("ips.pkId")
                ->having("Vials > 0")
                ->orderBy("ips.listRank");

        //echo $str_sql->getQuery()->getSql();
        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function batchSummary2() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("
                         i.description as itemName,
                        ips.numberOfDoses as description,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        sb.number")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.item", 'i')
                ->join("ips.itemUnit", "iu")
                ->where("ips.itemCategory = 1")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());

        $str_sql->groupBy("ips.pkId")
                ->groupBy("ips.item")
                ->orderBy("ips.listRank");
//echo $str_sql->getQuery()->getSql();

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function batchSummaryBefore() {
//        $sql = 'SELECT
//                batch_summary_before_adjust.product,
//                batch_summary_before_adjust.quantity
//                FROM
//                batch_summary_before_adjust';

        $sql = 'SELECT
                        items.description AS product,
                        Sum(
                                batch_summary_before_adjust.quantity
                        ) AS quantity,
                        Sum(
                                batch_summary_before_adjust.quantity
                        ) * item_pack_sizes.number_of_doses AS quantityD
                FROM
                        batch_summary_before_adjust
                INNER JOIN item_pack_sizes ON batch_summary_before_adjust.product_id = item_pack_sizes.pk_id
                INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
                GROUP BY
                        items.pk_id';

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $data = $row->fetchAll();

        foreach ($data as $r) {
            $result[$r['product']] = array(
                'quantity' => $r['quantity'],
                'quantityD' => $r['quantityD']
            );
        }

        return $result;
    }

    public function stakeholderProductSummary() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        s.stakeholderName")
                ->from("StockBatch", "sb")
                ->innerJoin("sb.stakeholderItemPackSize", "sips")
                ->innerJoin("sb.itemPackSize", "ips")
                ->innerJoin("sips.stakeholder", "s")
                ->where("s.stakeholderType = 3")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->andWhere("sb.expiryDate >= '" . date("Y-m-d") . "'") // Usable produts only
                ->groupBy("ips.itemName,s.stakeholderName")
                ->orderBy("ips.listRank", "ASC")
                ->having("Vials > 0");
        //echo $str_sql->getQuery()->getSql();
        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function stakeholderExpiredProductSummary() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        s.stakeholderName")
                ->from("StockBatch", "sb")
                ->innerJoin("sb.stakeholderItemPackSize", "sips")
                ->innerJoin("sb.itemPackSize", "ips")
                ->innerJoin("sips.stakeholder", "s")
                ->where("s.stakeholderType = 3")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->andWhere("sb.expiryDate < '" . date("Y-m-d") . "'") // Expired produts only
                ->groupBy("ips.itemName,s.stakeholderName")
                ->orderBy("ips.listRank", "ASC")
                ->having("Vials > 0");
        //echo $str_sql->getQuery()->getSql();
        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function stakeholderProductTotal() {

        if (!empty($this->form_values['wh_id'])) {
            $wh_id = $this->form_values['wh_id'];
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        s.stakeholderName")
                ->from("StockBatch", "sb")
                ->innerJoin("sb.stakeholderItemPackSize", "sips")
                ->innerJoin("sb.itemPackSize", "ips")
                ->innerJoin("sips.stakeholder", "s")
                ->where("s.stakeholderType = 3")
                ->andWhere("sb.warehouse = " . $wh_id)
                ->andWhere("sb.expiryDate >= '" . date("Y-m-d") . "'")
                ->groupBy("ips.itemName")
                ->orderBy("ips.listRank", "ASC")
                ->having("Vials > 0");

        $result = $str_sql->getQuery()->getResult();
//        echo $str_sql->getQuery()->getSql()."<br>";
//        exit();
        return $result;
    }

    public function priorityProductTotal() {
        //$wh_id = $this->_identity->getWarehouseId();

        if (!empty($this->form_values['wh_id'])) {
            $wh_id = $this->form_values['wh_id'];
        }

        $str_sql = "SELECT
	DATE_FORMAT(
		stock_batch.expiry_date,
		'%M, %Y'
	) AS expiry_date,
	stock_batch.number,
	item_pack_sizes.item_name,
	SUM(placements.quantity) AS quantity,
	SUM(placements.quantity) * item_pack_sizes.number_of_doses AS doses,
	IFNULL(placements.vvm_stage, 1) AS vvm
FROM
	stock_batch
INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
WHERE
	stock_batch.warehouse_id = $wh_id
AND stock_batch.expiry_date >= '" . date("Y-m-d") . "'

GROUP BY
	item_pack_sizes.pk_id

ORDER BY
	item_pack_sizes.list_rank,
	stock_batch.expiry_date";

//echo $str_sql."<br>";
//exit();
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function dsBatchProductTotal() {
        
        if (!empty($this->form_values['wh_id'])) {
            $wh_id = $this->form_values['wh_id'];
        }

        //$wh_id = $this->_identity->getWarehouseId();

        $str_sql = "
            SELECT
                i0_.item_name AS 'Product',
                s1_.number AS 'Batch No',
                Sum(s1_.quantity) AS 'Quantity'
            FROM
                stock_batch s1_
                INNER JOIN item_pack_sizes i0_ ON s1_.item_pack_size_id = i0_.pk_id
                INNER JOIN item_units i2_ ON i0_.item_unit_id = i2_.pk_id
            WHERE
                i0_.item_category_id IN (2, 3)
                AND s1_.warehouse_id = $wh_id
                AND s1_.expiry_date >= '" . date("Y-m-d") . "'
                AND i0_.pk_id NOT IN (35, 10, 38)
            GROUP BY
                i0_.pk_id
            ORDER BY
                i0_.list_rank ASC";


        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function dsStakeholderProductTotal() {

        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "
            SELECT
                i0_.item_name AS Product,
                SUM(s1_.quantity) AS 'Quantity',
                s2_.stakeholder_name AS StakeholderName
            FROM
                stock_batch s1_
                INNER JOIN stakeholder_item_pack_sizes s3_ ON s1_.stakeholder_item_pack_size_id = s3_.pk_id
                INNER JOIN item_pack_sizes i0_ ON s1_.item_pack_size_id = i0_.pk_id
                INNER JOIN stakeholders s2_ ON s3_.stakeholder_id = s2_.pk_id
            WHERE
                s2_.stakeholder_type_id = 3
                AND s1_.warehouse_id = $wh_id
                AND i0_.item_category_id IN (2, 3)
            GROUP BY
                i0_.item_name
            HAVING
                Quantity > 0
            ORDER BY
                i0_.list_rank ASC";


        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function dsPlacementProductTotal() {

        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "
            SELECT
                item_pack_sizes.item_name as 'Product',
                stock_batch.number as 'BatchNo',
                DATE_FORMAT(stock_batch.expiry_date, '%d-%m-%y') AS 'Expiry',
                SUM(placements.quantity) AS 'Quantity'
            FROM
                stock_batch
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
            WHERE
                stock_batch.warehouse_id = $wh_id 
                AND item_pack_sizes.item_category_id IN (2,3)
            GROUP BY
                item_pack_sizes.pk_id
            ORDER BY
                item_pack_sizes.list_rank,
                stock_batch.expiry_date";


        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllRunningBatches() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.number,
			sb.pkId,
			sb.expiryDate,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->where("sb.quantity > 0 ")
                //->andWhere("sb.status = '" . self::RUNNING . "'")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_pack_size_id']);

        if (!empty($this->form_values['transaction_date'])) {
            $str_sql->andWhere("sb.expiryDate >= '" . App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']) . "' ");
        }

        $str_sql->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->orderBy("sb.quantity", "DESC");

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getPriority1Batches() {

        //$item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        //$trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");

        $where = array();
        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "item_pack_sizes.pk_id = " . $this->form_values['item_pack_size_id'];
        }
        if (!empty($this->form_values['number'])) {
            $where[] = "stock_batch.number LIKE '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['expired_before'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') BETWEEN '" . $today . "' AND '" . $this->form_values['expired_before'] . "'";
        } else if (!empty($this->form_values['expired_after'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '" . $this->form_values['expired_after'] . "'";
        } else {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '$today'";
        }

        /* if (!empty($this->form_values['transaction_refernece'])) {
          $where[] = "stock_master.transaction_reference LIKE '%" . $this->form_values['transaction_refernece'] . "%'";
          } */

        if (count($where) > 0) {
            $wr = " AND " . implode(" AND ", $where);
        }

        $str_sql = "SELECT
		stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Priority 1' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
	FROM
		stock_batch
	INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
	LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
	INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
	INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
	INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
        INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
	WHERE
		stock_batch.warehouse_id = $wh_id
	AND item_pack_sizes.item_category_id = 1
	AND (
		placements.vvm_stage = 2
		OR (
			placements.vvm_stage = 1
			AND DATE_FORMAT(
				stock_batch.expiry_date,
				'%Y-%m-%d'
			) BETWEEN '$today'
			AND '$after3month'
		)
	) $wr
	GROUP BY
		placements.stock_batch_id
	HAVING
		BatchQty > 0
	ORDER BY
		item_pack_sizes.list_rank,
		stock_batch.expiry_date";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getPriority2Batches() {

        //$item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        //$trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        $where = array();
        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "item_pack_sizes.pk_id = " . $this->form_values['item_pack_size_id'];
        }
        if (!empty($this->form_values['number'])) {
            $where[] = "stock_batch.number LIKE '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['expired_before'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') BETWEEN '" . $today . "' AND  '" . $this->form_values['expired_before'] . "'";
        } else if (!empty($this->form_values['expired_after'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '" . $this->form_values['expired_after'] . "'";
        }
        /* if (!empty($this->form_values['transaction_refernece'])) {
          $where[] = "stock_master.transaction_reference LIKE '%" . $this->form_values['transaction_refernece'] . "%'";
          } */

        if (count($where) > 0) {
            $wr = " AND " . implode(" AND ", $where);
        }

        $str_sql = "SELECT
			stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Priority 2' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) BETWEEN '$after3month'
		AND '$afteryear'
                $wr
		GROUP BY
			placements.stock_batch_id
		HAVING
			BatchQty > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getPriority3Batches() {

        //$item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        //$trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month12 = $current_date->modify("+12 months");
        $afteryear = $month12->format("Y-m-d");

        $where = array();
        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "item_pack_sizes.pk_id = " . $this->form_values['item_pack_size_id'];
        }
        if (!empty($this->form_values['number'])) {
            $where[] = "stock_batch.number LIKE '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['expired_before'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') BETWEEN '" . $today . "' AND  '" . $this->form_values['expired_before'] . "'";
        } else if (!empty($this->form_values['expired_after'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '" . $this->form_values['expired_after'] . "'";
        }
        /* if (!empty($this->form_values['transaction_refernece'])) {
          $where[] = "stock_master.transaction_reference LIKE '%" . $this->form_values['transaction_refernece'] . "%'";
          } */

        if (count($where) > 0) {
            $wr = " AND " . implode(" AND ", $where);
        }

        $str_sql = "SELECT
			stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Priority 3' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) > '$afteryear' $wr
		GROUP BY
			placements.stock_batch_id
		HAVING
			BatchQty > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getUnusableBatches() {

        //$item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        //$trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month12 = $current_date->modify("+12 months");
        $afteryear = $month12->format("Y-m-d");

        $where = array();
        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "item_pack_sizes.pk_id = " . $this->form_values['item_pack_size_id'];
        }
        if (!empty($this->form_values['number'])) {
            $where[] = "stock_batch.number LIKE '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['expired_before'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') BETWEEN '" . $today . "' AND  '" . $this->form_values['expired_before'] . "'";
        } else if (!empty($this->form_values['expired_after'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '" . $this->form_values['expired_after'] . "'";
        }
        /* if (!empty($this->form_values['transaction_refernece'])) {
          $where[] = "stock_master.transaction_reference LIKE '%" . $this->form_values['transaction_refernece'] . "%'";
          } */

        if (count($where) > 0) {
            $wr = " AND " . implode(" AND ", $where);
        }

        $str_sql = "SELECT
			stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Unusable' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage IN (3,4)
		$wr
		GROUP BY
			placements.stock_batch_id
		HAVING
			BatchQty > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    /**
     * Uses in Batch Management
     * @return batch list
     */
    public function getTotalPriorityBatches() {

        //$item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        //$trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        $where = array();
        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "item_pack_sizes.pk_id = " . $this->form_values['item_pack_size_id'];
        }
        if (!empty($this->form_values['number'])) {
            $where[] = "stock_batch.number LIKE '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['expired_before'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') BETWEEN '" . $today . "' AND  '" . $this->form_values['expired_before'] . "'";
        } else if (!empty($this->form_values['expired_after'])) {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '" . $this->form_values['expired_after'] . "'";
        } else {
            $where[] = "DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') >= '$today'";
        }
        /* if (!empty($this->form_values['transaction_refernece'])) {
          $where[] = "stock_master.transaction_reference LIKE '%" . $this->form_values['transaction_refernece'] . "%'";
          } */

        if (count($where) > 0) {
            $wr = " AND " . implode(" AND ", $where);
        }

        $str_sql = "(
	SELECT
		stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Priority 1' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
	FROM
		stock_batch
	INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
	LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
	INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
	INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
	INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
        INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
	WHERE
		stock_batch.warehouse_id = $wh_id
	AND item_pack_sizes.item_category_id = 1
	AND (
		placements.vvm_stage = 2
		OR (
			placements.vvm_stage = 1
			AND DATE_FORMAT(
				stock_batch.expiry_date,
				'%Y-%m-%d'
			) BETWEEN '$today'
			AND '$after3month'
		)
	) $wr
	GROUP BY
		placements.stock_batch_id
        HAVING BatchQty > 0
	ORDER BY
		item_pack_sizes.list_rank,
		stock_batch.expiry_date
)
UNION
	(
		SELECT
			stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Priority 2' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) BETWEEN '$after3month'
		AND '$afteryear'
                $wr
		GROUP BY
			placements.stock_batch_id
                HAVING BatchQty > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
	)
UNION
	(
		SELECT
			stock_batch.expiry_date AS expiryDate,
                stock_batch.number,
                Sum(placements.quantity) AS BatchQty,
                stock_batch.pk_id AS pkId,
                item_pack_sizes.item_name AS itemName,
                'Priority 3' AS `status`,
                item_units.item_unit_name AS itemUnitName,
                item_pack_sizes.number_of_doses AS description
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) > '$afteryear' $wr
		GROUP BY
			placements.stock_batch_id
                HAVING BatchQty > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
	)";
//echo $str_sql;
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllPriorityBatches() {

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        $item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        $trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);

        $str_sql = "(
	SELECT
		stock_batch.expiry_date AS expiryDate,
		stock_batch.number,
		SUM(placements.quantity) AS quantity,
		stock_batch.pk_id AS pkId,
		'P1' AS priority
	FROM
		stock_batch
	INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
	LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
	INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
	INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
	INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
	WHERE
		stock_batch.warehouse_id = $wh_id
	AND item_pack_sizes.item_category_id = 1
	AND (
		placements.vvm_stage = 2
		OR (
			placements.vvm_stage = 1
			AND DATE_FORMAT(
				stock_batch.expiry_date,
				'%Y-%m-%d'
			) BETWEEN '$today'
			AND '$after3month'
		)
	)
	AND DATE_FORMAT(
		stock_batch.expiry_date,
		'%Y-%m-%d'
	) >= '$trans_date'
	AND stock_batch.item_pack_size_id = $item_id
	GROUP BY
		placements.stock_batch_id
	HAVING
		quantity > 0
	ORDER BY
		item_pack_sizes.list_rank,
		stock_batch.expiry_date
)
UNION
	(
		SELECT
			stock_batch.expiry_date AS expiryDate,
			stock_batch.number,
			SUM(placements.quantity) AS quantity,
			stock_batch.pk_id AS pkId,
			'P2' AS priority
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) BETWEEN '$after3month'
		AND '$afteryear'
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) >= '$trans_date'
		AND stock_batch.item_pack_size_id = $item_id
		GROUP BY
			placements.stock_batch_id
		HAVING
			quantity > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
	)
UNION
	(
		SELECT
			stock_batch.expiry_date AS expiryDate,
			stock_batch.number,
			SUM(placements.quantity) AS quantity,
			stock_batch.pk_id AS pkId,
			'P3' AS priority
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) > '$afteryear'
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) >= '$trans_date'
		AND stock_batch.item_pack_size_id = $item_id
		GROUP BY
			placements.stock_batch_id
		HAVING
			quantity > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
	)";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    /**
     * @uses API & Application
     * @return boolean
     */
    public function getAllBatchesByItemId() {
        $type = $this->form_values['adj_type'];
        $type_sign = '';
        if (!empty($type)) {
            $adj_type = $this->_em->getRepository("TransactionTypes")->find($type);
            $type_sign = $adj_type->getNature();
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.pkId,sb.number,
			sb.expiryDate,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_id'])
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());
        if ($type == 9) {
            $str_sql->andWhere("DATE_FORMAT(sb.expiryDate,'%Y-%m-%d') < '" . date("Y-m-d") . "'");
        }
        if ($type_sign == '-') {
            $str_sql->having("sb.quantity > 0");
        }
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getBatchesByItem() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb")
                ->from("StockBatch", "sb")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_id'])
                ->andWhere("sb.warehouse = " . $this->form_values['wh_id'])
                ->orderBy("sb.number", "ASC");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getBatchExpiry() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.expiryDate,
			sb.quantity,
                        ips.pkId as itemCategory")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemCategory", "ic")
                ->where("sb.pkId = " . $this->form_values['pk_id']);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            $data = array(
                'date' => $row[0]['expiryDate'],
                'qty' => $row[0]['quantity'],
                'cat' => $row[0]['itemCategory']
            );
            return $data;
        } else {
            return false;
        }
    }

    public function getBatchAvailableBalanceExpiry() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("DATE_FORMAT(sb.expiryDate,'%d/%m/%Y') as expiryDate,
			SUM(sd.quantity) as quantity,
                        ips.pkId as itemCategory")
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sd.stockMaster", "sm")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemCategory", "ic")
                ->where("sb.pkId = " . $this->form_values['pk_id'])
                ->andWhere("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') <= '" . $this->form_values['trans_date'] . "'");

        $row = $str_sql->getQuery()->getResult();
        $current_qty = $this->getBatchCB();
        $pipeline_qty = $this->getBatchPipelineQty();

        if (!empty($row) && count($row) > 0) {
            if ($row[0]['quantity'] > $current_qty) {
                $quantity = $current_qty;
            } else {
                $quantity = $row[0]['quantity'];
            }

            $quantity = $quantity - $pipeline_qty;

            $data = array(
                'date' => $row[0]['expiryDate'],
                'qty' => ($quantity > 0) ? number_format($quantity) : 0,
                'cat' => $row[0]['itemCategory']
            );
            return $data;
        } else {
            return false;
        }
    }

    public function getBatchCB() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.quantity")
                ->from("StockBatch", "sb")
                ->where("sb.pkId = " . $this->form_values['pk_id']);

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row[0]['quantity'];
        } else {
            return 0;
        }
    }

    public function getBatchPipelineQty() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("SUM(pc.quantity) as qty")
                ->from("PipelineConsignments", "pc")
                ->where("pc.stockBatch = " . $this->form_values['pk_id'])
                ->andWhere("pc.transactionType = 2")
                ->andWhere("pc.status != 'Received'");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row[0]['qty'];
        } else {
            return 0;
        }
    }

    public function editBatchNo() {
        $stock_detail = new Model_StockDetail();
        $stock_detail->form_values['pk_id'] = $this->form_values['pk_id'];
        $quantity_and_batch = $stock_detail->getQuantityById($this->form_values['pk_id']);
        // echo $quantity_and_batch['number']."<br>" ;
        // echo $this->form_values['number'];
        //exit;
        if ($quantity_and_batch['number'] != $this->form_values['number']) {


            $data = array(
                'number' => $quantity_and_batch['number'],
                'batch_id' => $quantity_and_batch['stock_batch_id'],
                'item_id' => $quantity_and_batch['item_pack_size_id'],
            );
            // check batch is new or old
            $batch_id = $this->checkNewBatch($data);

            if ($batch_id === 0) {
                // if batch is new then  new batch
                $data_pre = array(
                    'number' => $this->form_values['number'],
                    'item_id' => $quantity_and_batch['item_pack_size_id'],
                );
                $batch_id_previous = $this->checkBatch($data_pre);
                if ($batch_id_previous === 0) {
                    $this->form_values['pk_id'] = $quantity_and_batch['stock_batch_id'];
                    return $this->updateName();
                } else {
                    $stock_detail->updateDetail($quantity_and_batch['stock_detail'], $batch_id_previous);
                    $this->adjustQuantityByWarehouse($batch_id_previous);
                    $this->batch_id = $quantity_and_batch['stock_batch_id'];
                    return $this->updateWarehouseId();
                }
            } else {
                $data_array = array(
                    'number' => $this->form_values['number'],
                    'item_id' => $quantity_and_batch['item_pack_size_id'],
                );
                $batch_id_pre = $this->checkBatch($data_array);
                if ($batch_id_pre === 0) {

                    $data_pr = array(
                        'number' => $this->form_values['number'],
                        'item_id' => $quantity_and_batch['item_pack_size_id'],
                        'expiry_date' => $quantity_and_batch['expiryDate'],
                        'quantity' => $quantity_and_batch['quantity'],
                        'vvm_type_id' => $quantity_and_batch['vvmTypeId'],
                        'unit_price' => $quantity_and_batch['unitPrice'],
                        'manufacturer_id' => $quantity_and_batch['stakeholderItemPackSizeId'],
                    );
                    // App_Controller_Functions::pr($data_pr);
                    $batch_id_new = $this->createBatch($data_pr);
                    $stock_detail->updateDetail($quantity_and_batch['stock_detail'], $batch_id_new);
                    $this->adjustQuantityByWarehouse($quantity_and_batch['stock_batch_id']);
                } else {
                    $stock_detail->updateDetail($quantity_and_batch['stock_detail'], $batch_id_pre);
                    $this->adjustQuantityByWarehouse($quantity_and_batch['stock_batch_id']);
                    $this->adjustQuantityByWarehouse($batch_id_pre);
                    // $this->batch_id = $quantity_and_batch['stock_batch_id'];
                    // return $this->updateWarehouseId();
                }
            }
        }
    }

    public function updateName() {
        $stock = $this->_table->find($this->form_values['pk_id']);
        $stock->setNumber(strtoupper($this->form_values['number']));
        $this->_em->persist($stock);
        return $this->_em->flush();
    }

    public function updateWarehouseId() {

        $querypro = "Update stock_batch set warehouse_id='0' where stock_batch.pk_id=$this->batch_id  ";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $result = $row->execute();
        // App_Controller_Functions::pr($result);
    }

    public function createBatch($array) {

        $batchid = $this->checkBatch($array);

        if ($batchid === 0) {
            $wh_id = $this->_identity->getWarehouseId();

            $stock_batch = new StockBatch();
            $stock_batch->setNumber(strtoupper($array['number']));
            $stock_batch->setExpiryDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['expiry_date'])));
            $item_id = $this->_em->getRepository('ItemPackSizes')->find($array['item_id']);
            $stock_batch->setItemPackSize($item_id);
            $stock_batch->setQuantity(str_replace(",", "", $array['quantity']));
            $stock_batch->setStatus(self::STACKED);
            if (!empty($array['production_date'])) {
                $stock_batch->setProductionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['production_date'])));
            }
            if (!empty($array['vvm_type_id'])) {
                $vvm_type_id = $this->_em->getRepository('VvmTypes')->find($array['vvm_type_id']);
                $stock_batch->setVvmType($vvm_type_id);
            }
            $stock_batch->setUnitPrice($array['unit_price']);
            $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
            $stock_batch->setWarehouse($warehouse_id);

            if (!empty($array['manufacturer_id'])) {
                $stakeholder_item_pack_size = $this->_em->getRepository('StakeholderItemPackSizes')->find($array['manufacturer_id']);
                if ($stakeholder_item_pack_size->getItemPackSize()->getPkId() == $array['item_id']) {
                    $stock_batch->setStakeholderItemPackSize($stakeholder_item_pack_size);
                } else {
                    $check_sips = $this->_em->getRepository('StakeholderItemPackSizes')->findOneBy(array("stakeholder" => $stakeholder_item_pack_size->getStakeholder()->getPkId(), "itemPackSize" => $array['item_id']));
                    if (count($check_sips) > 0) {
                        $stock_batch->setStakeholderItemPackSize($check_sips);
                    } else {
                        $add_sips = new StakeholderItemPackSizes();
                        $add_sips->setQuantityPerPack($stakeholder_item_pack_size->getQuantityPerPack());
                        $add_sips->setStatus($stakeholder_item_pack_size->getStatus());
                        $add_sips->setListRank($stakeholder_item_pack_size->getListRank());
                        $add_sips->setVolumPerVial($stakeholder_item_pack_size->getVolumPerVial());
                        $add_sips->setGtin($stakeholder_item_pack_size->getGtin());
                        $add_sips->setItemGtin($stakeholder_item_pack_size->getItemGtin());
                        $add_sips->setPackagingLevel($stakeholder_item_pack_size->getPackagingLevel());
                        $add_sips->setStakeholder($stakeholder_item_pack_size->getStakeholder());
                        $add_sips->setItemPackSize($item_id);
                        $this->_em->persist($add_sips);
                        $this->_em->flush();
                        $stock_batch->setStakeholderItemPackSize($add_sips);
                    }
                }
            }

            $this->_em->persist($stock_batch);
            $this->_em->flush();
            $batchid = $stock_batch->getPkId();

            if ($wh_id == Model_Warehouses::FEDERAL_WHID) {
                $stock_batch->setBatchMasterId($batchid);
                $this->_em->persist($stock_batch);
                $this->_em->flush();
            }

            if ($batchid) {
                return $batchid;
            } else {
                return false;
            }
        } else {
            return $batchid;
        }
    }

    public function updateBatch($array) {
        $wh_id = $this->_identity->getWarehouseId();

        $stock_batch = $this->_table->find($array['stock_batch_id']);
        $stock_batch->setNumber(strtoupper($array['number']));
        $stock_batch->setExpiryDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['expiry_date'])));
        $item_id = $this->_em->getRepository('ItemPackSizes')->find($array['item_id']);
        $stock_batch->setItemPackSize($item_id);
        $stock_batch->setQuantity(str_replace(",", "", $array['quantity']));
        $stock_batch->setStatus(self::STACKED);
        $stock_batch->setProductionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['production_date'])));

        if (!empty($array['vvm_type_id'])) {
            $vvm_type_id = $this->_em->getRepository('VvmTypes')->find($array['vvm_type_id']);
            $stock_batch->setVvmType($vvm_type_id);
        }

        $stock_batch->setUnitPrice($array['unit_price']);
        $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
        $stock_batch->setWarehouse($warehouse_id);
        $stakeholder_item_pack_size = $this->_em->getRepository('StakeholderItemPackSizes')->find($array['manufacturer_id']);
        $stock_batch->setStakeholderItemPackSize($stakeholder_item_pack_size);

        $this->_em->persist($stock_batch);
        $this->_em->flush();

        if ($wh_id == Model_Warehouses::FEDERAL_WHID) {
            $stock_batch->setBatchMasterId($stock_batch->getPkId());
            $this->_em->persist($stock_batch);
            $this->_em->flush();
        }

        return $stock_batch->getPkId();
    }

    public function checkBatch($array) {

        $role_id = $this->_identity->getRoleId();

        if (isset($array['wh_id']) && !empty($array['wh_id'])) {
            $wh_id = $array['wh_id'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }

        $stock_batch = $this->_em->getRepository("StockBatch")->findOneBy(array(
            "number" => $array['number'],
            "itemPackSize" => $array['item_id'],
            "warehouse" => $wh_id
        ));

        if (count($stock_batch) > 0) {
            $this->adjustQuantityByWarehouse($stock_batch->getPkId());

            if ($stock_batch->getStatus() == 'Finished' && $role_id == 3 && !empty($array['expiry_date'])) {
                $stock_batch->setExpiryDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['expiry_date'])));
                $stock_batch->setProductionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['production_date'])));
                $this->_em->persist($stock_batch);
                $this->_em->flush();
            }
            return $stock_batch->getPkId();
        } else {
            return 0;
        }
    }

    public function checkNewBatch($array) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,sb.pkId as batchId")
                ->from("StockDetail", 'sd')
                ->join("sd.stockMaster", "sm")
                ->join("sm.transactionType", "tt")
                ->join("sd.stockBatch", 'sb')
                ->join("sb.itemPackSize", 'ips')
                ->where("sb.pkId = '" . $array['batch_id'] . "'")
                ->andWhere("tt.pkId=1 ")
                ->orWhere("tt.pkId=2 ")
                ->andWhere("sm.draft=0")
                ->andWhere("sb.itemPackSize = " . $array['item_id'])
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());

        //  echo $str_sql->getQuery()->getSql();
        //   exit;
        $row = $str_sql->getQuery()->getResult();

        if (!empty($row) && count($row) > 0) {
            $this->adjustQuantityByWarehouse($row[0]['batchId']);
            $batch_id = $row[0]['batchId'];
            return $batch_id;
        } else {
            return 0;
        }
    }

    public function getBatchNumberByProducts() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.pkId', 'sb.number')
                ->from("StockBatch", "sb")
                ->where("sb.itemPackSize = " . $this->form_values['item_pack_size_id']);
        $result = $str_sql->getQuery()->getResult();

        return $result;
    }

    public function getStockBatchAndDetailById() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('ips.itemName, sd.quantity, sd.vvmStage, sb.expiryDate, sb.number')
                ->from("StockDetail", "sd")
                ->leftJoin("sd.stockBatch", 'sb')
                ->leftJoin("sb.itemPackSize", 'ips')
                ->where("sd.pkId = " . $this->form_values['stock_detail']);
        $result = $str_sql->getQuery()->getResult();
        return $result[0];
    }

    public function showBatch() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('Sum(sd.quantity) AS total,
                        ips.quantityPerPack')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.pkId =" . $this->form_values['stock_batch_id']);
        $result = $str_sql->getQuery()->getResult();

        $str_sql2 = $this->_em->createQueryBuilder()
                ->select('Sum(p.quantity) AS placement_qty')
                ->from("Placements", "p")
                ->where("p.stockBatch =" . $this->form_values['stock_batch_id']);
        $result2 = $str_sql2->getQuery()->getResult();

        $total = $result[0]['total'] - $result2[0]['placement_qty'];
        return $total;
    }

    public function getBatches() {
        return $this->_table->findAll();
    }

    public function getItemBatches() {
        $wh_id = $this->form_values['wh_id'];

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.pkId,sb.number,
			sb.expiryDate,
                        ips.pkId as itemPackSize,
                        sips.pkId as StakeholderItemPackSizeID,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("sb.stakeholderItemPackSize", "sips")
                ->where("sb.expiryDate >= " . date("Y-m-d"))
                ->andWhere("sb.warehouse = " . $wh_id)
                ->andWhere("sb.status != 'Finished'");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function stockGatepassSearch() {
        //$wh_id = $this->_identity->getWarehouseId();
        if (!empty($this->form_values['vehicle_type_id'])) {
            $where[] = "gpv.vehicleType= '" . $this->form_values['vehicle_type_id'] . "'";
        }

        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "ip.pkId = '" . $this->form_values['item_pack_size_id'] . "'";
        }

        if (!empty($this->form_values['stock_batch_id'])) {
            $where[] = "sd.stockBatch = '" . $this->form_values['stock_batch_id'] . "'";
        }


        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(gpm.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateTimeToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateTimeToDbFormat($this->form_values['date_to']) . "'";
        }
        $str_sqlee = $this->_em->createQueryBuilder()
                ->select(" gpm.number as gpmnumber,gpm.transactionDate,"
                        . " gpv.number as gpnumber,"
                        . " sb.number,"
                        . "ip.itemName")
                ->from("GatepassDetail", "gpd")
                ->join("gpd.gatepassMaster", "gpm")
                ->join("gpm.gatepassVehicle", "gpv")
                ->join("gpd.stockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.stakeholderItemPackSize", "sip")
                ->join("sip.itemPackSize", "ip");
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
            $str_sqlee->where($where_s);
        }
        //->orderBy("s.transactionNumber", "ASC");
        //echo $str_sqlee->getQuery()->getSql();//exit;
        $result12 = $str_sqlee->getQuery()->getResult();

        //print_r($result12);exit;

        return $result12;
    }

    function editBatchExpiry() {
        $id = $this->form_values['id'];
        $date = $this->form_values['date'];

        $batch = $this->_em->getRepository("StockBatch")->find($id);
        if (count($batch) > 0) {
            $batch->setExpiryDate(new DateTime(date(App_Controller_Functions::dateToDbFormat($date))));
        }
        $this->_em->persist($batch);
        $this->_em->flush();

        return true;
    }

    function getPlacementHistory() {

        $batch = $this->_em->getRepository("StockBatch")->find($this->form_values['batch_id']);

        if ($batch->getItemPackSize()->getItemCategory()->getPkId() == 1 || $batch->getItemPackSize()->getItemCategory()->getPkId() == 4) {
            $sql = "SELECT
                    cold_chain.asset_id,
                    placement_summary.quantity,
                    placement_summary.batch_number,
                    IF(item_pack_sizes.vvm_group_id = 1, vvm_stages.pk_id, vvm_stages.vvm_stage_value) vvm_stage
                    FROM
                    placement_summary
                    INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN vvm_stages ON placement_summary.vvm_stage = vvm_stages.pk_id
                    INNER JOIN stock_batch ON placement_summary.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    WHERE
                    placement_summary.stock_batch_id = " . $this->form_values['batch_id'];
        } else {
            $sql = "SELECT
                            placement_summary.quantity,
                            placement_summary.batch_number,
                            non_ccm_locations.location_name AS asset_id,
                            'NA' vvm_stage
                    FROM
                            placement_summary
                    INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
                    INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                    WHERE placement_summary.stock_batch_id = " . $this->form_values['batch_id'];
        }

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        return $row->fetchAll();
    }

    function getPlacementVvmStage() {
        $sql = "SELECT
              SUM(placement_summary.quantity) as quantity,
              IF(item_pack_sizes.vvm_group_id = 1, vvm_stages.pk_id, vvm_stages.vvm_stage_value) vvm_stage
              FROM
              placement_summary
              INNER JOIN non_ccm_locations ON placement_summary.placement_location_id = non_ccm_locations.pk_id
              INNER JOIN vvm_stages ON placement_summary.vvm_stage = vvm_stages.pk_id
              INNER JOIN stock_batch ON placement_summary.stock_batch_id = stock_batch.pk_id
              INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
              where placement_summary.stock_batch_id = " . $this->form_values['batch_id'] . "
              AND non_ccm_locations.warehouse_id = " . $this->_identity->getWarehouseId();

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getIssueReceiveByDate() {
        $wh_id = $this->_identity->getWarehouseId();
        $from_date = $this->form_values['from_date'];
        $to_date = $this->form_values['to_date'];

        $sql = "SELECT
                Sum(IF (stock_master.transaction_type_id = 1, stock_detail.quantity, 0)) AS Rcv,
                Sum(IF (stock_master.transaction_type_id = 1, stock_detail.quantity, 0)) * item_pack_sizes.number_of_doses AS RcvD,
                Sum(IF (stock_master.transaction_type_id = 2, stock_detail.quantity, 0)) AS Issue,
                Sum(IF (stock_master.transaction_type_id = 2, stock_detail.quantity, 0)) * item_pack_sizes.number_of_doses AS IssueD,
                Sum(IF (stock_master.transaction_type_id IN (6,9),stock_detail.quantity,0)) AS Expired,
                Sum(IF (stock_master.transaction_type_id IN (6,9),stock_detail.quantity,0)) * item_pack_sizes.number_of_doses AS ExpiredD,
                Sum(IF (stock_master.transaction_type_id IN (1,2,6,9),stock_detail.quantity,0)) AS total,
                Sum(IF (stock_master.transaction_type_id IN (1,2,6,9),stock_detail.quantity,0)) * item_pack_sizes.number_of_doses AS totalD,
                items.description AS item_name
               FROM
                stock_master
               INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
               INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
               INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
               INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
               WHERE
                DATE_FORMAT(stock_master.transaction_date,'%Y-%m-%d') BETWEEN '$from_date'
               AND '$to_date'
               AND stock_batch.warehouse_id = $wh_id
               GROUP BY
                items.pk_id
               ORDER BY
                item_pack_sizes.list_rank ASC";
        //echo $sql;
        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        foreach ($result as $r) {
            $data[$r['item_name']] = array(
                'receive' => $r['Rcv'],
                'receiveD' => $r['RcvD'],
                'issue' => ABS($r['Issue']),
                'issueD' => ABS($r['IssueD']),
                'total' => $r['total'],
                'totalD' => $r['totalD'],
                'expired' => ABS($r['Expired']),
                'expiredD' => ABS($r['ExpiredD'])
            );
        }

        return $data;
    }

    public function getBatchLocations() {
        $batch_id = $this->form_values['batch_id'];
        $type = $this->form_values['type'];

        $sql = "SELECT
                        placements.placement_location_id,
                        SUM(placements.quantity) AS quantity,
                        cold_chain.asset_id,
                        vvm_stages.pk_id as vvm_stage_id,
                        IF(item_pack_sizes.vvm_group_id = 1, vvm_stages.pk_id, vvm_stages.vvm_stage_value) vvm_stage
                FROM
                        placements
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                WHERE
                        placements.stock_batch_id = $batch_id
                GROUP BY
                        placements.placement_location_id,
                        placements.vvm_stage ORDER BY cold_chain.asset_id";

        if (!empty($type)) {
            $tran_type = $this->_em->getRepository("TransactionTypes")->find($type);
            if ($tran_type->getNature() == '+') {
                $wh_id = $this->_identity->getWarehouseId();
                //$type = '15,16';
                $loc_type = Model_PlacementLocations::LOCATIONTYPE_CCM;

                $sql = "SELECT DISTINCT
                                cold_chain.asset_id,
                                0 vvm_stage,
                                placement_locations.pk_id AS placement_location_id
                        FROM
                                cold_chain
                        INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
                        LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                        LEFT JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
                        INNER JOIN ccm_status_history ON ccm_status_history.pk_id = cold_chain.ccm_status_history_id
                        WHERE
                                cold_chain.warehouse_id = $wh_id
                        AND (
                                (
                                        cold_chain.ccm_asset_type_id = 3
                                        OR AssetMainType.pk_id = 3
                                )
                                OR (
                                        cold_chain.ccm_asset_type_id = 1
                                        OR AssetMainType.pk_id = 1
                                )
                        )
                        AND placement_locations.location_type = $loc_type
                        GROUP BY
                                cold_chain.auto_asset_id
                        ORDER BY
                                cold_chain.asset_id,
                                cold_chain.ccm_asset_type_id DESC";
            }
        }

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        return $result;
    }

    /**
     * This Function is using in 'receive from store' screen for vaccines'locations.
     * @return array Cold Stores Locations
     * @author Ajmal Hussain <ajmaleyetii@gmail.com>
     * 
     */
    public function getAllColdStores() {
        $wh_id = $this->_identity->getWarehouseId();
        $loc_type = 99;

        $sql = "SELECT DISTINCT
                                cold_chain.asset_id,
                                0 vvm_stage,
                                placement_locations.pk_id AS placement_location_id
                        FROM
                                cold_chain
                        INNER JOIN ccm_asset_types AS AssetSubtype ON cold_chain.ccm_asset_type_id = AssetSubtype.pk_id
                        LEFT JOIN ccm_asset_types AS AssetMainType ON AssetSubtype.parent_id = AssetMainType.pk_id
                        LEFT JOIN placement_locations ON cold_chain.pk_id = placement_locations.location_id
                        INNER JOIN ccm_status_history ON ccm_status_history.pk_id = cold_chain.ccm_status_history_id
                        WHERE
                                cold_chain.warehouse_id = $wh_id
                        AND (
                                (
                                        cold_chain.ccm_asset_type_id = 3
                                        OR AssetMainType.pk_id = 3
                                )
                                OR (
                                        cold_chain.ccm_asset_type_id = 1
                                        OR AssetMainType.pk_id = 1
                                )
                        )
                        AND placement_locations.location_type = $loc_type AND
                        ccm_status_history.ccm_status_list_id <> 3
                        GROUP BY
                                cold_chain.auto_asset_id
                        ORDER BY
                                cold_chain.asset_id,
                                cold_chain.ccm_asset_type_id DESC";

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        return $result;
    }

    public function getBactchLocationDryStore() {
        $batch_id = $this->form_values['batch_id'];
        $type = $this->form_values['type'];
        $loc_type = Model_PlacementLocations::LOCATIONTYPE_NONCCM;

        $sql = "SELECT
                        placements.placement_location_id,
                        SUM(placements.quantity) AS quantity,
                        'NA' vvm_stage,
                        '0' vvm_stage_id,
                        non_ccm_locations.location_name asset_id
                FROM
                        placements
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                WHERE
                        placements.stock_batch_id = $batch_id
                        and placement_locations.location_type = $loc_type
                GROUP BY
                        placements.placement_location_id,
                        placements.vvm_stage ORDER BY non_ccm_locations.location_name";

        if (!empty($type)) {
            $tran_type = $this->_em->getRepository("TransactionTypes")->find($type);
            if ($tran_type->getNature() == '+') {
                $wh_id = $this->_identity->getWarehouseId();

                $sql = "SELECT DISTINCT
                                placement_locations.pk_id AS placement_location_id,
                                'NA' vvm_stage,
                                '0' vvm_stage_id,
                                non_ccm_locations.location_name asset_id
                        FROM
                                non_ccm_locations
                        INNER JOIN placement_locations ON non_ccm_locations.pk_id = placement_locations.location_id
                        WHERE
                                non_ccm_locations.warehouse_id = $wh_id
                        AND placement_locations.location_type = $loc_type
                        ORDER BY
                                non_ccm_locations.location_name";
            }
        }

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        return $result;
    }

    public function setPriorityBatchesStatus() {
        $product_id = $this->form_values['product_id'];
        $wh_id = $this->_identity->getWarehouseId();
        $stacked = Model_StockBatch::STACKED;
        $finised = Model_StockBatch::FINISHED;
        $em = Zend_Registry::get('doctrine');
        $em->getConnection()->beginTransaction();
        try {

            $this->_em = Zend_Registry::get('doctrine');
            $str_upd_fin = "UPDATE stock_batch "
                    . "SET `status` = '$finised' "
                    . "WHERE quantity = 0 "
                    . "and stock_batch.item_pack_size_id = $product_id "
                    . "and stock_batch.warehouse_id=$wh_id";

            $row_finish = $this->_em->getConnection()->prepare($str_upd_fin);
            $row_finish->execute();
            $str_upd_stack = "UPDATE stock_batch SET "
                    . "`status` = '$stacked'  "
                    . "WHERE quantity > 0 "
                    . "and stock_batch.item_pack_size_id = $product_id "
                    . "and stock_batch.warehouse_id=$wh_id";
            $row_stack = $this->_em->getConnection()->prepare($str_upd_stack);
            $row_stack->execute();


            $current_date = new DateTime(date("Y-m-d"));
            $today = $current_date->format("Y-m-d");
            $month3 = $current_date->modify("+3 months");
            $after3month = $month3->format("Y-m-d");
            $month12 = $current_date->modify("+12 months");
            $afteryear = $month12->format("Y-m-d");


            $str_qry = "SELECT
                           stock_batch.pk_id as batch_id,
                           stock_batch.`status`,
                           stock_batch.quantity
                    FROM
                            stock_batch
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    WHERE
                    stock_batch.warehouse_id = $wh_id AND
                    item_pack_sizes.item_category_id = 1
                    AND
                    (placements.vvm_stage = 2 OR
                    (placements.vvm_stage = 1 AND
                    DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d')
                    BETWEEN '$today' AND '$after3month')) AND
                    stock_batch.item_pack_size_id = $product_id
                    GROUP BY
                           stock_batch.pk_id
                    HAVING
                            quantity > 0
                    ORDER BY
                            item_pack_sizes.list_rank, stock_batch.expiry_date";

            $this->_em = Zend_Registry::get('doctrine');
            $row = $this->_em->getConnection()->prepare($str_qry);
            $row->execute();
            $result = $row->fetchAll();
            if (count($result) > 0) {

                foreach ($result as $res) {
                    $stock_batch = $this->_table->find($res['batch_id']);
                    if (count($stock_batch) >= 1) {
                        $stock_batch->setStatus(Model_StockBatch::RUNNING);
                        $this->_em->persist($stock_batch);
                        $this->_em->flush();
                        // return true;
                    }
                }
            } else {

                $str_qry1 = "SELECT
                           stock_batch.pk_id as batch_id,
                           stock_batch.`status`,
                           stock_batch.quantity
                    FROM
                            stock_batch
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    WHERE
                    stock_batch.warehouse_id = $wh_id AND
                    item_pack_sizes.item_category_id = 1
                    AND
                    placements.vvm_stage = 1 AND
                    DATE_FORMAT(
                            stock_batch.expiry_date,
                            '%Y-%m-%d'
                    ) BETWEEN '$after3month' AND '$afteryear' AND
                    stock_batch.item_pack_size_id = $product_id
                    GROUP BY
                           stock_batch.pk_id
                    HAVING
                            quantity > 0
                    ORDER BY
                            item_pack_sizes.list_rank, stock_batch.expiry_date";

                $this->_em = Zend_Registry::get('doctrine');
                $row1 = $this->_em->getConnection()->prepare($str_qry1);
                $row1->execute();
                $result2 = $row1->fetchAll();


                foreach ($result2 as $res) {
                    $stock_batch = $this->_table->find($res['batch_id']);
                    if (count($stock_batch) >= 1) {
                        $stock_batch->setStatus(Model_StockBatch::RUNNING);
                        $this->_em->persist($stock_batch);
                        $this->_em->flush();
                        // return true;
                    }
                }
            }

            $em->getConnection()->commit();
        } catch (Exception $e) {
            $em->getConnection()->rollback();
            $em->close();
        }
    }

    public function getExistingBatches($product) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("DISTINCT sb.number")
                ->from("StockBatch", "sb")
                ->where("sb.itemPackSize = $product");
        $result = $str_sql->getQuery()->getResult();
        $resultarray = array();
        if (count($result) > 0) {
            foreach ($result as $row) {
                $resultarray[] = $row['number'];
            }
        }
        return Zend_Json::encode($resultarray);
    }

    public function getAdjustedBatches() {
        $wh_id = $this->_identity->getWarehouseId();
        $item_id = $this->form_values["item_id"];

        $str_sql = "
                        SELECT DISTINCT
                            s1_.pk_id,
                            s1_.number,
                            s1_.quantity
                        FROM
                            stock_detail AS s2_
                                INNER JOIN stock_master AS s0_ ON s2_.stock_master_id = s0_.pk_id
                                INNER JOIN stock_batch AS s1_ ON s2_.stock_batch_id = s1_.pk_id
                        WHERE
                                s0_.from_warehouse_id = $wh_id
                                AND s0_.to_warehouse_id = $wh_id
                                AND s0_.transaction_type_id > 2
                                AND s1_.item_pack_size_id = '$item_id'";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getRunningBatches() {

        $this->form_values['item_pack_size_id'] = $this->form_values['item_pack_size_id'];
        $this->form_values['transaction_date'] = $this->form_values['transaction_date'];

        $wh_id = $this->_identity->getWarehouseId();
        $wh = $this->_em->getRepository("Warehouses")->find($wh_id);
        $itm = $this->_em->getRepository("ItemPackSizes")->find($this->form_values['item_pack_size_id']);

         if ($itm->getItemCategory()->getPkId() == 1 || $itm->getItemCategory()->getPkId() == 4)  {
            $result = $this->getAllIssuePriorityBatches();
        } else {
            $result = $this->getAllIssueRunningBatches();
        }
        //  App_Controller_Functions::pr($result);
        return $result;
    }

    public function getAllIssuePriorityBatches() {

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        $item_id = $this->form_values['item_pack_size_id'];
        $wh_id = $this->_identity->getWarehouseId();
        $trans_date = App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']);
        $batch_no = implode(",", $this->form_values['batch_no']);
        if (!empty($batch_no)) {
            $batch_number = "AND stock_batch.pk_id NOT IN ($batch_no)";
        }
        $str_sql = "(
	SELECT
		stock_batch.expiry_date AS expiryDate,
		stock_batch.number,
		SUM(placements.quantity) AS quantity,
		stock_batch.pk_id AS pkId,
		'P1' AS priority
	FROM
		stock_batch
	INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
	LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
	INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
	INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
	INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
	WHERE
		stock_batch.warehouse_id = $wh_id
	AND item_pack_sizes.item_category_id = 1
	AND (
		placements.vvm_stage = 2
		OR (
			placements.vvm_stage = 1
			AND DATE_FORMAT(
				stock_batch.expiry_date,
				'%Y-%m-%d'
			) BETWEEN '$today'
			AND '$after3month'
		)
	)
	AND DATE_FORMAT(
		stock_batch.expiry_date,
		'%Y-%m-%d'
	) >= '$trans_date'
	AND stock_batch.item_pack_size_id = $item_id
            $batch_number
	GROUP BY
		placements.stock_batch_id
	HAVING
		quantity > 0
	ORDER BY
		item_pack_sizes.list_rank,
		stock_batch.expiry_date
)
UNION
	(
		SELECT
			stock_batch.expiry_date AS expiryDate,
			stock_batch.number,
			SUM(placements.quantity) AS quantity,
			stock_batch.pk_id AS pkId,
			'P2' AS priority
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) BETWEEN '$after3month'
		AND '$afteryear'
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) >= '$trans_date'
		AND stock_batch.item_pack_size_id = $item_id
                    $batch_number
		GROUP BY
			placements.stock_batch_id
		HAVING
			quantity > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
	)
UNION
	(
		SELECT
			stock_batch.expiry_date AS expiryDate,
			stock_batch.number,
			SUM(placements.quantity) AS quantity,
			stock_batch.pk_id AS pkId,
			'P3' AS priority
		FROM
			stock_batch
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
		LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
		INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
		INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
		INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
		WHERE
			stock_batch.warehouse_id = $wh_id
		AND item_pack_sizes.item_category_id = 1
		AND placements.vvm_stage = 1
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) > '$afteryear'
		AND DATE_FORMAT(
			stock_batch.expiry_date,
			'%Y-%m-%d'
		) >= '$trans_date'
		AND stock_batch.item_pack_size_id = $item_id
                    $batch_number
		GROUP BY
			placements.stock_batch_id
		HAVING
			quantity > 0
		ORDER BY
			item_pack_sizes.list_rank,
			stock_batch.expiry_date
	)";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getAllIssueRunningBatches() {



        $batch_no = implode(",", $this->form_values['batch_no']);


        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.number,
			sb.pkId,
			sb.expiryDate,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->where("sb.quantity > 0 ")
                // ->andWhere("sb.status = '" . self::RUNNING . "'")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_pack_size_id']);

        if (!empty($this->form_values['transaction_date'])) {
            $str_sql->andWhere("sb.expiryDate >= '" . App_Controller_Functions::dateToDbFormat($this->form_values['transaction_date']) . "' ");
        }
        if (!empty($batch_no)) {
            $str_sql->andWhere("sb.pkId NOT IN ($batch_no)");
        }

        $str_sql->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->orderBy("sb.quantity", "DESC");
        //  echo $str_sql->getQuery()->getSql();
        //  exit;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function batchProductTotal() {

        if (!empty($this->form_values['wh_id'])) {
            $wh_id = $this->form_values['wh_id'];
        }

        //$wh_id = $this->_identity->getWarehouseId();

        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
                        ips.numberOfDoses as description,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        sb.number")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemUnit", "iu")
                ->where("ips.itemCategory = 1")
                ->andWhere("sb.warehouse = " . $wh_id);

        if ($wh_id == 159) {
            $str_sql->andWhere("sb.expiryDate >= '" . date("Y-m-d") . "'");
            $str_sql->andWhere("ips.pkId NOT IN(35,10,38)");
        }

        $str_sql->groupBy("ips.pkId")
                ->orderBy("ips.listRank");

//        echo $str_sql->getQuery()->getSql()."<br>";
//        exit();

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

}
