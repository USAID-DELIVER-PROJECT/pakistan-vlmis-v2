<?php

/**
 * Model_StockDetail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_StockDetail extends Model_Base {

    private $_table;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('StockDetail');
    }

    public function addStockDetail($array) {

        $em = Zend_Registry::get('doctrine');
        $action = Zend_Registry::get("action");

        if ($array['rcvedit'] == "Yes") {
            $stock_detail = $this->_em->getRepository("StockDetail")->find($array['stock_detail_id']);
        } else {
            $stock_detail = new StockDetail();
        }

        $type = $array['transaction_type_id'];
        $type1 = $type;


        if (!empty($array['hdn_stock_id'])) {
            $stock_id = $array['hdn_stock_id'];
        } else {
            $stock_id = $array['stock_master_id'];
        }

        $stock_master_id = $this->_em->getRepository('StockMaster')->find($stock_id);
        $stock_detail->setStockMaster($stock_master_id);
        if (!empty($array['item_unit_id'])) {
            $item_unit_id = $this->_em->getRepository('ItemUnits')->find($array['item_unit_id']);
            $stock_detail->setItemUnit($item_unit_id);
        }

        if ($array['type'] != 's') {
            $stock_detail->setTemporary(1);
        }

        $quantity = str_replace(",", "", $array['quantity']);

        if ($action == 'issue') {
            list($location, $vvm, $placd_qty) = explode("|", $array['vvm_stage']);
            if ($vvm == 0) {
                $array['vvm_stage'] = 0;
            } else if (!empty($vvm)) {
                $array['vvm_stage'] = $vvm;
            } else {
                $array['vvm_stage'] = $location;
            }

            if ($quantity > $placd_qty) {
                throw new Exception('PLCD_QTY_GREATER_THAN_ISSUE_QTY');
            }
        }

        $vvms = $this->_em->getRepository("VvmStages")->find($array['vvm_stage']);
        $stock_detail->setVvmStage($vvms);
        //$type = $array['transaction_type_id'];

        if ($type == Model_TransactionTypes::TRANSACTION_ISSUE) {
            $quantity = "-" . $quantity;
        }
        $stock_detail->setQuantity($quantity);

        $stock_detail->setAdjustmentType("$type");
        //$stock_detail->setStakeholderItem($array['manufacturer_id']);

        if ($type == 1) {
            //this IF is for stock receive
            $stock_batch_id = $this->_em->getRepository('StockBatch')->find(
                    array('number' => $array['number'],
                        'itemPackSize' => $array['item_id'],
                        'warehouse' => $this->_identity->getWarehouseId())
            );
            // echo $stock_batch_id->getPkId();
            // exit;
            // App_Controller_Functions::pr($stock_batch_id);
            $stock_detail->setStockBatch($stock_batch_id);

            $stock_detail->setIsReceived(1);
        } else if ($type == 2) {
            //this ELSE IF is for stock issue
            $stock_batch_id = $this->_em->getRepository('StockBatch')->find($array['stock_batch_id']);
            $stock_detail->setStockBatch($stock_batch_id);
            $stock_detail->setIsReceived(0);
        }

        $this->_em->persist($stock_detail);
        $this->_em->flush();
        $query = "SELECT AdjustQty(" . $stock_batch_id->getPkId() . "," . $this->_identity->getWarehouseId() . ") FROM DUAL";
        $str_sql = $em->getConnection()->prepare($query);
        $str_sql->execute();

        if ($action == 'issue' && !empty($location)) {
            $placements = new Model_Placements();
            $placements->form_values['placement_loc_id'] = $location;
            $placements->form_values['batch_id'] = $array['number'];
            $placements->form_values['vvmstage'] = $vvm;
            $placements->form_values['is_placed'] = 1;
            $placements->form_values['quantity'] = $quantity;
            $placements->form_values['placement_loc_type_id'] = 115;
            $placements->form_values['detail_id'] = $stock_detail->getPkId();
            $placements->form_values['user_id'] = $this->_user_id;
            $placements->form_values['created_date'] = date("Y-m-d");
            $placements->add();
        }

        return $stock_detail->getPkId();
    }

    public function updateStockDetailTemp($id) {
        $row = $this->_em->getConnection()->prepare("UPDATE stock_detail SET `temporary` = 0 WHERE stock_master_id = $id");
        $row->execute();
    }

    public function getQuantityById($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd.pkId as stockDetail,sd.quantity,sb.pkId as stockBatchId,sb.number,s.pkId as stockMasterId,ips.pkId as itemPackSize,sb.expiryDate,vt.pkId as vvmTypeId,sips.pkId as stakeholderItemPackSizeId,sb.unitPrice')
                ->from('StockDetail', 'sd')
                ->join('sd.stockMaster', 's')
                ->join('sd.stockBatch', 'sb')
                ->leftjoin('sb.vvmType', 'vt')
                ->leftjoin('sb.stakeholderItemPackSize', 'sips')
                ->join('sb.itemPackSize', 'ips')
                ->where('sd.pkId =' . $id);
        $row = $str_sql->getQuery()->getResult();

        return $data = array(
            'number' => $row[0]['number'],
            'quantity' => $row[0]['quantity'],
            'stock_batch_id' => $row[0]['stockBatchId'],
            'stock_master_id' => $row[0]['stockMasterId'],
            'item_pack_size_id' => $row[0]['itemPackSize'],
            'stock_detail' => $row[0]['stockDetail'],
            'expiryDate' => $row[0]['expiryDate'],
            'vvmTypeId' => $row[0]['vvmTypeId'],
            'stakeholderItemPackSizeId' => $row[0]['stakeholderItemPackSizeId'],
            'unitPrice' => $row[0]['unitPrice']
        );
    }

    public function deleteStockDetail($id) {
        $stockdetail = $this->_table->find($id);
        $this->_em->remove($stockdetail);
        $this->_em->flush();
        return true;
    }

    public function deleteStockDetailPicking($detail_id) {
        $stockdetail = $this->_em->getRepository("Placements")->findBy(array("stockDetail" => $detail_id));
        if (count($stockdetail) > 0) {
            foreach ($stockdetail as $sd) {
                $this->_em->remove($sd);
            }
            $this->_em->flush();
        }
        return true;
    }

    public function deleteIssue($id) {
        $stock_batch = new Model_StockBatch();
        $stock_master = new Model_StockMaster();

        $result = $this->getQuantityById($id);

        $qty = $result['quantity'];
        $batch_id = $result['stock_batch_id'];
        $stock_batch->form_values['pk_id'] = $batch_id;
        $stock_batch->form_values['status'] = Model_StockBatch::RUNNING;
        $stock_batch->changeStatus();

        $del = $this->deleteStockDetail($id);
        $del = $this->deleteStockDetailPicking($id);
        $del_master = $stock_master->deleteStockMaster($result['stock_master_id']);

        $stock_batch->adjustQuantityByWarehouse($batch_id);

        if ($del) {
            return true;
        } else {
            return FALSE;
        }
    }

    public function editQuantity() {
        $stock_batch = new Model_StockBatch;
        $entered_quantity = $this->form_values['quantity'];
        $id = $this->form_values['pk_id'];

        $result = $this->getQuantityById($id);
        $batch_id = $result['stock_batch_id'];

        $this->adjustQuantity($id, $entered_quantity);
        $stock_batch->adjustQuantityByWarehouse($batch_id, $this->_identity->getWarehouseId());
    }

    public function adjustQuantity($id, $qty) {
        $stock = $this->_table->find($id);
        $stock->setQuantity($qty);
        $this->_em->persist($stock);
        return $this->_em->flush();
    }

    public function findByStockId() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('d.pkId,sb.pkId as batchId,'
                        . 'iu.pkId as itemUnit,d.quantity,d.temporary,vvm.pkId as vvmStage,vvm.vvmStageValue,'
                        . 'd.isReceived,d.adjustmentType,w.pkId as toWarehouse,fw.pkId as fromWarehouse,sa.pkId as stakeholderActivity')
                ->from("StockDetail", "d")
                ->join("d.vvmStage", "vvm")
                ->join("d.stockBatch", "sb")
                ->join("d.itemUnit", "iu")
                ->join("d.stockMaster", "m")
                ->leftJoin("m.stakeholderActivity", "sa")
                ->join("m.toWarehouse", "w")
                ->join("m.fromWarehouse", "fw")
                ->where('m.pkId =' . $this->pkId);

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function findByDetailId($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('d.pkId,sb.pkId as stockBatch,'
                        . 'iu.pkId as itemUnit,d.quantity,d.temporary,vvm.pkId as vvmStage,vvm.vvmStageValue,'
                        . 'd.isReceived,d.adjustmentType,w.pkId as toWarehouse')
                ->from('StockDetail', 'd')
                ->join("d.vvmStage", "vvm")
                ->join("d.stockBatch", "sb")
                ->join("d.itemUnit", "iu")
                ->join("d.stockMaster", "m")
                ->join("m.toWarehouse", "w")
                ->where('d.pkId =' . $id);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function stockReceived($id) {
        $stock_detail = $this->_table->find($id);
        $stock_detail->setIsReceived(1);
        $this->_em->persist($stock_detail);
        return $this->_em->flush($stock_detail);
    }

    public function getBatchDetail($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.batchMasterId, sb.number,sb.expiryDate,ips.pkId as itemPackSize,
                        sb.unitPrice,sb.productionDate,vt.pkId as vvmType ,sd.quantity, sips.pkId as stakeholderItemPackSize')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.stakeholderItemPackSize", "sips")
                ->join("sb.itemPackSize", "ips")
                ->leftJoin("sb.vvmType", "vt")
                ->where("sd.pkId =  $id ");

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getUnTotalQuantityByBatch($id) {

        // App_Controller_Functions::pr($this->form_values);
        $str_sql = $this->_em->createQueryBuilder()
                ->select('Sum(sd.quantity) AS total,
                        ips.quantityPerPack')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.pkId ='  " . $this->form_values['batchId'] . "'")
                ->andwhere("sd.pkId =" . $id);
        $result = $str_sql->getQuery()->getResult();
        $sql = "SELECT
                        sum(placements.quantity) as sum
                        FROM
                        placements
                        INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
                        WHERE
                        placements.stock_batch_id ='" . $this->form_values['batchId'] . "' AND
                        placements.stock_detail_id = " . $id;
        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($sql);
        $row->execute();
        $res = $row->fetchAll();
        $result2 = $res[0]['sum'];
        $total = $result[0]['total'] - $result2;  //50-10 = 40pq
        $return['unallocated_qty'] = $total / $result[0]['quantityPerPack']; //40/10=4 unaloc
        $return['product_qty'] = $total; //40

        return $return;
    }

    public function getTotalQuantityByBatch($id = NULL) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('Sum(sd.quantity) AS total,
                        ips.quantityPerPack')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.pkId ='" . $this->form_values['batchId'] . "'")
                ->andwhere("sd.pkId =" . $id);
        $result = $str_sql->getQuery()->getResult();
        $str_qry = "SELECT
                    sum(placements.quantity) as sum
                FROM
                    placements
                INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
                WHERE
                    placements.stock_batch_id ='" . $this->form_values['batchId'] . "' AND
                    placements.stock_detail_id = " . $id;
        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry);
        $row->execute();
        $res = $row->fetchAll();
        $result2 = $res[0]['sum'];

        $total = $result[0]['total'] - $result2;  //50-40 = 10pq
        // echo $total;exit;
        $return['unallocated_qty'] = $total / $result[0]['quantityPerPack']; //10/10=1 unaloc
        $return['product_qty'] = $total; //10

        return $return;
    }

    public function getTotalQuantity() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sum(sd.quantity) quantity')
                ->from("StockDetail", "sd")
                ->where("sd.stockBatch =" . $this->form_values['stock_batch_id']);
        $result = $str_sql->getQuery()->getResult();
        return $result[0]['quantity'];
    }

    public function quantityDataIssueno($stoc_mas) {
        $wh_id = $this->_identity->getWarehouseId();
//        $str_sql = $this->_em->createQueryBuilder()
//                ->select('sd.pkId,sd.quantity,sb.pkId as stcbacPk,sb.number,ips.pkId as itmPk,ips.itemName,sm.pkId as stcmasPk')
//                ->from('StockDetail', 'sd')
//                ->join("sd.stockBatch", "sb")
//               ->join("sb.itemPackSize", "ips")
//                ->join("sd.stockMaster", "sm")
//                ->where('sd.stockMaster =' . 18);
//               //->wherein('sd.stockMaster' . $stoc_mas);  
//       echo $str_sql->getQuery()->getSql();exit;
//        $row = $str_sql->getQuery()->getResult();
//        if (!empty($row) && count($row) > 0) {
//            return $row;
//        } else {
//            return false;  
//        }       
        $qr = ' ';
        end($stoc_mas);
        $count = count($stoc_mas);
        foreach ($stoc_mas as $key => $value):
            $qr .= $value . '  ';
            if ($value != end($stoc_mas))
                $qr .= ' , ';
        endforeach;
//        echo $str_qry = "SELECT
//                stock_detail.pk_id as pkId,stock_batch.pk_id as stckbatch_id,stock_detail.stock_master_id as masId,
//    stock_batch.number,
//    item_pack_sizes.item_name,
//    sum(stock_detail.quantity) as qty
//    FROM
//    stock_detail
//    INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
//    INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
//    WHERE
//    stock_detail.stock_master_id in ($qr) group by stock_batch.number";exit;
//     echo $str_qry = "SELECT
//stock_detail.pk_id AS pkId,
//stock_batch.pk_id AS stckbatch_id,
//stock_detail.stock_master_id AS masId,
//stock_batch.number,
//Sum(stock_detail.quantity) AS qty,
//item_pack_sizes.item_name
//FROM
//stock_detail
//INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
//INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//WHERE
//	stock_detail.stock_master_id IN ($qr)
//GROUP BY
//	stock_batch.number";exit;

        $str_qry = "SELECT * FROM (SELECT
				stock_master.pk_id AS masterId,
				stock_batch.pk_id,
                                stock_detail.pk_id as pkId,
				stock_batch.number,
                                item_pack_sizes.item_name,
				SUM(ABS(stock_detail.quantity)) - 
				(
					COALESCE((SELECT
						SUM(gatepass_detail.quantity)
					FROM
						gatepass_detail
					WHERE
						gatepass_detail.stock_detail_id = stock_detail.pk_id
					), NULL, 0)
				) AS Qty
			FROM
				stock_master
			INNER JOIN stock_detail ON stock_master.pk_id = stock_detail.stock_master_id
			INNER JOIN stock_batch ON stock_batch.pk_id = stock_detail.stock_batch_id
                        INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                        INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
			WHERE
				stock_master.from_warehouse_id = $wh_id
			AND stock_master.transaction_type_id =" . Model_TransactionTypes:: TRANSACTION_ISSUE . "
			AND stock_master.pk_id IN ($qr)
			GROUP BY
				stock_batch.pk_id) A
			WHERE A.Qty > 0";


        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry);
        $row->execute();
        $return = $row->fetchAll();

        //$stbatch_pk = $return[0]['stckbatch_id'];
        //return $result;
//         $qr1 = ' ';
//        end($stbatch_pk);
//        $count = count($stbatch_pk);
//        foreach ($stbatch_pk as $key => $value):
//            $qr1 .= $value . '  ';
//            if ($value != end($stbatch_pk))
//                $qr1 .= ' , ';
//        endforeach;




        $str_qry1 = " SELECT
                    Sum(gatepass_detail.quantity) AS gp_qty,
                    gatepass_detail.stock_detail_id
                    FROM
                            gatepass_detail
                    WHERE
                            gatepass_detail.stock_detail_id = 12
                    GROUP BY
                    gatepass_detail.stock_detail_id";

        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry1);
        $row->execute();
        $res = $row->fetchAll();
        //$return[0]['gp_qty'] = $res[0]['gp_qty'];
        //$return['gp_qty'] = $res[0]['gp_qty'];
        //$return['stc_qty'] = $return[0]['qty'];
        // $return['remain_qty'] = $return['stc_qty'] - $return['gp_qty'];
        return $return;
    }

    public function quantityDataByStcMaster($stm_id) {

        $str_qry = "SELECT
                            stock_detail.pk_id as pkId,stock_batch.pk_id as stckbatch_id,
                stock_batch.number,
                item_pack_sizes.item_name,
                stock_detail.quantity as qty
                FROM
                stock_detail
                INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                WHERE
                stock_detail.stock_master_id = $stm_id";
        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry);
        $row->execute();
        $return = $row->fetchAll();
        return $return;
    }

    public function quantityDataByStcBatch($stb_id, $stm_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd.pkId,sd.quantity')
                ->from("StockDetail", "sd")
                ->where("sd.stockBatch =" . $stb_id)
                ->andwhere("sd.stockMaster =" . $stm_id);
        //echo $str_sql->getQuery()->getSql();
        $result = $str_sql->getQuery()->getResult();
        if (!empty($result) && count($result) > 0) {
            return $result;
        } else {
            return false;
        }

//        echo  $str_qry = "SELECT
//                stock_detail.pk_id as pkId,
//    stock_detail.quantity as qty
//    FROM
//    stock_detail
//    WHERE
//    stock_detail.stock_batch_id = $stb_id and stock_detail.stock_master_id = $stm_id";exit;
//        $em = Zend_Registry::get('doctrine');
//        $row = $em->getConnection()->prepare($str_qry);
//        $row->execute();
//        $return = $row->fetchAll();
//        return $return;
    }

    public function getClosest($array, $search) {
        $closest = null;
        foreach ($array as $key => $val) {
            if ($closest == null || abs($search - $closest) > abs($val - $search)) {
                $closest = $val;
                $closestKey = $key;
                $arr = array($closestKey, $closest);
            }
        }
        return $arr;
    }

    public function updateDetail($id, $batch_id) {
        //echo $id;
        $stock_detail = $this->_table->find($id);
        $b_id = $this->_em->getRepository('StockBatch')->find($batch_id);
        $stock_detail->setStockBatch($b_id);
        $this->_em->persist($stock_detail);
        return $this->_em->flush();
    }

    public function purposeTransferHistory($batch_id) {
        $str_sql = "";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function purposeTransferManagement($batch_id) {
        $str_sql = "SELECT
                            stakeholder_activities.activity,
                            placement_summary.batch_number,
                            placement_summary.stock_batch_id,
                            placement_summary.vvm_stage,
                            placement_summary.quantity,
                            placement_summary.placement_location_id,
                            placement_locations.location_type,
                            placement_locations.location_id,
                            vvm_stages.vvm_stage_value,
                            item_pack_sizes.vvm_group_id,
                            item_pack_sizes.stakeholder_activity_id
                    FROM
                            placement_summary
                    INNER JOIN stock_batch ON placement_summary.stock_batch_id = stock_batch.pk_id
                    INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                    INNER JOIN stakeholders ON stakeholder_item_pack_sizes.stakeholder_id = stakeholders.pk_id
                    INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
                    INNER JOIN vvm_stages ON placement_summary.vvm_stage = vvm_stages.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    INNER JOIN stakeholder_activities ON item_pack_sizes.stakeholder_activity_id = stakeholder_activities.pk_id
                    WHERE
                            stock_batch.pk_id = $batch_id";
        //echo $str_sql;

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function addStockDetail1Validation($array) {

        $em = Zend_Registry::get('doctrine');
        $action = Zend_Registry::get("action");
        $form_values = $array;
        $end = $form_values['counter'];

        $number = array();
        $error_array = array();
        for ($i = 0; $i < $end; $i++) {
            $row = $form_values["rows" . $i];
            // App_Controller_Functions::pr($row);
            if ($row['quantity'] > 0) {


                if (!in_array($row['number'], $number)) {
                    $number[] = $row['number'];
                } else {

                    $error_array[] = $row['item_pack_size_id'];
                }
            }
        }
        // App_Controller_Functions::pr($error_array);
        if (empty($error_array)) {

            $this->addStockDetail1($array);
        } else {
            return $error_array;
        }

        //    return $stock_detail->getPkId();
    }

    public function addStockDetail1($array) {

        $em = Zend_Registry::get('doctrine');
        $action = Zend_Registry::get("action");
        $form_values = $array;
        $end = $form_values['counter'];


        for ($i = 0; $i < $end; $i++) {
            $row = $form_values["rows" . $i];
           
            if ($row['quantity'] > 0) {
                $stock_detail = new StockDetail();

                $type = $array['transaction_type_id'];
                $type1 = $type;
                $quantity = str_replace(",", "", $row['quantity']);

                if ($type == Model_TransactionTypes::TRANSACTION_ISSUE) {
                    $quantity = "-" . $quantity;
                }


                $stock_id = $array['stock_master_id'];


                $stock_master_id = $this->_em->getRepository('StockMaster')->find($stock_id);
                $stock_detail->setStockMaster($stock_master_id);
                $row_item = $this->_em->getRepository('ItemPackSizes')->find($row['item_pack_size_id']);
                $item_unit = $row_item->getItemUnit()->getPkId();
                if (!empty($item_unit)) {
                    $item_unit_id = $this->_em->getRepository('ItemUnits')->find($item_unit);
                    $stock_detail->setItemUnit($item_unit_id);
                }
                $stock_detail->setQuantity($quantity);
                $stock_detail->setTemporary(0);


                if ($action == 'add-stock-issue') {
                    list($location, $vvm) = explode("|", trim($row['hdn_vvm_stage']));
                    if ($vvm == 0) {
                        $row['hdn_vvm_stage'] = 0;
                    } else if (!empty($vvm)) {
                        $row['hdn_vvm_stage'] = $vvm;
                    } else {
                        $row['hdn_vvm_stage'] = $location;
                    }
                }

                $vvms = $this->_em->getRepository("VvmStages")->find($row['hdn_vvm_stage']);
                $stock_detail->setVvmStage($vvms);


                $stock_detail->setAdjustmentType("$type");


                if ($type == 1) {
                    //this IF is for stock receive
                    $stock_batch_id = $this->_em->getRepository('StockBatch')->find(
                            array('number' => $row['number'],
                                'itemPackSize' => $row['item_pack_size_id'],
                                'warehouse' => $this->_identity->getWarehouseId())
                    );

                    $stock_detail->setStockBatch($stock_batch_id);

                    $stock_detail->setIsReceived(1);
                } else if ($type == 2) {
                    //this ELSE IF is for stock issue
                    $stock_batch_id = $this->_em->getRepository('StockBatch')->find($row['number']);
                    $stock_detail->setStockBatch($stock_batch_id);
                    $stock_detail->setIsReceived(0);
                }

                $this->_em->persist($stock_detail);
                $this->_em->flush();
                //  echo $row['number'];
                //  exit;
                //  echo   $stock_batch_id->getPkId();
                //  exit;   

                $query = "SELECT AdjustQty(" . $stock_batch_id->getPkId() . "," . $this->_identity->getWarehouseId() . ") FROM DUAL";
                $str_sql = $em->getConnection()->prepare($query);
                $str_sql->execute();

                if ($action == 'add-stock-issue' && !empty($location)) {
                    $placements = new Model_Placements();
                    $placements->form_values['placement_loc_id'] = $location;
                    $placements->form_values['batch_id'] = $row['number'];
                    $placements->form_values['vvmstage'] = $vvm;
                    $placements->form_values['is_placed'] = 1;
                    $placements->form_values['quantity'] = $quantity;
                    $placements->form_values['placement_loc_type_id'] = 115;
                    $placements->form_values['detail_id'] = $stock_detail->getPkId();
                    $placements->form_values['user_id'] = $this->_user_id;
                    $placements->form_values['created_date'] = date("Y-m-d");
                    $placements->addIssuePlacement();
                }
            }
        }


        return $stock_detail->getPkId();
    }

    public function addStockDetailTempValidation($array) {

        $em = Zend_Registry::get('doctrine');
        $action = Zend_Registry::get("action");
        $form_values = $array;
        $end = $form_values['counter'];
        //  App_Controller_Functions::pr($form_values);
        $number = array();
        $error_array_batch = array();
        $error_array_quantity = array();
        $return_array = array();
        for ($i = 0; $i < $end; $i++) {
            $row = $form_values["rows" . $i];
            $quantity = str_replace(",", "", $row['quantity']);
            if ($quantity > 0) {

                if (!in_array($row['number'], $number)) {
                    $number[] = $row['number'];
                } else {

                    $error_array_batch[] = $row['item_pack_size_id'];
                }


                if ($quantity > $row['hdn_available_quantity']) {
                    $error_array_quantity[] = $row['item_pack_size_id'];
                }
            }
        }
        // print_r($error_array_batch);
        // print_r($error_array_quantity);
        // exit;
        if (empty($error_array_batch) && empty($error_array_quantity)) {
            return $this->addStockDetailTemp($array);
        } else {
            throw new Exception('FALSE');
        }
        // exit;
        //    return $stock_detail->getPkId();
    }

    public function addStockDetailTemp($array) {

        $em = Zend_Registry::get('doctrine');
        $action = Zend_Registry::get("action");
        $form_values = $array;
        $end = $form_values['counter'];
        $row_array = array();
        //  App_Controller_Functions::pr($array);
        for ($i = 0; $i < $end; $i++) {
            $row = $form_values["rows" . $i];
            //  App_Controller_Functions::pr($row);
            $quantity = str_replace(",", "", $row['quantity']);
            if ($quantity > 0) {
                $stock_detail = new StockDetail();


                $type = $array['transaction_type_id'];
                $type1 = $type;
                $quantity = str_replace(",", "", $row['quantity']);

                if ($type == Model_TransactionTypes::TRANSACTION_ISSUE) {
                    $quantity = "-" . $quantity;
                }

                $stock_id = $array['stock_master_id'];
                $stock_master_id = $this->_em->getRepository('StockMaster')->find($stock_id);
                $stock_detail->setStockMaster($stock_master_id);
                $row_item = $this->_em->getRepository('ItemPackSizes')->find($row['item_pack_size_id']);
                $item_unit = $row_item->getItemUnit()->getPkId();
                if (!empty($item_unit)) {
                    $item_unit_id = $this->_em->getRepository('ItemUnits')->find($item_unit);
                    $stock_detail->setItemUnit($item_unit_id);
                }
                $stock_detail->setQuantity($quantity);
                if ($array['type'] != 's') {
                    $stock_detail->setTemporary(1);
                }

                if ($action == 'ajax-stock-issue-temp') {
                    list($location, $vvm) = explode("|", trim($row['hdn_vvm_stage']));
                    if ($vvm == 0) {
                        $row['hdn_vvm_stage'] = 0;
                    } else if (!empty($vvm)) {
                        $row['hdn_vvm_stage'] = $vvm;
                    } else {
                        $row['hdn_vvm_stage'] = $location;
                    }
                }

                $vvms = $this->_em->getRepository("VvmStages")->find($row['hdn_vvm_stage']);
                $stock_detail->setVvmStage($vvms);
                //$type = $array['transaction_type_id'];

                $stock_detail->setAdjustmentType("$type");
                //$stock_detail->setStakeholderItem($array['manufacturer_id']);

                if ($type == 1) {
                    //this IF is for stock receive
                    $stock_batch_id = $this->_em->getRepository('StockBatch')->find(
                            array('number' => $row['number'],
                                'itemPackSize' => $row['item_pack_size_id'],
                                'warehouse' => $this->_identity->getWarehouseId())
                    );
                    // echo $stock_batch_id->getPkId();
                    // exit;
                    // App_Controller_Functions::pr($stock_batch_id);
                    $stock_detail->setStockBatch($stock_batch_id);

                    $stock_detail->setIsReceived(1);
                } else if ($type == 2) {
                    //this ELSE IF is for stock issue
                    $stock_batch_id = $this->_em->getRepository('StockBatch')->find($row['number']);
                    $stock_detail->setStockBatch($stock_batch_id);
                    $stock_detail->setIsReceived(0);
                }

                $this->_em->persist($stock_detail);
                $this->_em->flush();

                $query = "SELECT AdjustQty(" . $stock_batch_id->getPkId() . "," . $this->_identity->getWarehouseId() . ") FROM DUAL";
                $str_sql = $em->getConnection()->prepare($query);
                $str_sql->execute();
            }
        }

//   App_Controller_Functions::pr($row_array);
        return $stock_detail->getPkId();
    }

    public function getPurposeTransferHistory($product_id) {

        $str_sql = "
                    SELECT
                        `from`.activity AS from_activity,
                        `to`.activity AS to_activity,
                        from_item.item_name AS from_item,
                        to_item.item_name AS to_item,
                        purpose_transfer_history.quantity,
                        transaction_types.transaction_type_name,
                        DATE_FORMAT(purpose_transfer_history.created_date, '%d/%m/%Y') AS date,
                        to_batch.number
                    FROM
                        purpose_transfer_history
                        INNER JOIN stakeholder_activities AS `from` ON purpose_transfer_history.from_activity_id = `from`.pk_id
                        INNER JOIN stakeholder_activities AS `to` ON purpose_transfer_history.to_activity_id = `to`.pk_id
                        INNER JOIN stock_batch AS from_batch ON purpose_transfer_history.from_batch_id = from_batch.pk_id
                        INNER JOIN stock_batch AS to_batch ON purpose_transfer_history.to_batch_id = to_batch.pk_id
                        INNER JOIN item_pack_sizes AS from_item ON from_batch.item_pack_size_id = from_item.pk_id
                        INNER JOIN item_pack_sizes AS to_item ON to_batch.item_pack_size_id = to_item.pk_id
                        INNER JOIN transaction_types ON purpose_transfer_history.transaction_type_id = transaction_types.pk_id
                    WHERE
                        from_batch.item_pack_size_id = '$product_id'
                        OR to_batch.item_pack_size_id = '$product_id'            
                    ";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getOpeningBalancePurpose($product_id, $batch_id) {

        $str_sql_date = "SELECT
                        purpose_transfer_history.created_date
                FROM
                        purpose_transfer_history
                WHERE
                        purpose_transfer_history.from_batch_id = '$batch_id'
               
                ORDER BY
                        purpose_transfer_history.pk_id
                LIMIT 1";

        $rec_date = $this->_em->getConnection()->prepare($str_sql_date);

        $rec_date->execute();
        $result_date = $rec_date->fetchAll();
        if (count($result_date) > 0) {
            $date_purpose = $result_date[0]['created_date'];
        } else {
            $date_purpose = date("Y-m-d");
        }

        $str_sql = "SELECT
	sum(stock_detail.quantity) as opening_balance
        FROM
	stock_batch
        INNER JOIN stock_detail ON stock_detail.stock_batch_id = stock_batch.pk_id
        INNER JOIN stock_master ON stock_master.pk_id = stock_detail.stock_master_id
        WHERE
                stock_batch.item_pack_size_id = '$product_id'
        AND DATE_FORMAT(
                stock_master.created_date,
                '%Y-%m-%d'
        ) < '$date_purpose'
        
        AND stock_batch.pk_id = '$batch_id'";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getClosingBalancePurpose($product_id, $batch_id) {

        $str_sql = "SELECT
SUM(if(purpose_transfer_history.from_batch_id = '$batch_id',purpose_transfer_history.quantity,0)) as minus_quantity,
SUM(if(purpose_transfer_history.to_batch_id = '$batch_id',purpose_transfer_history.quantity,0)) as sum_quantity
FROM
purpose_transfer_history
WHERE
(purpose_transfer_history.from_batch_id = $batch_id OR
purpose_transfer_history.to_batch_id = $batch_id)
";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getVvmTransferHistory($product_id) {
        $str_sql = "SELECT
                        item_pack_sizes.item_name,
                        stock_batch.number,
                        vvm_transfer_history.from_vvm_stage_id,
                        vvm_transfer_history.to_vvm_stage_id,
                        vvm_transfer_history.quantity,
                        DATE_FORMAT(vvm_transfer_history.created_date,'%d/%m/%Y') created_date
                    FROM
                        vvm_transfer_history
                        INNER JOIN stock_batch ON vvm_transfer_history.batch_id = stock_batch.pk_id
                        INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                        INNER JOIN vvm_stages AS from_vvm ON vvm_transfer_history.from_vvm_stage_id = from_vvm.pk_id
                        INNER JOIN vvm_stages AS to_vvm ON vvm_transfer_history.to_vvm_stage_id = to_vvm.pk_id
                    WHERE
                        stock_batch.item_pack_size_id = '$product_id'
                    ";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

}
