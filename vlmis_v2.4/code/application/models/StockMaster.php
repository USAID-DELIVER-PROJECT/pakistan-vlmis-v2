<?php

/**
 * Model_StockMaster
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_StockMaster extends Model_Base {

    private $_table;

    const PURPOSE_POSITIVE = 16;
    const PURPOSE_NEGATIVE = 17;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('StockMaster');
    }

    public function addStockMaster($array) {
        if ($array['rcvedit'] == "Yes") {
            $stock_master = $this->_em->getRepository("StockMaster")->find($array['stock_master_id']);
        } else {
            $stock_master = new StockMaster();
        }

        $type = $array['transaction_type_id'];

        $time_arr = explode(' ', $array['transaction_date']);
        $time = date('H:i:s', strtotime($time_arr[1] . $time_arr[2]));
        $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($time_arr[0]) . '' . $time));
        $tran_type = $this->_em->getRepository('TransactionTypes')->find($type);
        $stock_master->setTransactionType($tran_type);
        $stock_master->setTransactionReference($array['transaction_reference']);
        $created_by = $this->_em->getRepository('Users')->find($this->_user_id);
        $stock_master->setCreatedBy($created_by);
        $stock_master->setParentId(0);
        $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
        $activity_id = $this->_em->getRepository('StakeholderActivities')->find($array['activity_id']);
        $stock_master->setStakeholderActivity($activity_id);
        if (!empty($array['campaign_id'])) {
            $stock_master->setCampaignId($array['campaign_id']);
        }
        if (!empty($array['dispatch_by'])) {
            $stock_master->setDispatchBy($array['dispatch_by']);
        }
//$trans = $this->getTransactionNumber($type, $array['transaction_date']);

        if ($type == 1) {
            $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($array['from_warehouse_id']);
            $stock_master->setFromWarehouse($from_warehouse_id);
            $to_warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $stock_master->setToWarehouse($to_warehouse_id);
        } else if ($type == 2) {
            $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $stock_master->setFromWarehouse($from_warehouse_id);
            $to_warehouse_id = $this->_em->getRepository('Warehouses')->find($array['warehouse']);
            $stock_master->setToWarehouse($to_warehouse_id);
        }

        $stock_master->setComments($array['comments']);
        //list($h_dd, $h_mm, $h_yy) = explode("/", $array['hdn_transaction_date']);
        //   list($dd, $mm, $yy) = explode("/", $array['transaction_date']);
//echo $h_mm;
//echo $h_yy;
//echo $mm;
//echo $yy;
//exit;
        /* if ($array['edit_type'] != 's' || $h_mm != $mm || $h_yy != $yy) {
          $stock_master->setTransactionNumber($trans['trans_no']);
          } */
        $stock_master->setTransactionNumber('TEMP');
        $stock_master->setDraft(1);
//$stock_master->setTransactionCounter($trans['id']);

        $this->_em->persist($stock_master);
        $this->_em->flush();

        return $stock_master->getPkId();
    }

    public function getLastID($from, $to, $tr_type, $wh_id = null) {

        if ($wh_id == null) {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('MAX(sm.transactionCounter) as Maxtr')
                ->from("StockMaster", "sm")
                ->where("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') between '" . $from . "' and '" . $to . "'");

        if ($tr_type > 2) {
            $str_sql->andWhere("sm.transactionType > 2 ");
        } else {
            $str_sql->andWhere("sm.transactionType =  $tr_type ");
        }

        if ($tr_type == 1) {
            $str_sql->andWhere("sm.toWarehouse =  " . $wh_id);
        } else {
            $str_sql->andWhere("sm.fromWarehouse = " . $wh_id);
        }

        $row = $str_sql->getQuery()->getResult();
        if (count($row) > 0) {
            return $row[0]['Maxtr'];
        } else {
            return FALSE;
        }
    }

    public function getStockLastDate($wh_id) {

        $form_values = $this->form_values;
        $date = $form_values['year'] . "-" . str_pad($form_values['month'], 2, '0', STR_PAD_LEFT);
        $str_sql = "SELECT
                        DATE_FORMAT(MAX(
                                stock_master.transaction_date
                        ),'%d, %M %Y') AS trans_date
                FROM
                        stock_detail
                INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                WHERE
                        stock_batch.warehouse_id = $wh_id
                AND DATE_FORMAT(
                        stock_master.transaction_date,
                        '%Y-%m'
                ) <= '$date'";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        $data = $row->fetchAll();
        return $data[0]['trans_date'];
    }

    public function getLastIDExceptMe($from, $to, $tr_type, $wh_id = null, $trans_id) {

        if ($wh_id == null) {
            $wh_id = $this->_identity->getWarehouseId();
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select('MAX(sm.transactionCounter) as Maxtr')
                ->from("StockMaster", "sm")
                ->where("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') between '" . $from . "' and '" . $to . "'")
                ->andWhere("sm.transactionType =  $tr_type ")
                ->andWhere("sm.pkId !=  $trans_id ");

        if ($tr_type == 1) {
            $str_sql->andWhere("sm.toWarehouse =  " . $wh_id);
        } else {
            $str_sql->andWhere("sm.fromWarehouse = " . $wh_id);
        }
        $row = $str_sql->getQuery()->getResult();
        if (count($row) > 0) {
            return $row[0]['Maxtr'];
        } else {
            return FALSE;
        }
    }

    public function getTransactionNumber($tr_type, $tr_date, $wh_id = null, $trans_id = null) {


        $time_arr = explode(' ', $tr_date);
//$time = date('H:i:s', strtotime($time_arr[1] . $time_arr[2]));

        list($dd, $current_month, $current_year) = explode("/", $time_arr['0']);

        $from_date = $current_year . "-" . $current_month . "-01";
        $to_date = $current_year . "-" . $current_month . "-31";

        if ($trans_id > 0) {
            $last_id = $this->getLastIDExceptMe($from_date, $to_date, $tr_type, $wh_id, $trans_id);
        } else {
            $last_id = $this->getLastID($from_date, $to_date, $tr_type, $wh_id);
        }

        if ($last_id == NULL) {
            $last_id = 0;
        }

        $last_id += 1;

        if ($tr_type == 1) {
            return array(
                "id" => $last_id,
                "trans_no" => "R" . substr($current_year, -2) . $current_month . str_pad(($last_id), 4, "0", STR_PAD_LEFT)
            );
        }
        if ($tr_type == 2) {
            return array(
                "id" => $last_id,
                "trans_no" => "I" . substr($current_year, -2) . $current_month . str_pad(($last_id), 4, "0", STR_PAD_LEFT)
            );
        }
        if ($tr_type > 2) {
            return array(
                "id" => $last_id,
                "trans_no" => "A" . substr($current_year, -2) . $current_month . str_pad(($last_id), 4, "0", STR_PAD_LEFT)
            );
        }
    }

    /**
     * @uses API Get Unplaced Receive Voucher List
     * @return type
     */
    public function getUnplacedReceiveVoucherList($wh_id) {

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT sm.pkId as transID, sm.transactionDate,
                        sm.transactionNumber,
                        ws.pkId as fromWHID,
                        ws.warehouseName as fromWHName,
                        tws.pkId as toWHID,
                        tws.warehouseName as toWHName')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sm.fromWarehouse", "ws")
                ->join("sm.toWarehouse", "tws")
                ->join("sm.transactionType", "tt")
                ->where("sm.transactionType = 1")
                ->andWhere("ws.status = 1");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getWarehousesByProduct($product_id) {

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT fw.pkId,fw.warehouseName')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->join("sm.fromWarehouse", "fw")
                ->join("fw.stakeholderOffice", "so")
                ->where("sm.transactionType = 2")
                ->andWhere("sb.itemPackSize = $product_id")
                ->andWhere("fw.status = 1")
                ->orderBy("so.pkId,fw.warehouseName");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function linkReceiveWithIssue() {
        $form_values = $this->form_values;

        $stock_detail_receive = $this->_em->getRepository("StockDetail")->find($form_values['receive_detail_id']);
        $stock_detail_receive->setIsReceived($form_values['issue_detail_id']);

        $this->_em->persist($stock_detail_receive);
        $this->_em->flush();

        $stock_detail_issue = $this->_em->getRepository("StockDetail")->find($form_values['issue_detail_id']);

        $datetime1 = date_create($stock_detail_issue->getStockMaster()->getTransactionDate()->format("Y-m-d"));
        $datetime2 = date_create($stock_detail_receive->getStockMaster()->getTransactionDate()->format("Y-m-d"));
        $interval = date_diff($datetime1, $datetime2);
        $days = $interval->format('%R%a');

//If Receive date greater then Issue date
        if ($days < 0) {
            $stock_master = $stock_detail_receive->getStockMaster();
            if ($stock_detail_issue->getStockMaster()->getTransactionDate()->format("Y-m") != $stock_detail_receive->getStockMaster()->getTransactionDate()->format("Y-m")) {
                $result = $this->getTransactionNumber(1, $stock_detail_issue->getStockMaster()->getTransactionDate()->format("d/m/Y h:i:s"), $stock_detail_receive->getStockMaster()->getToWarehouse()->getPkId());
                $stock_master->setTransactionNumber($result['trans_no']);
                $stock_master->setTransactionCounter($result['id']);
            }

            $stock_master->setTransactionDate($stock_detail_issue->getStockMaster()->getTransactionDate());

            $this->_em->persist($stock_master);
            $this->_em->flush();
        }

        return true;
    }

    public function getAllWarehouseBatches() {

        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT sb.pkId,sb.number')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->where("sm.fromWarehouse = " . $form_values['from_wh'])
                ->andWhere("sm.toWarehouse = " . $form_values['to_wh'])
                ->andWhere("sb.itemPackSize = " . $form_values['product'])
                ->andWhere("sm.transactionType = 2");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getToWarehousesByProduct($from_wh, $product_id) {

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT fw.pkId,fw.warehouseName')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->join("sm.toWarehouse", "fw")
                ->join("fw.stakeholderOffice", "so")
                ->where("sm.transactionType = 2")
                ->andWhere("sb.itemPackSize = $product_id")
                ->andWhere("sm.fromWarehouse = $from_wh")
                ->andWhere("fw.status = 1")
                ->andWhere("so.pkId < 6")
                ->orderBy("so.pkId,fw.warehouseName");
        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    /**
     * @uses API Get Unplaced Receive Voucher Items
     * @return type
     */
    public function getUnplacedReceiveVoucherItems($voucher, $wh_id) {
        $array_ids = array();
        $str_sql2 = $this->_em->createQueryBuilder()
                ->select('DISTINCT sm.pkId')
                ->from("Placements", "p")
                ->join("p.stockDetail", "sd")
                ->join("sd.stockMaster", "sm");
        $array = $str_sql2->getQuery()->getResult();
        foreach ($array as $arr) {
            $array_ids[] = $arr['pkId'];
        }

        $ids = implode(",", $array_ids);

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT ips.pkId as itemId,
                        ips.itemName,
                        sb.pkId as batchId,
                        sd.pkId as detailId,
                        sb.number as batchNo,
                        sb.quantity')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sm.transactionType = 1")
                ->andWhere("sm.transactionNumber = '$voucher'");
//->andWhere("sm.pkId Not IN (:array_ids)")
//->setParameter("array_ids", $ids);
        if (!empty($wh_id)) {
            $str_sql->andWhere("sm.toWarehouse = :wh_id")->setParameter("wh_id", $wh_id);
        }

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    /**
     * @uses API Get Unplaced Receive Voucher List
     * @return type
     */
    public function getIssueVoucherList($wh_id) {
        $array_ids = array();
        $str_sql2 = $this->_em->createQueryBuilder()
                ->select('sm.pkId')
                ->from("Placements", "p")
                ->join("p.stockDetail", "sd")
                ->join("sd.stockMaster", "sm");
        $array = $str_sql2->getQuery()->getResult();
        foreach ($array as $arr) {
            $array_ids[] = $arr['pkId'];
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT sm.pkId as transID, sm.transactionDate,
                        sm.transactionNumber,
                        ws.pkId as fromWHID,
                        ws.warehouseName as fromWHName,
                        tws.pkId as toWHID,
                        tws.warehouseName as toWHName')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sm.fromWarehouse", "ws")
                ->join("sm.toWarehouse", "tws")
                ->join("sm.transactionType", "tt")
                ->where("sm.transactionType = 2")
                ->andWhere("ws.status = 1")
                ->andWhere("sm.pkId Not IN (:array_ids)")
                ->setParameter("array_ids", $array_ids);
        if (!empty($wh_id)) {
            $str_sql->andWhere("sm.fromWarehouse = :wh_id")->setParameter("wh_id", $wh_id);
        }
        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    /**
     * @uses API Get Unplaced Receive Voucher Items
     * @return type
     */
    public function getIssueVoucherItems($voucher, $wh_id) {
        $array_ids = array();
        $str_sql2 = $this->_em->createQueryBuilder()
                ->select('DISTINCT sm.pkId')
                ->from("Placements", "p")
                ->join("p.stockDetail", "sd")
                ->join("sd.stockMaster", "sm");
        $array = $str_sql2->getQuery()->getResult();
        foreach ($array as $arr) {
            $array_ids[] = $arr['pkId'];
        }

        $ids = implode(",", $array_ids);

        $str_sql = $this->_em->createQueryBuilder()
                ->select('DISTINCT ips.pkId as itemId,
                        ips.itemName,
                        sb.pkId as batchId,
                        sd.pkId as detailId,
                        sb.number as batchNo,
                        sb.quantity')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sm.transactionType = 2")
                ->andWhere("sm.transactionNumber = '$voucher'");
//->andWhere("sm.pkId Not IN (:array_ids)")
//->setParameter("array_ids", $ids);
        if (!empty($wh_id)) {
            $str_sql->andWhere("sm.fromWarehouse = :wh_id")->setParameter("wh_id", $wh_id);
        }

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getTempStock() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sm.transactionNumber AS transaction_number,
                        sm.transactionReference AS transaction_reference,
                        sm.transactionDate AS transaction_date,
                        sm.pkId AS pk_id,
                        ws.pkId AS from_warehouse_id,
                        ws.warehouseName AS warehouse_name
                        ')
                ->from("StockMaster", "sm")
                ->join("sm.fromWarehouse", "ws")
                ->where("sm.createdBy = " . $this->_user_id)
                ->andWhere("ws.status = 1");

        if ($this->form_values['transaction_type_id'] == 1) {
            $str_sql->andWhere("sm.toWarehouse =  " . $this->_identity->getWarehouseId());
        } else {
            $str_sql->andWhere("sm.fromWarehouse = " . $this->_identity->getWarehouseId());
        }

        $str_sql->andWhere("sm.transactionType = " . $this->form_values['transaction_type_id'])
                ->andWhere("sm.draft = 1 ");
//echo $str_sql->getQuery()->getSql();
//exit;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            $warehouses = new Model_Warehouses();
            $arr_data['warehouse_name'] = $warehouses->getWarehouseNameByWarehouseId($row[0]['from_warehouse_id']);
            $arr_data['transaction_date'] = App_Controller_Functions::dateToUserFormat($row[0]['transaction_date']);
            $arr_data['transaction_number'] = $row[0]['transaction_number'];
            $arr_data['transaction_reference'] = $row[0]['transaction_reference'];
            $arr_data['stock_id'] = $row[0]['pk_id'];
            return $arr_data;
        } else {
            return false;
        }
    }

    public function getTempStocksList() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('
                        sm.transactionDate AS transaction_date,
                        sm.campaignId,
                        sd.pkId AS stock_detail_id,
                        sd.quantity,
                        vvm.pkId AS vvm_stage,
                        sb.pkId AS stock_batch_id,
                        sb.number,
                        sb.quantity as no_ofvials,
                        sb.unitPrice AS unit_price,
                        sb.productionDate AS production_date,
                        sb.expiryDate AS expiry_date,
                        ips.itemName AS item_name,
                        fw.warehouseName as from_warehouse,
                        tw.warehouseName as to_warehouse,
                        fw.pkId as from_warehouse_id,
                        tw.pkId as to_warehouse_id,
                        iu.itemUnitName AS item_unit_name,
                        sm.pkId AS stock_master_id,
                        sm.transactionNumber AS transaction_number,
                        sm.transactionReference AS transaction_reference,
                        a.pkId AS activity_id,
                        ips.numberOfDoses as description,
                        vt.vvmTypeName AS vvm_type_name,
                        vt.pkId AS vvm_type_id,
                        ic.pkId item_category
                        ')
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "sm")
                ->join("sm.fromWarehouse", "fw")
                ->join("sm.toWarehouse", "tw")
                ->join("sm.stakeholderActivity", "a")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->leftJoin("sb.vvmType", "vt")
                ->join("ips.itemUnit", "iu")
                ->join("ips.itemCategory", "ic")
                ->where("sd.temporary =  1")
                ->andWhere("sm.draft =  1")
                ->andWhere("fw.status =  1");
        if ($this->form_values['transaction_type_id'] == 1) {
            $str_sql->andWhere("sm.toWarehouse =  " . $this->_identity->getWarehouseId());
        } else {
            $str_sql->andWhere("sm.fromWarehouse = " . $this->_identity->getWarehouseId());
        }

        $str_sql->andWhere("sm.createdBy = " . $this->_user_id)
                ->andWhere("sm.transactionType = " . $this->form_values['transaction_type_id']);
       // echo $str_sql->getQuery()->getSql();
      //  exit;
//vvm_types.vvm_type_name as vvm_type,
//        ->leftJoin("stock_detail.VvmTypes vvm_types")
//echo $str_sql->getQuery()->getSql();
//echo $str_sql->getQuery()->getSql();

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return FALSE;
        }
    }

    public function updateStockMasterTemp($id, $comments = null) {
        $stock = $this->_table->find($id);
        $trans = $this->getTransactionNumber($stock->getTransactionType()->getPkId(), $stock->getTransactionDate()->format("d/m/Y"), $this->_identity->getWarehouseId(), $stock->getPkId());
        $stock->setDraft(0);
        $stock->setTransactionCounter($trans['id']);
        $stock->setTransactionNumber($trans['trans_no']);
        $stock->setComments($comments);

        $this->_em->persist($stock);
        $this->_em->flush();
        return $trans['trans_no'];
    }

    public function updateStockPeriod($id, $array) {
        $stock = $this->_table->find($id);

        if ($array['issue_period'] != 'custom') {
            list($issue_from, $issue_to) = explode("-", $array['issue_period']);
            $array['issue_from'] = $issue_from;
            $array['issue_to'] = $issue_to;
        }

        if (!empty($array['issue_from']) && !empty($array['issue_to'])) {
            $stock->setIssueFrom(new \DateTime(App_Controller_Functions::dateToDbFormat($array['issue_from'])));
            $stock->setIssueTo(new \DateTime(App_Controller_Functions::dateToDbFormat($array['issue_to'])));
            $this->_em->persist($stock);
            $this->_em->flush();
        }

        return true;
    }

    public function deleteReceive($id) {
        $stock_detail = $this->_em->getRepository("StockDetail")->find($id);
        /**
         * Delete relevent Adjustments if any
         */
        $stock_detail_adjustments = $this->_em->getRepository("StockDetail")->findBy(array("isReceived" => $id));
        if (count($stock_detail_adjustments) > 0) {
            foreach ($stock_detail_adjustments as $stk_dtl_adj) {
                $this->deleteAdjustment($stk_dtl_adj->getStockMaster()->getPkId());
            }
        }

        if (count($stock_detail) > 0) {
            $month = $stock_detail->getStockMaster()->getTransactionDate()->format("m");
            $year = $stock_detail->getStockMaster()->getTransactionDate()->format("Y");
            $item = $stock_detail->getStockBatch()->getItemPackSize()->getPkId();
            $warehouse = $stock_detail->getStockBatch()->getWarehouse()->getPkId();
            $user = $stock_detail->getStockMaster()->getCreatedBy()->getPkId();
            $batch_id = $stock_detail->getStockBatch()->getPkId();
            $master_id = $stock_detail->getStockMaster()->getPkId();
            $issue_detail_id = $stock_detail->getIsReceived();

            $this->_em->remove($stock_detail);
            $this->_em->flush();

            $issue_stock_detail = $this->_em->getRepository("StockDetail")->find($issue_detail_id);
            if (count($issue_stock_detail) > 0) {
                $issue_stock_detail->setIsReceived(0);
                $this->_em->persist($issue_stock_detail);
                $this->_em->flush();
            }

            $placements = $this->_em->getRepository("Placements")->findBy(array("stockDetail" => $id));
            if (count($placements) > 0) {
                foreach ($placements as $remplacements) {
                    $this->_em->remove($remplacements);
                }
                $this->_em->flush();
            }

            $stock_batch = new Model_StockBatch;
            $stock_batch->adjustQuantityByWarehouse($batch_id, $this->_identity->getWarehouseId());

            $this->deleteStockMaster($master_id);

            $warehouse_data = new Model_WarehousesData();
            $warehouse_data->form_values['report_month'] = $month;
            $warehouse_data->form_values['report_year'] = $year;
            $warehouse_data->form_values['item_id'] = $item;
            $warehouse_data->form_values['warehouse_id'] = $warehouse;
            $warehouse_data->form_values['created_by'] = $user;
            $warehouse_data->adjustStockReport();
            return true;
        }

        return false;

        /* $stock_batch = new Model_StockBatch;
          $stock_detail = new Model_StockDetail();
          $warehouse_data = new Model_WarehousesData();

          $params = $warehouse_data->getStockReportParams($id);
          $result = $stock_detail->getQuantityById($id);
          $del = $stock_detail->deleteStockDetail($id);

          $stock_master_id = $result['stock_master_id'];
          $qty = $result['quantity'];
          $batch_id = $result['stock_batch_id'];
          $bQty_r = $stock_batch->getBatchQuantityById($batch_id);

          $bQty = $bQty_r['0']['quantity'];

          if ($bQty == $qty) {
          $stock_batch->deleteStockBatch($batch_id);
          } else if ($bQty > $qty) {
          $stock_batch->adjustQuantityByWarehouse($batch_id, $this->_identity->getWarehouseId());
          }

          $s_id = $stock_master_id;
          $this->deleteStockMaster($s_id);

          $warehouse_data->form_values['report_month'] = $params['0']['in_month'];
          $warehouse_data->form_values['report_year'] = $params['0']['in_year'];
          $warehouse_data->form_values['item_id'] = $params['0']['itemPackSizeId'];
          $warehouse_data->form_values['warehouse_id'] = $params['0']['warehouseId'];
          $warehouse_data->form_values['created_by'] = $params['0']['createdBy'];
          $warehouse_data->adjustStockReport();

          if ($del) {
          return true;
          } else {
          return false;
          } */
    }

    public function getItemDetailFromStock() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sm.transactionDate as transaction_date,
                        ips.pkId as item_pack_size_id,
                        sb.expiryDate as expiry_date,
                        sd.quantity,
                        ips.numberOfDoses AS doses_per_unit
                        ')
                ->from("StockDetail", "sd")
                ->innerJoin("sd.stockMaster", "sm")
                ->innerJoin("sd.stockBatch", "sb")
                ->innerJoin("sb.itemPackSize", "ips")
                ->where("sm.pkId = ?1 ");

        $str_sql->setParameter(1, $this->form_values['pk_id']);
        if ($this->form_values['from'] == 'wh') {
            $str_sql->andWhere("sd.isReceived = 1 ");
        }
        $rs = $str_sql->getQuery()->getResult();
        if (!empty($rs) && count($rs) > 0) {
            foreach ($rs as $row) {
                $array[] = array(
                    'transaction_date' => $row['transaction_date'],
                    'item_id' => $row['item_pack_size_id'],
                    'quantity' => $row['quantity'] * $row['doses_per_unit'],
                    'expiry_date' => $row['expiry_date']
                );
            }
            return $array;
        } else {
            return FALSE;
        }
    }

    public function getAllItemStock() {
        $wh_id = $this->_identity->getWarehouseId();
        $where = array();

        if (!empty($this->form_values['number'])) {
            switch ($this->form_values['searchby']) {
                case 1:
                    $where[] = "s.transactionNumber = '" . $this->form_values['number'] . "'";
                    break;
                case 2:
                    $where[] = "s.transactionReference = '" . $this->form_values['number'] . "'";
                    break;
                case 3:
                    $where[] = "b.number = '" . $this->form_values['number'] . "'";
                    break;
            }
        }

        if (!empty($this->form_values['warehouses'])) {
            $where[] = "s.fromWarehouse  = '" . $this->form_values['warehouses'] . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        $sa_join = false;
        if (!empty($this->form_values['activity_id'])) {
            $where[] = "s.stakeholderActivity = '" . $this->form_values['activity_id'] . "'";
            $sa_select = "a.pkId as activity_id,";
            $sa_join = true;
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }
        $where[] = "w.status=1";
        $where[] = "s.transactionType=1";
        $where[] = "b.warehouse = $wh_id";
        $where[] = "sd.temporary=0";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "w.warehouseName,b.number,w.pkId as fromWarehouseId,"
                        . "b.expiryDate,sd.quantity,"
                        . "i.itemUnitName,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName,"
                        . $sa_select
                        . "p.numberOfDoses as description")
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("s.fromWarehouse", "w")
                ->join("b.itemPackSize", "p");
        if ($sa_join) {
            $str_sql->join("s.stakeholderActivity", "a");
        }
        $str_sql->join("p.itemUnit", "i")
                ->where($where_s)
                ->orderBy("s.transactionNumber", "ASC");


        $row = $str_sql->getQuery()->getResult();
        $str_sql->getQuery()->getSql();

        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAllItem() {
        $wh_id = $this->_identity->getWarehouseId();
//     $str_sql = $this->_em->createQueryBuilder()
//     ->select("sd.pkId as detailId,s.transactionDate,"
//     . " s.pkId,s.transactionNumber,"
//     . "b.number,"
//     . "sd.quantity as qty,"
//     . "p.itemName")
//      ->from("StockDetail", "sd")
//      ->join("sd.stockMaster", "s")
//      ->join("sd.stockBatch", "b")
//      ->join("b.itemPackSize", "p")
//      ->where("p.itemCategory =" . Model_ItemCategories::NONVACCINES);
//       echo $str_sql = "SELECT
//stock_master.transaction_number,
//stock_master.transaction_date,
//stock_detail.quantity AS quantity,
//stock_detail.pk_id as detail_id,
//stock_detail.stock_batch_id as batch_id,
//stock_batch.number,
//Sum(placements.quantity) AS plc_qty,
//item_pack_sizes.item_name,
//stakeholder_item_pack_sizes.quantity_per_pack as quantity_per_pack
//FROM
//stock_master
//INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
//INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//INNER JOIN placements ON placements.stock_batch_id = stock_batch.pk_id AND placements.stock_detail_id = stock_detail.pk_id
//INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//WHERE
//stock_master.transaction_type_id =" . Model_TransactionTypes::TRANSACTION_RECIEVE . " AND
//stock_master.to_warehouse_id =" . $wh_id . " AND item_pack_sizes.item_category_id IN (" . Model_ItemCategories::NONVACCINES . "," . Model_ItemCategories::DILUENT . ")
//GROUP BY
//placements.stock_batch_id";exit;

        $str_sql = "SELECT
	stock_master.transaction_number,
	stock_master.transaction_date,
	stock_detail.quantity AS quantity,
	stock_detail.pk_id AS detail_id,
	stock_detail.stock_batch_id AS batch_id,
	stock_batch.number,
	GetPlaced(stock_detail.pk_id) AS plc_qty,
	item_pack_sizes.item_name,
	stakeholder_item_pack_sizes.quantity_per_pack AS quantity_per_pack
FROM
stock_master
INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
INNER JOIN stakeholder_item_pack_sizes ON stakeholder_item_pack_sizes.pk_id = stock_batch.stakeholder_item_pack_size_id
WHERE
stock_master.transaction_type_id =" . Model_TransactionTypes::TRANSACTION_RECIEVE . " AND
stock_master.to_warehouse_id =" . $wh_id . " AND item_pack_sizes.item_category_id IN (" . Model_ItemCategories::NONVACCINES . "," . Model_ItemCategories::DILUENT . ")";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
//return $result;
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }



//        echo $str_sql->getQuery()->getSql();
//        $result = $str_sql->getQuery()->getResult();
//
//        return $result;
    }

    public function getAllItemVaccines() {
        $from_date = Zend_Registry::get('api_from_date');
        $to_date = date("Y-m");

        $wh_id = $this->_identity->getWarehouseId();
        $str_sql = "SELECT
                            stock_master.transaction_number,
                            stock_master.transaction_date,
                            stock_master.transaction_type_id,
                            stock_detail.quantity AS quantity,
                            stock_detail.pk_id AS detail_id,
                            stock_master.pk_id AS master_id,
                            stock_detail.stock_batch_id AS batch_id,
                            stock_batch.number,
                            GetPlaced(stock_detail.pk_id) AS plc_qty,
                            item_pack_sizes.item_name,
                            stakeholder_item_pack_sizes.quantity_per_pack AS quantity_per_pack
                    FROM
                    stock_master
                    INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
                    INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    INNER JOIN stakeholder_item_pack_sizes ON stakeholder_item_pack_sizes.pk_id = stock_batch.stakeholder_item_pack_size_id
                    WHERE
                    stock_master.transaction_type_id IN (" . Model_TransactionTypes::TRANSACTION_RECIEVE . "," . Model_TransactionTypes::LOST_RECOVERED . "," . Model_TransactionTypes::PHYSICALLY_FOUND . ") AND
                    stock_master.to_warehouse_id =" . $wh_id . " AND item_pack_sizes.item_category_id IN (" . Model_ItemCategories::VACCINES . ")";
        $str_sql .= " AND DATE_FORMAT(stock_master.transaction_date,'%Y-%m') BETWEEN '$from_date' AND '$to_date'";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();

        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getTempStockIssue() {
        $wh_id = $this->_identity->getWarehouseId();
        if ($this->form_values['searchby'] == 1) {
            $tranNo = 1;
        } else if ($this->form_values['searchby'] == 2) {
            $tranRef = 1;
        } else if ($this->form_values['searchby'] == 3) {
            $batchNo = 1;
        }

        if (!empty($tranNo)) {
            $where[] = "s.transactionNumber like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($batchNo)) {
            $where[] = "b.number like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($tranRef)) {
            $where[] = "s.transactionReference like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['warehouses'])) {
            $where[] = "s.toWarehouse  = '" . $this->form_values['warehouses'] . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d')  BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }

        $where[] = "s.transactionType=2";
        $where[] = "b.warehouse = $wh_id";
        $where[] = "sd.temporary=0";
        $where[] = "w.status=1";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,abs(sd.quantity) as quantity,"
                        . "i.itemUnitName,"
                        . "sd.pkId as detailId,"
                        . "p.pkId as packSizeId,"
                        . "p.itemName, "
                        . "p.numberOfDoses as description, IF(p.vvmGroup=1,vvm.pkId,vvm.vvmStageValue) vvmStage")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.warehouse", "w")
                ->join("s.toWarehouse", "tw")
                ->join("b.itemPackSize", "p")
                ->join("p.itemUnit", "i")
                ->where("$where_s")
                ->orderBy("s.transactionDate,p.itemName,tw.warehouseName");
//echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getTempStockReceive() {
        $wh_id = $this->_identity->getWarehouseId();
        if ($this->form_values['searchby'] == 1) {
            $tranNo = 1;
        } else if ($this->form_values['searchby'] == 2) {
            $tranRef = 1;
        } else if ($this->form_values['searchby'] == 3) {
            $batchNo = 1;
        }

        if (!empty($tranNo)) {
            $where[] = "s.transactionNumber like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($batchNo)) {
            $where[] = "b.number like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($tranRef)) {
            $where[] = "s.transactionReference like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['warehouses'])) {
            $where[] = "s.toWarehouse  = '" . $this->form_values['warehouses'] . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d')  BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }

        $where[] = "s.transactionType=1";
        $where[] = "b.warehouse = $wh_id";
        $where[] = "sd.temporary=0";
        $where[] = "w.status=1";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,s.pkId,s.transactionNumber,"
                        . "s.transactionReference,tw.warehouseName,b.number,"
                        . "b.expiryDate,ABS(sd.quantity) as quantity,"
                        . "i.itemUnitName,sd.pkId as detailId,"
                        . "p.pkId as packSizeId,p.itemName,"
                        . "p.numberOfDoses as description,IF(p.vvmGroup=1,vvm.pkId,vvm.vvmStageValue) vvmStage")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.warehouse", "w")
                ->join("s.fromWarehouse", "tw")
                ->join("b.itemPackSize", "p")
                ->join("p.itemUnit", "i")
                ->where("$where_s")
                ->orderBy("s.transactionDate,p.itemName,tw.warehouseName");
        //echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getTempStockIssueSummary($type) {
        $wh_id = $this->_identity->getWarehouseId();

        if ($type == 'loc') {
            $groupBy = 'tw.pkId, p.itemName, s.transactionDate';
//  $orderBy = " 'w.warehouseName, s.transactionDate' , 'ASC' ";
        } else if ($type == 'prod') {
            $groupBy = 'p.itemName, tw.pkId, s.transactionDate';
// $orderBy = " 'p.itemName, s.transactionDate' , 'ASC' ";
        }

        if ($this->form_values['searchby'] == 1) {
            $tranNo = 1;
        } else if ($this->form_values['searchby'] == 2) {
            $tranRef = 1;
        } else if ($this->form_values['searchby'] == 3) {
            $batchNo = 1;
        } else {
            $tranNo = "";
            $batchNo = "";
            $tranRef = "";
        }

        if (!empty($tranNo)) {
            $where[] = "s.transactionNumber like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($batchNo)) {
            $where[] = "b.number like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($tranRef)) {
            $where[] = "s.transactionReference like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['warehouses'])) {
            $where[] = "s.toWarehouse  = '" . $this->form_values['warehouses'] . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }

        $where[] = "s.transactionType=2";
        $where[] = "b.warehouse = $wh_id";
        $where[] = "sd.temporary=0";
        $where[] = "w.status=1";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,SUM(ABS(sd.quantity)) as quantity,"
                        . "i.itemUnitName,"
                        . "sd.pkId as detailId,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName,"
                        . "p.numberOfDoses as description,"
                        . "v.vvmTypeName, vvm.pkId as vvmStage, vvm.vvmStageValue")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.warehouse", "w")
                ->join("s.toWarehouse", "tw")
                ->join("b.itemPackSize", "p")
                ->leftjoin("p.itemUnit", "i")
                ->leftjoin("b.vvmType", "v")
                ->where("$where_s")
                ->groupBy("$groupBy")
                ->orderBy("s.transactionDate,tw.warehouseName");
//echo $str_sql->getQuery()->getSql();

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getTempStockReceiveSummary($type) {
        $wh_id = $this->_identity->getWarehouseId();

        if ($type == 'loc') {
            $groupBy = 'w.warehouseName, p.itemName, s.transactionDate';
//  $orderBy = " 'w.warehouseName, s.transactionDate' , 'ASC' ";
        } else if ($type == 'prod') {
            $groupBy = 'p.itemName, w.warehouseName, s.transactionDate';
// $orderBy = " 'p.itemName, s.transactionDate' , 'ASC' ";
        }

        if ($this->form_values['searchby'] == 1) {
            $tranNo = 1;
        } else if ($this->form_values['searchby'] == 2) {
            $tranRef = 1;
        } else if ($this->form_values['searchby'] == 3) {
            $batchNo = 1;
        } else {
            $tranNo = "";
            $batchNo = "";
            $tranRef = "";
        }

        if (!empty($tranNo)) {
            $where[] = "s.transactionNumber like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($batchNo)) {
            $where[] = "b.number like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($tranRef)) {
            $where[] = "s.transactionReference like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['warehouses'])) {
            $where[] = "s.fromWarehouse  = '" . $this->form_values['warehouses'] . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }

        $where[] = "s.transactionType=1";
        $where[] = "b.warehouse = $wh_id";
        $where[] = "sd.temporary=0";
        $where[] = "w.status=1";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,SUM(ABS(sd.quantity)) as quantity,"
                        . "i.itemUnitName,"
                        . "sd.pkId as detailId,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName,"
                        . "p.numberOfDoses as description,"
                        . "v.vvmTypeName, vvm.pkId as vvmStage, vvm.vvmStageValue")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.warehouse", "w")
                ->join("s.fromWarehouse", "tw")
                ->join("b.itemPackSize", "p")
                ->leftjoin("p.itemUnit", "i")
                ->leftjoin("b.vvmType", "v")
                ->where("$where_s")
                ->groupBy("$groupBy");
// ->orderBy("$orderBy");
        $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function stockIssueSearch() {

        $wh_id = $this->_identity->getWarehouseId();
        $sa_select = '';

        if ($this->form_values['searchby'] == 1) {
            $tranNo = 1;
        } else if ($this->form_values['searchby'] == 2) {
            $tranRef = 1;
        } else if ($this->form_values['searchby'] == 3) {
            $batchNo = 1;
        } else {
            $tranNo = "";
            $batchNo = "";
            $tranRef = "";
        }
        if (!empty($tranNo)) {
            $where[] = "s.transactionNumber like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($batchNo)) {
            $where[] = "b.number like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($tranRef)) {
            $where[] = "s.transactionReference like '" . $this->form_values['number'] . "%'";
        }
        if (!empty($this->form_values['warehouses'])) {
            $where[] = "s.toWarehouse  = '" . $this->form_values['warehouses'] . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        $sa_join = false;
        if (!empty($this->form_values['activity_id'])) {
            $where[] = "s.stakeholderActivity = '" . $this->form_values['activity_id'] . "'";
            $sa_select = "a.pkId as activity_id,";
            $sa_join = true;
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }

        $where[] = "s.transactionType=2";
        $where[] = "b.warehouse = $wh_id";
        $where[] = "sd.temporary=0";
        $where[] = "w.status=1";

        if ($this->form_values['voucher_type'] == 2) {
            $where[] = "s.actionType = 2";
            $where[] = "sd.actionType = 3";
            $master = "s.masterId as pkId";
            $detail = "sd.detailId";
        } else {
            $master = "s.pkId";
            $detail = "sd.pkId";
        }

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,"
                . " $master, s.transactionNumber,"
                . "s.transactionReference,"
                . "w.warehouseName,b.number,"
                . "b.expiryDate,ABS(sd.quantity) as quantity,"
                . "i.itemUnitName,"
                . $sa_select
                . "$detail as detailId,"
                . "p.pkId as itemPackSizeId,"
                . "p.itemName,DATE_FORMAT(s.createdDate,'%d/%m/%Y') createdDate");

        if ($this->form_values['voucher_type'] == 2) {
            $str_sql->from("StockDetailHistory", "sd")
                    ->join("sd.stockMasterHistory", "s")
                    ->join("sd.stockBatch", "b");
        } else {
            $str_sql->from("StockDetail", "sd")
                    ->join("sd.stockMaster", "s")
                    ->join("sd.stockBatch", "b");
        }

        $str_sql->join("s.toWarehouse", "w")
                ->join("b.itemPackSize", "p");

        if ($sa_join) {
            $str_sql->join("s.stakeholderActivity", "a");
        }
        $str_sql->join("p.itemUnit", "i")
                ->where($where_s)
                ->orderBy("s.transactionNumber");
        $str_sql->getQuery()->getSql();
//echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function targetIssuanceSearch() {

        if (!empty($this->form_values['month'])) {
            $m = $this->form_values['month'];
        } else {
            $m = 0;
        }
        if (!empty($this->form_values['year'])) {
            $y = $this->form_values['year'];
        } else {
            $y = 0;
        }
        if (!empty($this->form_values['warehouse_id'])) {
            $warehouse_id = $this->form_values['warehouse_id'];
        } else {
            $warehouse_id = 0;
        }

        $str_qry = "SELECT
                        i5_.item_name AS product,
                        epi_amc.amc AS 1_month_requirement,
                        epi_amc.amc * $m AS n_month_requirement,
                        i5_.number_of_doses,
                        ((Sum(ABS(s3_.quantity))) * i5_.number_of_doses) AS issuance,
                        ((epi_amc.amc * $m) - (Sum(ABS(s3_.quantity)))  * i5_.number_of_doses) AS n_month_balance
                    FROM
                        stock_detail AS s3_
                        INNER JOIN stock_master AS s0_ ON s3_.stock_master_id = s0_.pk_id
                        INNER JOIN stock_batch AS s2_ ON s3_.stock_batch_id = s2_.pk_id
                        INNER JOIN warehouses AS w1_ ON s0_.to_warehouse_id = w1_.pk_id
                        INNER JOIN item_pack_sizes AS i5_ ON s2_.item_pack_size_id = i5_.pk_id
                        INNER JOIN item_units AS i4_ ON i5_.item_unit_id = i4_.pk_id
                        INNER JOIN epi_amc ON i5_.pk_id = epi_amc.item_id
                        AND w1_.pk_id = epi_amc.warehouse_id
                    WHERE
                        DATE_FORMAT(s0_.transaction_date, '%Y-%m') BETWEEN  '$y-01' AND '$y-$m'
                        AND s0_.transaction_type_id = 2
                        AND w1_.pk_id = $warehouse_id
                        AND s3_.`temporary` = 0
                        AND w1_.`status` = 1
                        AND i5_.item_category_id = 1
                    GROUP BY
                        i5_.item_name";
        //exit;

        $this->_em = Zend_Registry::get('doctrine');
        $row = $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function stockAdjustment() {
        $wh_id = $this->_identity->getWarehouseId();

        if (!empty($this->form_values['adjustment_no'])) {
            $where[] = "s.transactionNumber = '" . $this->form_values['adjustment_no'] . "'";
        }
        if (!empty($this->form_values['adjustment_type'])) {
            $where[] = "s.transactionType = '" . $this->form_values['adjustment_type'] . "'";
        }
        if (!empty($wh_id)) {
            $where[] = "s.fromWarehouse  = '" . $wh_id . "'";
        }
        if (!empty($wh_id)) {
            $where[] = "s.toWarehouse   = '" . $wh_id . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        if (!empty($this->form_values['batch_no']) && $this->form_values['batch_no'] != 'null') {
            $where[] = "b.pkId = '" . $this->form_values['batch_no'] . "'";
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "s.transactionDate BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        }
        $where[] = "s.transactionType > 2";
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "s.comments,"
                        . "b.number,"
                        . "b.expiryDate,"
                        . "sd.quantity,"
                        . "sd.pkId as detailId,"
                        . "sd.quantity,"
                        . "p.itemName,"
                        . "p.numberOfDoses,"
                        . "t.transactionTypeName")
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.itemPackSize", "p")
                ->join("s.transactionType", "t")
                ->where($where_s);
        //echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getAdjustedProducts() {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "
            SELECT DISTINCT
                i4_.item_name AS itemName,
                i4_.pk_id AS pkId

            FROM
                stock_detail s2_
                    INNER JOIN stock_master s0_ ON s2_.stock_master_id = s0_.pk_id
                    INNER JOIN stock_batch s1_ ON s2_.stock_batch_id = s1_.pk_id
                    INNER JOIN item_pack_sizes i4_ ON s1_.item_pack_size_id = i4_.pk_id
                    INNER JOIN item_units i3_ ON i4_.item_unit_id = i3_.pk_id
                    INNER JOIN transaction_types t5_ ON s0_.transaction_type_id = t5_.pk_id
            WHERE
                    s0_.from_warehouse_id = '$wh_id'
                    AND s0_.to_warehouse_id = '$wh_id'
                    AND s0_.transaction_type_id > 2";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function stockAdjustmentSearch() {
        $wh_id = $this->_identity->getWarehouseId();
        if (!empty($this->form_values['adjustment_no'])) {
            $where[] = "s.transactionNumber = '" . $this->form_values['adjustment_no'] . "'";
        }
        if (!empty($this->form_values['adjustment_type'])) {
            $where[] = "s.transactionType = '" . $this->form_values['adjustment_type'] . "'";
        }
        if (!empty($wh_id)) {
            $where[] = "s.fromWarehouse  = '" . $wh_id . "'";
        }
        if (!empty($wh_id)) {
            $where[] = "s.toWarehouse   = '" . $wh_id . "'";
        }
        if (!empty($this->form_values['product'])) {
            $where[] = "b.itemPackSize = '" . $this->form_values['product'] . "'";
        }
        if (!empty($this->form_values['batch_no'])) {
            $where[] = "b.pkId = '" . $this->form_values['batch_no'] . "'";
        }
        if (!empty($this->form_values['expiry_date'])) {
            $where[] = "DATE_FORMAT(b.expiryDate,'%Y-%m-%d') = '" . App_Controller_Functions::dateToDbFormat($this->form_values['expiry_date']) . "'";
        }
        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $where[] = "DATE_FORMAT(s.transactionDate,'%Y-%m-%d') BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }
        $where[] = "s.transactionType > 2";
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "s.comments,"
                        . "b.number,"
                        . "b.expiryDate,"
                        . "sd.quantity,"
                        . "i.itemUnitName,"
                        . "sd.pkId as detailId,"
                        . "sd.quantity,"
                        . "p.pkId as packSizeId,"
                        . "p.itemName,"
                        . "t.transactionTypeName")
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.itemPackSize", "p")
                ->join("p.itemUnit", "i")
                ->join("s.transactionType", "t")
                ->where($where_s)
                ->orderBy("s.transactionNumber", "ASC");

        $row = $str_sql->getQuery()->getResult();
        //echo $str_sql->getQuery()->getSql();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function expiredStockReport() {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "SELECT
	i4_.item_name,
                ABS(SUM(s2_.quantity)) AS vails,
                DATE_FORMAT(s1_.expiry_date,'%d/%m/%Y') expiry_date,
                transaction_types.transaction_type_name as reason,
                s1_.number,
                ABS(SUM(s2_.quantity)) * i4_.number_of_doses AS doses
        FROM
                stock_detail s2_
        INNER JOIN stock_master s0_ ON s2_.stock_master_id = s0_.pk_id
        INNER JOIN stock_batch s1_ ON s2_.stock_batch_id = s1_.pk_id
        INNER JOIN item_pack_sizes i4_ ON s1_.item_pack_size_id = i4_.pk_id
        INNER JOIN transaction_types ON s0_.transaction_type_id = transaction_types.pk_id
        WHERE
        s1_.warehouse_id = $wh_id AND
        s0_.transaction_type_id IN (" . $this->form_values['adjustment_type'] . ") AND
        DATE_FORMAT(s0_.transaction_date,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'
        GROUP BY
                s1_.item_pack_size_id,
                s1_.pk_id,
                s1_.expiry_date
        ORDER BY
                i4_.list_rank ASC";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getStocksReceiveList($type = 1) {
        if (empty($type)) {
            $type = 1;
        }

        $str_sql = "SELECT
            s0_.pk_id AS detailId,
            s1_.transaction_date AS transactionDate,
            s1_.transaction_number AS transactionNumber,
            s1_.transaction_reference AS transactionReference,
            s1_.pk_id AS masterId,
            s1_.comments,
            w2_.warehouse_name AS warehouseName,
            s3_.number AS number,
            s3_.expiry_date AS expiryDate,
            s3_.production_date AS productionDate,
            s0_.quantity AS quantity,
            i4_.item_unit_name AS itemUnitName,
            i5_.pk_id AS itemPackSizeId,
            i5_.item_name AS itemName,
            i5_.number_of_doses AS description,
            v6_.vvm_type_name AS vvmTypeName,
            stock_master.parent_id AS stockMasterParentId,
            stakeholder_activities.activity,
            IF(i5_.vvm_group_id = 1, vvm_stages.pk_id, vvm_stages.vvm_stage_value) as vvmStage
        FROM
        stock_detail AS s0_
            INNER JOIN stock_master AS s1_ ON s0_.stock_master_id = s1_.pk_id
            INNER JOIN stock_batch AS s3_ ON s0_.stock_batch_id = s3_.pk_id
            INNER JOIN warehouses AS w2_ ON s3_.warehouse_id = w2_.pk_id
            INNER JOIN item_pack_sizes AS i5_ ON s3_.item_pack_size_id = i5_.pk_id
            INNER JOIN item_units AS i4_ ON i5_.item_unit_id = i4_.pk_id
            LEFT JOIN vvm_types AS v6_ ON s3_.vvm_type_id = v6_.pk_id
            LEFT JOIN stock_master ON s1_.parent_id = stock_master.pk_id
            LEFT JOIN stakeholder_activities ON s1_.stakeholder_activity_id = stakeholder_activities.pk_id
            LEFT JOIN vvm_stages ON s0_.vvm_stage = vvm_stages.pk_id
        WHERE
            s1_.transaction_type_id = $type
            AND w2_.status = 1
            AND s1_.pk_id = " . $this->form_values['pk_id'] . "
        ORDER BY
            s1_.transaction_number ASC";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getStocksReceiveListShipment() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,"
                        . "s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,"
                        . "w.warehouseName,"
                        . "fw.warehouseName as warehouse_name,"
                        . "b.number,"
                        . "b.expiryDate,"
                        . "b.productionDate,"
                        . "sd.quantity,"
                        . "i.itemUnitName,"
                        . "p.pkId AS itemPackSizeId,"
                        . "p.itemName,"
                        . "p.numberOfDoses AS description,"
                        . "v.vvmTypeName, sa.activity,IF(p.vvmGroup = 1, vvm.pkId, vvm.vvmStageValue) as vvmStage")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->leftJoin("s.stakeholderActivity", "sa")
                ->join("sd.stockBatch", "b")
                ->join("s.fromWarehouse", 'fw')
                ->join("b.warehouse", "w")
                ->join("b.itemPackSize", "p")
                ->join("p.itemUnit", "i")
                ->leftJoin("b.vvmType", "v")
                ->where("s.transactionType = 1")
                ->andWhere("w.status=1")
                ->andWhere("s.toWarehouse = " . $this->form_values['warehouse_id'])
                ->andWhere("s.pkId=" . $this->form_values['pk_id'])
                ->orderBy("s.transactionNumber", "ASC");
        //  echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getStocksIssueList() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,"
                        . "s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,s.comments,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,"
                        . "b.productionDate,"
                        . "p.numberOfDoses,"
                        . "ABS(sd.quantity) as quantity,"
                        . "i.itemUnitName,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName, "
                        . "p.numberOfDoses AS description,"
                        . "v.vvmTypeName,"
                        . "s.dispatchBy,IF(p.vvmGroup=1,vvm.pkId,vvm.vvmStageValue) vvmStage,"
                        . "stk.stakeholderName, sa.activity, DATE_FORMAT(s.issueFrom,'%d/%m/%Y') as issue_from, DATE_FORMAT(s.issueTo,'%d/%m/%Y') as issue_to")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("s.stakeholderActivity", "sa")
                ->join("sd.stockBatch", "b")
                ->join("b.stakeholderItemPackSize", "sips")
                ->join("sips.stakeholder", "stk")
                ->join("s.toWarehouse", "tw")
                ->join("b.warehouse", "w")
                ->join("b.itemPackSize", "p")
                ->join("p.itemCategory", "ic")
                ->join("p.itemUnit", "i")
                ->leftJoin("b.vvmType", "v")
                ->where("s.transactionType = 2 ")
                ->andWhere("w.status=1")
                ->andWhere("s.pkId=" . $this->form_values['pk_id'])
                ->orderBy("s.transactionNumber,p.listRank, ic.pkId", "ASC");

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getStocksIssueListShipment() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,"
                        . "s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,s.comments,w.warehouseName as warehouse_name,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,"
                        . "b.productionDate,"
                        . "p.numberOfDoses,"
                        . "ABS(sd.quantity) as quantity,"
                        . "i.itemUnitName,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName, "
                        . "p.numberOfDoses AS description,"
                        . "v.vvmTypeName,"
                        . "s.dispatchBy,"
                        . "stk.stakeholderName, sa.activity,IF(p.vvmGroup=1,vvm.pkId,vvm.vvmStageValue) vvmStage")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("s.stakeholderActivity", "sa")
                ->join("sd.stockBatch", "b")
                ->join("b.stakeholderItemPackSize", "sips")
                ->join("sips.stakeholder", "stk")
                ->join("s.toWarehouse", "tw")
                ->join("b.warehouse", "w")
                ->join("b.itemPackSize", "p")
                ->join("p.itemUnit", "i")
                ->leftJoin("b.vvmType", "v")
                ->where("s.transactionType = 2 ")
                ->andWhere("w.status=1")
                ->andWhere("s.fromWarehouse= " . $this->form_values['warehouse_id'])
                ->andWhere("s.pkId=" . $this->form_values['pk_id'])
                ->orderBy("s.transactionNumber", "ASC");
//echo $str_sql->getQuery()->getSql();
//exit;
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getStocksIssueCancelList() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,"
                        . "vvm.pkId as vvmStage,vvm.vvmStageValue,"
                        . "s.createdDate as transactionDate,"
                        . "s.masterId as pkId,s.transactionNumber,"
                        . "s.transactionReference,s.comments,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,"
                        . "b.productionDate,"
                        . "p.numberOfDoses,"
                        . "ABS(sd.quantity) as quantity,"
                        . "i.itemUnitName,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName, "
                        . "p.numberOfDoses AS description,"
                        . "v.vvmTypeName,"
                        . "stk.stakeholderName, sa.activity")
                ->from("StockDetailHistory", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMasterHistory", "s")
                ->join("s.stakeholderActivity", "sa")
                ->join("sd.stockBatch", "b")
                ->join("b.stakeholderItemPackSize", "sips")
                ->join("sips.stakeholder", "stk")
                ->join("s.toWarehouse", "tw")
                ->join("b.warehouse", "w")
                ->join("b.itemPackSize", "p")
                ->join("p.itemCategory", "ic")
                ->join("p.itemUnit", "i")
                ->leftJoin("b.vvmType", "v")
                ->where("s.transactionType = 2 ")
                ->andWhere("w.status=1")
                ->andWhere("s.actionType=2")
                ->andWhere("sd.actionType=3")
                ->andWhere("s.masterId=" . $this->form_values['pk_id'])
                ->orderBy("s.transactionNumber,p.listRank, ic.pkId", "ASC");

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getStocksPendingListShipment() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,"
                        . "vvm.pkId as vvmStage,vvm.vvmStageValue,"
                        . "s.transactionDate,"
                        . " s.pkId,s.transactionNumber,"
                        . "s.transactionReference,s.comments,w.warehouseName as warehouse_name,"
                        . "tw.warehouseName,b.number,"
                        . "b.expiryDate,"
                        . "b.productionDate,"
                        . "p.numberOfDoses,"
                        . "ABS(sd.quantity) as quantity,"
                        . "i.itemUnitName,"
                        . "p.pkId as itemPackSizeId,"
                        . "p.itemName, "
                        . "p.numberOfDoses AS description,"
                        . "v.vvmTypeName,"
                        . "s.dispatchBy,"
                        . "stk.stakeholderName")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.stakeholderItemPackSize", "sips")
                ->join("sips.stakeholder", "stk")
                ->join("s.toWarehouse", "tw")
                ->join("b.warehouse", "w")
                ->join("b.itemPackSize", "p")
                ->join("p.itemUnit", "i")
                ->join("b.vvmType", "v")
                ->where("s.transactionType = 2 ")
                ->andWhere("w.status=1")
                ->andWhere("s.toWarehouse= " . $this->form_values['warehouse_id'])
                ->andWhere("s.pkId=" . $this->form_values['pk_id'])
                ->orderBy("s.transactionNumber", "ASC");

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

//    public function getWarehouseLevelByStockID($stock_id) {
//        $str_sql = $this->_em->createQueryBuilder()
//                ->select('
//			ws.pkId as to_warehouse_id,
//                        sb.pkId as batchId,
//                        sb.number,
//                        ips.pkId as itemPackSizeId,
//			gl.pkId as geo_level_id,
//                        ws.warehouseName as warehouse_name,
//                        gl.pkId as level, sm.transactionDate')
//                ->from("StockDetail", "sd")
//                //->from("StockMaster", "sm")
//                ->innerJoin("sd.stockMaster", "sm")
//                ->innerJoin("sd.stockBatch", "sb")
//                ->innerJoin("sb.itemPackSize", "ips")
//                ->innerJoin("sm.toWarehouse", "ws")
//                ->innerJoin("ws.stakeholderOffice", "sh")
//                ->innerJoin("sh.geoLevel", "gl")
//                ->where("sm.pkId = $stock_id");
//
//        $row = $str_sql->getQuery()->getResult();
//
//        if (!empty($row) && count($row) > 0) {
//            return array(
//                'uc_wh_id' => $row[0]['to_warehouse_id'],
//                'level' => $row[0]['geo_level_id'],
//                'transaction_date' => $row[0]['transactionDate'],
//                'batch_id' => $row[0]['batchId'],
//                'item_pack_size_id' => $row[0]['itemPackSizeId'],
//                'to_warehouse_id' => $row[0]['to_warehouse_id'],
//                'number' => $row[0]['number']
//            );
//        } else {
//            return FALSE;
//        }
//    }

    public function getWarehouseLevelByStockId($stock_master_id) {
        $str_record = $this->_em->getRepository("StockMaster")->find($stock_master_id);

        if (count($str_record) > 0) {
            return $str_record->getToWarehouse()->getStakeholderOffice()->getGeoLevel()->getPkId();
        } else {
            return false;
        }
    }

    public function autoReceiveData($stock_master_id) {
        if ($this->getWarehouseLevelByStockId($stock_master_id) == 6) {

            $master_result = $this->_em->getRepository("StockMaster")->find($stock_master_id);
            $trans_date = $master_result->getTransactionDate();
            $to_wh_id = $master_result->getToWarehouse()->getPkId();

            $new_date = $trans_date->format("d/m/Y H:i:s");
            $trans_no = $this->getTransactionNumber(1, $new_date);

            $new_master = new StockMaster();
            $new_master->setTransactionDate($trans_date);
            $new_master->setTransactionNumber($trans_no['trans_no']);
            $new_master->setTransactionCounter($trans_no['id']);
            $new_master->setTransactionReference($master_result->getTransactionReference());
            $new_master->setDraft(0);
            $new_master->setComments($master_result->getComments());
            $new_master->setParentId($stock_master_id);
            $new_master->setCampaignId($master_result->getCampaignId());
            $new_master->setCreatedDate($master_result->getCreatedDate());
            $new_master->setStakeholderActivity($master_result->getStakeholderActivity());
            $new_user_id = $this->getUserIdByWarehouse($to_wh_id);
            $new_master->setCreatedBy($new_user_id);
            $new_master->setFromWarehouse($master_result->getFromWarehouse());
            $new_master->setToWarehouse($master_result->getToWarehouse());
            $trans_type = $this->_em->getRepository("TransactionTypes")->find(1);
            $new_master->setTransactionType($trans_type);
            $this->_em->persist($new_master);
            $this->_em->flush();

            $detail_result = $this->_em->getRepository("StockDetail")->findBy(array("stockMaster" => $stock_master_id));
            if (count($detail_result) > 0) {

                foreach ($detail_result as $detail_row) {
                    $detail_id = $detail_row->getPkId();
                    $item_id = $detail_row->getStockBatch()->getItemPackSize()->getPkId();
                    $batch_number = $detail_row->getStockBatch()->getNumber();
                    $from_batch_id = $detail_row->getStockBatch()->getPkId();

                    $batch_result = $this->_em->getRepository("StockBatch")->findOneBy(array("itemPackSize" => $item_id, "warehouse" => $to_wh_id, "number" => $batch_number));
                    if (count($batch_result) > 0) {
                        $new_batch_id = $batch_result;
                    } else {
                        $from_batch_result = $this->_em->getRepository("StockBatch")->find($from_batch_id);
                        $obj_batch = new StockBatch();
                        $obj_batch->setNumber(strtoupper($from_batch_result->getNumber()));
                        $obj_batch->setBatchMasterId($from_batch_result->getBatchMasterId());
                        $obj_batch->setExpiryDate($from_batch_result->getExpiryDate());
                        $obj_batch->setUnitPrice($from_batch_result->getUnitPrice());
                        $obj_batch->setQuantity(0);
                        $obj_batch->setStatus("Running");
                        $obj_batch->setProductionDate($from_batch_result->getProductionDate());
                        $obj_batch->setLastUpdate($from_batch_result->getLastUpdate());
                        if ($from_batch_result->getStakeholderItemPackSize() != null) {
                            $obj_batch->setStakeholderItemPackSize($from_batch_result->getStakeholderItemPackSize());
                        }
                        $obj_batch->setItemPackSize($from_batch_result->getItemPackSize());
                        if ($from_batch_result->getVvmType() != null) {
                            $obj_batch->setVvmType($from_batch_result->getVvmType());
                        }
                        $to_wh = $this->_em->getRepository("Warehouses")->find($to_wh_id);
                        $obj_batch->setWarehouse($to_wh);
                        $this->_em->persist($obj_batch);
                        $this->_em->flush();

                        $new_batch_id = $obj_batch;
                    }

                    $obj_detail = new StockDetail();
                    $obj_detail->setQuantity(ABS($detail_row->getQuantity()));
                    $obj_detail->setTemporary(0);
                    $obj_detail->setVvmStage($detail_row->getVvmStage());
                    $obj_detail->setIsReceived($detail_id);
                    $obj_detail->setAdjustmentType(1);
                    $obj_detail->setItemUnit($detail_row->getItemUnit());
                    $obj_detail->setStockBatch($new_batch_id);
                    $obj_detail->setStockMaster($new_master);
                    $this->_em->persist($obj_detail);
                    $this->_em->flush();

                    $this->adjustQuantityByWarehouse($new_batch_id->getPkId(), $to_wh_id);
                }
            }

// STOP Auto Receive on 6th level
            /* $stock_master = new Model_StockMaster();
              $stock_master->form_values['pk_id'] = $stock_master_id;
              $result = $stock_master->getItemDetailFromStock();

              if ($result != FALSE) {
              foreach ($result as $stockdata) {
              $tdate = $stockdata['transaction_date'];
              $product = $stockdata['item_id'];
              $month = App_Controller_Functions::dateFormat($tdate, "first day of this month", "m");
              $year = App_Controller_Functions::dateFormat($tdate, "first day of this month", "Y");

              $newdate = App_Controller_Functions::dateFormat($tdate, "-1 month", "d/m/Y");

              $qty = abs($stockdata['quantity']);
              $wh_data = new Model_WarehousesData();
              $cboflastmonth = $wh_data->closingBalanceOfMonth(App_Controller_Functions::monthFromDate($newdate), App_Controller_Functions::yearFromDate($newdate), $to_wh_id, $product);
              $wh_data->form_values['reporting_start_date'] = $year . "-" . $month . "-01";
              $wh_data->form_values['item_id'] = $product;
              $wh_data->form_values['warehouse_id'] = $to_wh_id;
              $wh_data->form_values['opening_balance'] = $cboflastmonth;
              $wh_data->form_values['received_balance'] = $qty;
              $wh_data->form_values['issue_balance'] = '';
              $wh_data->form_values['closing_balance'] = ($cboflastmonth + $qty);
              $wh_data->form_values['created_by'] = $this->_user_id;
              $wh_data->form_values['created_on'] = date("d/m/Y");
              $wh_data->saveData();
              }
              } */

//$row2 = $this->_em->getConnection()->prepare("UPDATE stock_detail set is_received=1 WHERE stock_master_id = $stock_master_id");
//$row2->execute();
        }
        return true;
    }

    public function adjustQuantityByWarehouse($batch_id, $wh_id) {
        $row = $this->_em->getConnection()->prepare("SELECT AdjustQty($batch_id,$wh_id) from DUAL");
        $row->execute();
    }

    public function getUserIdByWarehouse($wh_id) {
        $wh = Zend_Registry::get('doctrine')->getRepository('WarehouseUsers')->findOneBy(array("warehouse" => $wh_id));
        if (count($wh) > 0) {
            return $wh->getUser();
        } else {
            return false;
        }
    }

    public function deleteStockMaster($id) {
        if (!$this->stockExists($id)) {
            $stock = $this->_table->find($id);
            $this->_em->remove($stock);
            $this->_em->flush();
            return true;
        }
    }

    public function getAdjLastID($from, $to) {
        if (!empty($tr_type) && $tr_type == 1) {
            $str = "s.toWarehouse='" . $this->_identity->getWarehouseId() . "'";
        } else {
            $str = "s.fromWarehouse ='" . $this->_identity->getWarehouseId() . "'";
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select("MAX(s.transactionCounter) as Maxtr")
                ->from("StockMaster", "s")
                ->where("s.transactionDate between '" . $from . "' and '" . $to . "'")
                ->andWhere("s.transactionType !=1 ")
                ->andWhere("s.transactionType !=2 ")
                ->andWhere($str);

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function addAjustment() {
        $wh_id = $this->_identity->getWarehouseId();
        $ref_no = '';
        $quantity = '';
        $comments = '';

        if (isset($this->form_values['adjustment_date']) && !empty($this->form_values['adjustment_date'])) {
            $adjustment_date = $this->form_values['adjustment_date'];
            list($dd, $mm, $yy) = explode("/", $adjustment_date);
        } else {
            $adjustment_date = date('m/d/Y');
            list($dd, $mm, $yy) = explode("/", $adjustment_date);
        }
        if (isset($this->form_values['ref_no']) && !empty($this->form_values['ref_no'])) {
            $ref_no = $this->form_values['ref_no'];
        }
        if (isset($this->form_values['product']) && !empty($this->form_values['product'])) {
            $product = $this->form_values['product'];
        }
        if (isset($this->form_values['batch_no']) && !empty($this->form_values['batch_no'])) {
            $batch_id = $this->form_values['batch_no'];
        }
        if (isset($this->form_values['available']) && !empty($this->form_values['available'])) {
            $available = $this->form_values['available'];
        }
        if (isset($this->form_values['adjustment_type']) && !empty($this->form_values['adjustment_type'])) {
            $type = $this->form_values['adjustment_type'];
        }
        if (isset($this->form_values['quantity']) && !empty($this->form_values['quantity'])) {
            $quantity = str_replace(',', '', $this->form_values['quantity']);
        }
        if (isset($this->form_values['comments']) && !empty($this->form_values['comments'])) {
            $comments = $this->form_values['comments'];
        }
        if (isset($this->form_values['item_unit_id']) && !empty($this->form_values['item_unit_id'])) {
            $unit = $this->form_values['item_unit_id'];
        }
        if (isset($this->form_values['vvm_stage']) && !empty($this->form_values['vvm_stage'])) {
            $vvm_stage = $this->form_values['vvm_stage'];
        }
        if (isset($this->form_values['purpose']) && !empty($this->form_values['purpose'])) {
            $purpose = $this->form_values['purpose'];
        }

        $stock_batch = $this->_em->getRepository('StockBatch')->find($batch_id);
        $tranaction_type = new Model_TransactionTypes();
        $type_nature = $tranaction_type->findById($type);
        $trans_nature = $type_nature[0]['nature'];

        if ($stock_batch->getQuantity() == 0 && $trans_nature == '-') {
            throw new Exception('NEGATIVE_OR_ZERO_QTY');
        }

        list($location, $old_vvm, $placed_qty) = explode("|", $this->form_values['location_id']);
        if ($trans_nature == '+') {
            $old_vvm = $this->form_values['vvm_stage'];
        }

        if ($quantity > $stock_batch->getQuantity() && $trans_nature == '-') {
            throw new Exception('ADJ_QTY_GREATER_BATCH_QTY');
        }

        if (!empty($placed_qty)) {
            if ($placed_qty < 0) {
                throw new Exception('PLCD_QTY_LESS_EQUAL_ZERO');
            }

            if ($placed_qty < $quantity && $trans_nature == '-') {
                throw new Exception('ADJ_QTY_LESS_EQUAL_PLCD_QTY');
            }
        }

        $stock_master = new StockMaster();
        $stock_master->setTransactionDate(new \DateTime($yy . "-" . $mm . "-" . $dd));
        $tran_type = $this->_em->getRepository('TransactionTypes')->find($type);
        $stock_master->setTransactionType($tran_type);
        $stock_master->setTransactionReference($ref_no);
        $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
        $stock_master->setFromWarehouse($warehouse_id);
        $stock_master->setToWarehouse($warehouse_id);
        $created_by = $this->_em->getRepository('Users')->find($this->_user_id);
        $stock_master->setCreatedBy($created_by);
        $d_date = date("Y-m-d");
        $stock_master->setCreatedDate(new \DateTime($d_date));
        $stock_master->setComments($comments);

        $trans_no = $this->getTransactionNumber($type, $adjustment_date);

        $stock_master->setTransactionNumber($trans_no['trans_no']);

        if (!empty($purpose)) {
            $stakeholder_activity = $this->_em->getRepository('StakeholderActivities')->find($purpose);
            $stock_master->setStakeholderActivity($stakeholder_activity);
        }

        //$stock_master->BatchID = $batch_id;
        $stock_master->setDraft(0);
        $stock_master->setTransactionCounter($trans_no['id']);
        $stock_master->setParentId(0);
        $this->_em->persist($stock_master);
        $this->_em->flush();

        $stock_ID = $stock_master->getPkId();

        $stock_detail = new StockDetail();
        $s_id = $this->_em->getRepository('StockMaster')->find($stock_ID);
        $stock_detail->setStockMaster($s_id);
        $b_id = $this->_em->getRepository('StockBatch')->find($batch_id);
        $stock_detail->setStockBatch($b_id);
        $stock_detail->setQuantity($type_nature[0]['nature'] . $quantity);
        $stock_detail->setAdjustmentType($type);
        $stock_detail->setTemporary(0);
        if (empty($old_vvm) || $old_vvm == null || $old_vvm == '') {
            $old_vvm = 0;
        }
        $vvms = $this->_em->getRepository("VvmStages")->find($old_vvm);
        $stock_detail->setVvmStage($vvms);
        $u_id = $this->_em->getRepository('ItemUnits')->find($unit);
        $stock_detail->setItemUnit($u_id);
        $this->_em->persist($stock_detail);
        $this->_em->flush();

        $stock_detail_id = $stock_detail->getPkId();
        $stock_batch = new Model_StockBatch();
        $warehouse_data = new Model_WarehousesData();
        $stock_batch->adjustQuantityBywarehouse($batch_id);
        $warehouse_data->addReport($stock_ID, $type);

        if (!empty($location)) {
            $placements = new Model_Placements();
            $placements->form_values = array(
                'batch_id' => $batch_id,
                'placement_loc_id' => $location,
                'detail_id' => $stock_detail_id,
                'user_id' => $this->_user_id,
                'created_date' => date("Y-m-d")
            );

            /* if (!empty($old_vvm) && !empty($this->form_values['vvm_stage']) && $old_vvm != $this->form_values['vvm_stage']) {
              $placements->form_values['vvmstage'] = $old_vvm;
              $placements->form_values['is_placed'] = 0;
              $placements->form_values['quantity'] = "-" . $quantity;
              $placements->form_values['placement_loc_type_id'] = 115;
              $placements->add();

              $placements->form_values['vvmstage'] = $this->form_values['vvm_stage'];
              $placements->form_values['is_placed'] = 1;
              $placements->form_values['quantity'] = $quantity;
              $placements->form_values['placement_loc_type_id'] = 114;
              $placements->add();

              $old_vvm = $this->form_values['vvm_stage'];
              } */

            if ($type_nature[0]['nature'] == '-') {
                // Check if batch exists in cold room
                $str_sql = $this->_em->createQueryBuilder()
                        ->select("SUM(ps.quantity) as quantity")
                        ->from("Placements", "ps")
                        ->where("ps.placementLocation = " . $location)
                        ->andWhere("ps.stockBatch = " . $batch_id);
                $row = $str_sql->getQuery()->getResult();
                if (count($row) > 0) {
                    $qty = $row[0]['quantity'];
                    if ($qty < $quantity) {
                        // If pick quantity is greater than placed quantity
                        throw new Exception('PICK_ERROR');
                    }
                }

                $loc_type = 115;
                $is_placed = 0;
            } else {
                $loc_type = 114;
                $is_placed = 1;
            }

            $placements->form_values['vvmstage'] = $old_vvm;
            $placements->form_values['is_placed'] = $is_placed;
            $placements->form_values['quantity'] = $type_nature[0]['nature'] . $quantity;
            $placements->form_values['placement_loc_type_id'] = $loc_type;
            $placements->add();
        }

        return $stock_master->getTransactionNumber();
    }

    public function deleteAdjustment($id) {
        $stock_detail = $this->_em->getRepository("StockDetail")->findBy(array("stockMaster" => $id));

        if (count($stock_detail) > 0) {
            $this->_em->remove($stock_detail[0]->getStockMaster());
            $batch_id = $stock_detail[0]->getStockBatch()->getPkId();
            if (count($stock_detail) > 0) {
                foreach ($stock_detail as $sd) {
                    $placement = $this->_em->getRepository("Placements")->findBy(array("stockDetail" => $sd->getPkId()));
                    if (count($placement) > 0) {
                        foreach ($placement as $plc) {
                            $this->_em->remove($plc);
                        }
                    }

                    $this->_em->remove($sd);
                }
            }
        }

        $this->_em->flush();

        $wh_id = $this->_identity->getWarehouseId();
        $this->adjustQuantityByWarehouse($batch_id, $wh_id);

        return true;
    }

    public function getwarehouseStockByIssueNo() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("s.pkId as masterId,"
                        . "ABS(sd.quantity) as quantity,"
                        . "vvm.pkId as vvmStage,vvm.vvmStageValue,"
                        . "sd.pkId as detailId,"
                        . "b.number,"
                        . "p.itemName,DATE_FORMAT(s.transactionDate,'%d/%m/%Y') as transactionDate, ic.pkId as itemCategory,s.transactionDate as receiveDate")
                ->from("StockDetail", "sd")
                ->join("sd.vvmStage", "vvm")
                ->join("sd.stockMaster", "s")
                ->join("sd.stockBatch", "b")
                ->join("b.itemPackSize", "p")
                ->join("p.itemCategory", "ic")
                ->where("s.transactionType= 2")
                ->andWhere("s.transactionNumber = '" . $this->transaction_number . "'")
                ->andWhere("s.toWarehouse  =  $this->to_warehouse_id")
                ->andWhere("sd.isReceived IS NULL OR sd.isReceived=0")
                ->andWhere("s.draft=0");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function addStockWarehouseViaScanner() {

        $data = $this->form_values;
        $stock_id = $data['stockid'];

        $stocks = $this->_em->getRepository("StockDetail")->find($stock_id[0]);

        $stock_master = new StockMaster();
        $time_arr = explode(' ', $data['rec_date']);
        $time = date('H:i:s', strtotime($time_arr[1] . $time_arr[2]));
        $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($time_arr[0]) . '' . $time));
        $tran_type = $this->_em->getRepository('TransactionTypes')->find(Model_TransactionTypes::TRANSACTION_RECIEVE);
        $stock_master->setTransactionType($tran_type);
        $stock_master->setTransactionReference($data['rec_ref']);
        $stock_master->setFromWarehouse($stocks->getStockMaster()->getFromWarehouse());
        $stock_master->setToWarehouse($stocks->getStockMaster()->getToWarehouse());
        $u_id = $this->_em->getRepository('Users')->find($this->_user_id);
        $stock_master->setCreatedBy($u_id);
        $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
        $stock_master->setComments($data['remarks']);

        $trans_no = $this->getTransactionNumber(1, $data['rec_date']);
        $stock_master->setTransactionNumber($trans_no['trans_no']);
        $stock_master->setDraft(0);
        $stock_master->setTransactionCounter($trans_no['id']);
        $stock_master->setParentId(0);
        $this->_em->persist($stock_master);
        $this->_em->flush();

        foreach ($stock_id as $index => $detail_id) {
            $stock_detail = $this->_em->getRepository("StockDetail")->find($detail_id);
            $received_location = $this->_em->getRepository("StockReceiveFromScanner")->findBy(array("stockDetail" => $detail_id));

            $obj_stock_batch = new Model_StockBatch();
            $array = array('number' => $stock_detail->getStockBatch()->getNumber(), 'item_id' => $stock_detail->getStockBatch()->getItemPackSize()->getPkId());
            $batch_id = $obj_stock_batch->checkBatch($array);

            if ($batch_id === 0) {
                $stock_batch = new StockBatch();
                $stock_batch->setNumber(strtoupper($stock_detail->getStockBatch()->getNumber()));
                $stock_batch->setBatchMasterId($stock_detail->getStockBatch()->getBatchMasterId());
                $stock_batch->setExpiryDate($stock_detail->getStockBatch()->getExpiryDate());
                $stock_batch->setQuantity(ABS($stock_detail->getQuantity()));
                $stock_batch->setItemPackSize($stock_detail->getStockBatch()->getItemPackSize());
                $stock_batch->setStatus('Stacked');
                $stock_batch->setUnitPrice($stock_detail->getStockBatch()->getUnitPrice());
                $stock_batch->setProductionDate($stock_detail->getStockBatch()->getProductionDate());
                $stock_batch->setVvmType($stock_detail->getStockBatch()->getVvmType());
                $stock_batch->setWarehouse($stock_detail->getStockMaster()->getToWarehouse());

                if ($stock_detail->getStockBatch()->getStakeholderItemPackSize() != null) {
                    $stock_batch->setStakeholderItemPackSize($stock_detail->getStockBatch()->getStakeholderItemPackSize());
                }

                $this->_em->persist($stock_batch);
                $this->_em->flush();
                $batch_id = $stock_batch->getPkId();
            }

            if (count($received_location) > 0) {
                foreach ($received_location as $placement) {
                    $stk_detail = new StockDetail();
                    $stk_detail->setStockMaster($stock_master);
                    $sb_id = $this->_em->getRepository('StockBatch')->find($batch_id);
                    $stk_detail->setStockBatch($sb_id);
                    $stk_detail->setItemUnit($stock_detail->getItemUnit());
                    $stk_detail->setQuantity(ABS($placement->getQuantity()));
                    $stk_detail->setTemporary(0);
                    $stk_detail->setVvmStage($placement->getVvmStage());
                    $stk_detail->setIsReceived($stock_detail->getPkId());
                    $stk_detail->setAdjustmentType(1);

                    $this->_em->persist($stk_detail);
                    $this->_em->flush();

                    /*
                     * Add entry in Placement table
                     */
                    $placements = new Placements();
                    $placements->setQuantity($placement->getQuantity());
                    $placements->setVvmStage($placement->getVvmStage());
                    $placements->setIsPlaced(1);
                    $placements->setPlacementLocation($placement->getPlacementLocation());
                    $placements->setStockBatch($sb_id);
                    $placements->setStockDetail($stk_detail);
                    $trans_type = $this->_em->getRepository("ListDetail")->find(Model_ListDetail::STOCK_PLACEMENT);
                    $placements->setPlacementTransactionType($trans_type);
                    $placements->setCreatedBy($stk_detail->getStockMaster()->getCreatedBy());
                    $placements->setCreatedDate(new DateTime(date("Y-m-d H:i:s")));
                    $this->_em->persist($placements);
                    $this->_em->flush();
                }
            } else {
                $stk_detail = new StockDetail();
                $stk_detail->setStockMaster($stock_master);
                $sb_id = $this->_em->getRepository('StockBatch')->find($batch_id);
                $stk_detail->setStockBatch($sb_id);
                $stk_detail->setItemUnit($stock_detail->getItemUnit());
                $stk_detail->setQuantity(ABS($stock_detail->getQuantity()));
                $stk_detail->setTemporary(0);
                $stk_detail->setVvmStage($stock_detail->getVvmStage());
                $stk_detail->setIsReceived($stock_detail->getPkId());
                $stk_detail->setAdjustmentType(1);

                $this->_em->persist($stk_detail);
                $this->_em->flush();
            }

            $details[$index] = $stk_detail;

            $stock_detail->setIsReceived(1);
            $this->_em->persist($stock_detail);
            $this->_em->flush();
        }

        $missing = $this->form_values['missing'];
        $type = $this->form_values['types'];

        $tranaction_type = new Model_TransactionTypes();
        $arr_types = $tranaction_type->getAll();
        $array_types = array();
        foreach ($arr_types as $arrtype) {
            $array_types[$arrtype['pkId']] = $arrtype['nature'];
        }

        $count = 1;
        foreach ($missing as $index => $adjustment) {
            if ($adjustment > 0) {
                if ($count == 1) {
                    $stock_master = new StockMaster();
                    $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($data['rec_date'])));
                    $tran_type1 = $this->_em->getRepository('TransactionTypes')->find($type[$index]);
                    $stock_master->setTransactionType($tran_type1);
                    $stock_master->setTransactionReference($data['rec_ref']);
                    $stock_master->setFromWarehouse($stock_detail->getStockMaster()->getToWarehouse());
                    $stock_master->setToWarehouse($stock_detail->getStockMaster()->getToWarehouse());
                    $u_id = $this->_em->getRepository('Users')->find($this->_user_id);
                    $stock_master->setCreatedBy($u_id);
                    $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
                    $stock_master->setComments($data['remarks']);

                    $trans_no = $this->getTransactionNumber($type[$index], $data['rec_date']);
                    $stock_master->setTransactionNumber($trans_no['trans_no']);
                    $stock_master->setDraft(0);
                    $stock_master->setTransactionCounter($trans_no['id']);
                    $stock_master->setParentId($stock_detail->getStockMaster()->getPkId());

                    $this->_em->persist($stock_master);
                    $this->_em->flush();
                }

                $stock_detail_a = new StockDetail();
                $stock_detail_a->setStockMaster($stock_master);
                $stock_detail_a->setStockBatch($details[$index]->getStockBatch());
                $stock_detail_a->setItemUnit($stock_detail->getItemUnit());
                $stock_detail_a->setQuantity($array_types[$type[$index]] . $missing[$index]);
                $stock_detail_a->setAdjustmentType($type[$index]);
                $stock_detail_a->setTemporary(0);
                $stock_detail_a->setIsReceived($details[$index]->getPkId());
                $vvms = $this->_em->getRepository("VvmStages")->find(1);
                $stock_detail_a->setVvmStage($vvms);
                $this->_em->persist($stock_detail_a);
                $this->_em->flush();

                $count++;
            }
        }

        foreach ($details as $obj_stock_detail) {
            $obj_stock_batch->adjustQuantityByWarehouse($obj_stock_detail->getStockBatch()->getPkId());
            $obj_stock_batch->autoRunningLEFOBatch($obj_stock_detail->getStockBatch()->getItemPackSize()->getPkId());
        }

        $warehouse_data = new Model_WarehousesData();
        $warehouse_data->addReport($details[0]->getStockMaster()->getPkId(), 1, 'wh');

        return true;
    }

    public function addStockWarehouseByIssue() {
        if (!empty($this->form_values['wh_id'])) {
            $wh_id = $this->form_values['wh_id'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }

        $tranaction_type = new Model_TransactionTypes();
        $arr_types = $tranaction_type->getAll();
        $array_types = array();

        foreach ($arr_types as $arrtype) {
            $array_types[$arrtype['pkId']] = $arrtype['nature'];
        }

        if (isset($this->form_values['stock_id']) && !empty($this->form_values['stock_id'])) {
            $stock_id = $this->form_values['stock_id'];

            $stock_detail = new Model_StockDetail();
            $stock_detail->pkId = $stock_id;
            $stock_detail_result = $stock_detail->findbyStockId();

            $type_id = 1;
            if (isset($this->form_values['remarks']) && !empty($this->form_values['remarks'])) {
                $remarks = $this->form_values['remarks'];
            }
            if (isset($this->form_values['issue_no']) && !empty($this->form_values['issue_no'])) {
                $issue_no = $this->form_values['issue_no'];
            }
            if (isset($this->form_values['count']) && !empty($this->form_values['count'])) {
                $count_o = $this->form_values['count'];
            }
            if (isset($this->form_values['rec_date']) && !empty($this->form_values['rec_date'])) {
                $rec_date = $this->form_values['rec_date'];
            }
            if (isset($this->form_values['rec_ref']) && !empty($this->form_values['rec_ref'])) {
                $rec_ref = $this->form_values['rec_ref'];
            }
            if (isset($this->form_values['vvmstage']) && !empty($this->form_values['vvmstage'])) {
                $vvmstage = $this->form_values['vvmstage'];
            }
            if (isset($this->form_values['locations']) && !empty($this->form_values['locations'])) {
                $locations = $this->form_values['locations'];
            }

            if (count($stock_detail_result) > 0) {
                $stock_master = new StockMaster();
                $time_arr = explode(' ', $rec_date);
                $time = date('H:i:s', strtotime($time_arr[1] . $time_arr[2]));
                $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($time_arr[0]) . '' . $time));
                $tran_type = $this->_em->getRepository('TransactionTypes')->find($type_id);

                $stock_master->setTransactionType($tran_type);
                $stock_master->setTransactionReference($rec_ref);
                $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($stock_detail_result[0]['fromWarehouse']);
                $stock_master->setFromWarehouse($from_warehouse_id);
                $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
                $stock_master->setToWarehouse($warehouse_id);
                $u_id = $this->_em->getRepository('Users')->find($this->_user_id);
                $stock_master->setCreatedBy($u_id);
                $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
                $stock_master->setComments($remarks);

                $trans_no = $this->getTransactionNumber(1, $rec_date);
                $stock_master->setTransactionNumber($trans_no['trans_no']);

                if (!empty($stock_detail_result[0]['stakeholderActivity'])) {
                    $stakeholder_activity = $this->_em->getRepository('StakeholderActivities')->find($stock_detail_result[0]['stakeholderActivity']);
                    $stock_master->setStakeholderActivity($stakeholder_activity);
                }

                $stock_master->setDraft(0);
                $stock_master->setTransactionCounter($trans_no['id']);
                $stock_master->setParentId(0);
                $this->_em->persist($stock_master);
                $this->_em->flush();

                $fk_stock_ID = $stock_master->getPkId();
            }
        }

        if (isset($this->form_values['stockid']) && !empty($this->form_values['stockid'])) {

            $stock_ids = $this->form_values['stockid'];
            $count_stock_ids = count($stock_ids);

            foreach ($stock_ids as $index => $detail_id) {

                $stock_detail = new Model_StockDetail();
                $stock_detail->stockReceived($detail_id);

                $stockBatch = $stock_detail->GetBatchDetail($detail_id);
                $stockDetail = $stock_detail->findByDetailId($detail_id);
                $array_missing = $this->form_values['missing'];

                $quantity = ABS($stockBatch['0']['quantity']);

                $obj_stock_batch = new Model_StockBatch();
                $product_id = $stockBatch['0']['itemPackSize'];
                $array = array('number' => $stockBatch['0']['number'], 'item_id' => $product_id);
                $batch_id1 = $obj_stock_batch->checkBatch($array);

                if ($batch_id1 === 0) {
                    $stock_batch = new StockBatch();
                    $stock_batch->setNumber(strtoupper($stockBatch['0']['number']));
                    $stock_batch->setBatchMasterId($stockBatch['0']['batchMasterId']);
                    $stock_batch->setExpiryDate(new \DateTime($stockBatch[0]['expiryDate']));
                    $stock_batch->setQuantity($quantity);
                    $ips_id = $this->_em->getRepository('ItemPackSizes')->find($product_id);
                    $stock_batch->setItemPackSize($ips_id);
                    $stock_batch->setStatus('Stacked');
                    $stock_batch->setUnitPrice($stockBatch['0']['unitPrice']);
                    $stock_batch->setProductionDate(new \DateTime($stockBatch[0]['productionDate']));
                    if (!empty($stockBatch[0]['vvmType'])) {
                        $vvm_id = $this->_em->getRepository('VvmTypes')->find($stockBatch[0]['vvmType']);
                        $stock_batch->setVvmType($vvm_id);
                    }
                    $wb_id = $this->_em->getRepository('Warehouses')->find($wh_id);
                    $stock_batch->setWarehouse($wb_id);

                    if (!empty($stockBatch['0']['stakeholderItemPackSize'])) {
                        $stk_ips = $this->_em->getRepository('StakeholderItemPackSizes')->find($stockBatch['0']['stakeholderItemPackSize']);
                        $stock_batch->setStakeholderItemPackSize($stk_ips);
                    }

                    $this->_em->persist($stock_batch);
                    $this->_em->flush();
                    $batch_id1 = $stock_batch->getPkId();
                }

                $stock_detail = new StockDetail();
                $sm_id = $this->_em->getRepository('StockMaster')->find($fk_stock_ID);
                $stock_detail->setStockMaster($sm_id);
                $sb_id = $this->_em->getRepository('StockBatch')->find($batch_id1);
                $stock_detail->setStockBatch($sb_id);
                $iu_id = $this->_em->getRepository('ItemUnits')->find($stockDetail['0']['itemUnit']);
                $stock_detail->setItemUnit($iu_id);
                $stock_detail->setQuantity($array_types[$type_id] . $quantity);
                $stock_detail->setTemporary(0);
                $vvms = $this->_em->getRepository("VvmStages")->find($vvmstage[$index]);
                $stock_detail->setVvmStage($vvms);
                $stock_detail->setIsReceived($detail_id);
                $stock_detail->setAdjustmentType($type_id);
                $this->_em->persist($stock_detail);
                $this->_em->flush();
                $adj_stock_detail_id = $stock_detail->getPkId();

                if (!empty($locations[$index])) {
                    $placement = new Model_Placements();
                    $placement->form_values = array(
                        'vvmstage' => $vvmstage[$index],
                        'is_placed' => 1,
                        'quantity' => $array_types[$type_id] . $quantity,
                        'placement_loc_type_id' => 114,
                        'placement_loc_id' => $locations[$index],
                        'batch_id' => $batch_id1,
                        'detail_id' => $stock_detail->getPkId(),
                        'user_id' => $this->_user_id,
                        'created_date' => date("Y-m-d")
                    );
                    $placement->add();
                }


                if (isset($array_missing[$index]) && !empty($array_missing[$index])) {
                    $type = $this->form_values['types'];
                    $stock_detail = new Model_StockDetail();
                    $stockDetail = $stock_detail->findByDetailId($detail_id);

                    if (count($stockDetail) > 0) {
                        $stock_master = new StockMaster();
                        $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($rec_date)));
                        $tran_type1 = $this->_em->getRepository('TransactionTypes')->find($type[$index]);
                        $stock_master->setTransactionType($tran_type1); //$type_id;
                        $stock_master->setTransactionReference($rec_ref);
                        $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
                        $stock_master->setFromWarehouse($warehouse_id);
                        $stock_master->setToWarehouse($warehouse_id);
                        $u_id = $this->_em->getRepository('Users')->find($this->_user_id);
                        $stock_master->setCreatedBy($u_id);
                        $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
                        $stock_master->setComments($remarks);
                        $trans_no = $this->getTransactionNumber($type[$index], $rec_date);
                        $stock_master->setTransactionNumber($trans_no['trans_no']);
                        $stock_master->setDraft(0);
                        $stock_master->setTransactionCounter($trans_no['id']);
                        $stock_master->setParentId($fk_stock_ID);

                        $this->_em->persist($stock_master);
                        $this->_em->flush();

                        $stock_id = $stock_master->getPkId();
                    }

                    $stock_detail_a = new StockDetail();
                    $s_id = $this->_em->getRepository('StockMaster')->find($stock_id);
                    $stock_detail_a->setStockMaster($s_id);
                    $sb_id = $this->_em->getRepository('StockBatch')->find($batch_id1);
                    $stock_detail_a->setStockBatch($sb_id);
                    $iu_id = $this->_em->getRepository('ItemUnits')->find($stockDetail['0']['itemUnit']);
                    $stock_detail_a->setItemUnit($iu_id);
                    $stock_detail_a->setQuantity($array_types[$type[$index]] . $array_missing[$index]);
                    $stock_detail_a->setAdjustmentType($type[$index]);
                    $stock_detail_a->setTemporary(0);
                    $stock_detail_a->setIsReceived($adj_stock_detail_id);
                    $vvms = $this->_em->getRepository("VvmStages")->find($vvmstage[$index]);
                    $stock_detail_a->setVvmStage($vvms);
                    $this->_em->persist($stock_detail_a);
                    $this->_em->flush();

                    if (!empty($locations[$index])) {
                        $placement2 = new Model_Placements();
                        $placement2->form_values = array(
                            'vvmstage' => $vvmstage[$index],
                            'is_placed' => 0,
                            'quantity' => $array_types[$type[$index]] . $array_missing[$index],
                            'placement_loc_type_id' => 115,
                            'placement_loc_id' => $locations[$index],
                            'batch_id' => $batch_id1,
                            'detail_id' => $stock_detail_a->getPkId(),
                            'user_id' => $this->_user_id,
                            'created_date' => date("Y-m-d")
                        );
                        $placement2->add();
                    }
                }

                $obj_stock_batch->adjustQuantityByWarehouse($batch_id1);
                $obj_stock_batch->autoRunningLEFOBatch($product_id);
            }
        }



        $warehouse_data = new Model_WarehousesData();
        $warehouse_data->addReport($stock_id, 1, 'wh');

        return true;
    }

    public function updateMasterIssueDate() {

        $str_sql = $this->_em->createQueryBuilder()
                ->update('StockMaster')
                ->set("transactionDate", '?', $this->transaction_date)
                ->where('pk_id = ?', $this->pk_id);
        $row = $str_sql->execute();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return FALSE;
        }
    }

    public function stockExists($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId")
                ->from("StockDetail", "sd")
                ->where('sd.stockMaster = ' . $id);
        $row = $str_sql->getQuery()->getResult();

        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function stockGatepassSearch($date_from, $dateto) {

        $wh_id = $this->_identity->getWarehouseId();
        if (!empty($date_from) && !empty($dateto)) {
            $where[] = "sm.transactionDate BETWEEN '" . App_Controller_Functions::dateTimeToDbFormat($date_from) . "' AND '" . App_Controller_Functions::dateTimeToDbFormat($dateto) . "'";
        }

        if (!empty($wh_id)) {
            $where[] = "sm.fromWarehouse = '" . $wh_id . "'";
        }

        $where[] = "sm.transactionType = '" . Model_TransactionTypes::TRANSACTION_ISSUE . "'";

        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sm.pkId,sm.transactionNumber,sm.transactionDate")
                ->from("StockMaster", "sm")
                ->where($where_s);
        //echo $str_sql->getQuery()->getSql();
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    /**
     *
     * @param integer $wh_id
     * @return array $arr_data
     * @uses Barcode API
     */
    public function getIssueVoucherListNotReceived($wh_id) {
        $from_date = Zend_Registry::get('api_from_date');
        $to_date = date("Y-m");

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd")
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->where("sm.toWarehouse = " . $wh_id)
                ->andWhere("sb.itemPackSize IN (" . Zend_Registry::get('barcode_products') . ")")
                ->andWhere("sm.transactionType = 2")
                ->andWhere("sd.isReceived = 0")
                ->andWhere("DATE_FORMAT(sm.transactionDate,'%Y-%m') BETWEEN '$from_date' AND '$to_date'");
//echo $str_sql->getQuery()->getSql();
        $rows = $str_sql->getQuery()->getResult();
        if (count($rows) > 0) {
            $arr_data = array();
            foreach ($rows as $row) {
                if ($row->getStockBatch()->getProductionDate() !== null) {
                    $prod_date = $row->getStockBatch()->getProductionDate()->format("Y-m-d");
                } else {
                    $prod_date = '';
                }

                $received_qty = 0;
                $rec_qty = $this->_em->getRepository("StockDetail")->findBy(array("isReceived" => $row->getPkId()));
                if (count($rec_qty) > 0) {
                    foreach ($rec_qty as $rec_row) {
                        $received_qty = $received_qty + $rec_row->getQuantity();
                    }
                }

                $arr_data[] = array(
                    'record_id' => $row->getPkId(),
                    'trans_no' => $row->getStockMaster()->getTransactionNumber(),
                    'arrival_date' => $row->getStockMaster()->getTransactionDate()->format("Y-m-d"),
                    'reference_no' => $row->getStockMaster()->getTransactionReference(),
                    'description' => $row->getStockMaster()->getComments(),
                    'gtin' => $row->getStockBatch()->getStakeholderItemPackSize()->getGtin(),
                    'quantity_per_pack' => $row->getStockBatch()->getStakeholderItemPackSize()->getQuantityPerPack(),
                    'item_pack_size_id' => $row->getStockBatch()->getItemPackSize()->getPkId(),
                    'item_category' => $row->getStockBatch()->getItemPackSize()->getItemCategory()->getPkId(),
                    'item_name' => $row->getStockBatch()->getItemPackSize()->getItemName(),
                    'batch_no' => $row->getStockBatch()->getNumber(),
                    'production_date' => $prod_date,
                    'expiry_date' => $row->getStockBatch()->getExpiryDate()->format("Y-m-d"),
                    'manufacturer' => $row->getStockBatch()->getStakeholderItemPackSize()->getStakeholder()->getStakeholderName(),
                    'manufacturer_id' => $row->getStockBatch()->getStakeholderItemPackSize()->getStakeholder()->getPkId(),
                    'stakeholder_item_pack_size_id' => $row->getStockBatch()->getStakeholderItemPackSize()->getPkId(),
                    'quantity' => ABS($row->getQuantity()),
                    'from_wh_name' => $row->getStockMaster()->getFromWarehouse()->getWarehouseName(),
                    'from_wh_id' => $row->getStockMaster()->getFromWarehouse()->getPkId(),
                    'to_wh_id' => $row->getStockMaster()->getToWarehouse()->getPkId(),
                    'to_wh_name' => $row->getStockMaster()->getToWarehouse()->getWarehouseName(),
                    'received_qty' => $received_qty
                );
            }
            return $arr_data;
        } else {
            return array("message" => "No record found");
        }
    }

    /**
     *
     * @param integer $wh_id
     * @return array $arr_data
     * @uses Barcode API
     */
    public function uploadReceivedQuantityViaScanner() {
        $params = $this->form_values;

        $rec_id = $params['rec_id'];
        $qty = $params['qty'];
        $location_id = $params['location_id'];
        $is_update = $params['update'];
        $vvmstage = $params['vvmstage'];

        $stock_detail = $this->_em->getRepository("StockDetail")->find($rec_id);
        /**
         * Record must exists
         */
        if (count($stock_detail) == 0) {
            $result_msg = array("message" => "Selected record id $rec_id does not exist in pipeline consignments. Please update your data.");
            App_FileLogger::info($result_msg['message']);
            return $result_msg;
        }

        if ($is_update) {
            $detail_placements = $this->_em->getRepository("StockReceiveFromScanner")->findBy(array("stockDetail" => $rec_id));
            if (count($detail_placements) > 0) {
                foreach ($detail_placements as $row) {
                    $this->_em->remove($row);
                }
                $this->_em->flush();
            }
        }

        $plac_loc_id = $this->_em->getRepository("PlacementLocations")->find($location_id);
        /*
         * Add entry in Placement table
         */
        $stock_receive = new StockReceiveFromScanner();
        $stock_receive->setStockDetail($stock_detail);
        $stock_receive->setPlacementLocation($plac_loc_id);
        $stock_receive->setQuantity($qty);
        $vvms = $this->_em->getRepository("VvmStages")->find($vvmstage);
        $stock_receive->setVvmStage($vvms);
        $this->_em->persist($stock_receive);
        $this->_em->flush();

        return array("message" => "success", "detail_id" => $stock_detail->getPkId());
    }

    /**
     *
     * @param integer $wh_id
     * @return array $arr_data
     * @uses Barcode API
     */
    /* public function uploadReceiveVouchers() {
      $params = $this->form_values;

      $wh_id = $params['wh_id'];
      $rec_id = $params['rec_id'];
      $qty = $params['qty'];
      $location_id = $params['location_id'];

      $plac_loc_id = $this->_em->getRepository("PlacementLocations")->find($location_id);
      $stock_detail = $this->_em->getRepository("StockDetail")->find($rec_id);
      /**
     * Record must exists
     */
    /* if (count($stock_detail) == 0) {
      $result_msg = array("message" => "Selected record id $rec_id does not exist in pipeline consignments. Please update your data.");
      App_FileLogger::info($result_msg['message']);
      return $result_msg;
      }

      $stock_master_id = $stock_detail->getStockMaster()->getPkId();

      $str_sql = $this->_em->createQueryBuilder()
      ->select("GROUP_CONCAT(sd.pkId) as detail_ids")
      ->from("StockDetail", "sd")
      ->where("sd.stockMaster = " . $stock_master_id);
      $rs = $str_sql->getQuery()->getResult();
      $stock_detail_ids = $rs[0]['detail_ids'];

      $str_sql1 = $this->_em->createQueryBuilder()
      ->select("sm.pkId")
      ->from("StockDetail", "sd")
      ->join("sd.stockMaster", "sm")
      ->where("sd.isReceived IN (" . $stock_detail_ids . ")");
      $rs1 = $str_sql1->getQuery()->getResult();

      if (count($rs1) > 0) {
      $master_id = $rs1[0]['pkId'];
      } else {
      $master_id = 0;
      }

      /**
     * Check if we need to create new voucher or add detail entry in existing voucher
     * If 0 then New Voucher
     * If greater then 0 then Add in Existing voucher
     */
    /* if ($master_id == 0) {
      $tr_date = date("d/m/Y");
      $obj_master = new Model_StockMaster();
      $trans = $obj_master->getTransactionNumber(1, $tr_date, $wh_id);

      $stock_master = new StockMaster();
      $stock_master->setTransactionDate(new DateTime());
      $stock_master->setTransactionNumber($trans['trans_no']);
      $stock_master->setTransactionCounter($trans['id']);
      //$stock_master->setTransactionReference();
      $stock_master->setDraft(0);
      //$stock_master->setComments();
      $type = $this->_em->getRepository("TransactionTypes")->find(1);
      $stock_master->setTransactionType($type);
      $stock_master->setFromWarehouse($stock_detail->getStockMaster()->getFromWarehouse());
      $stock_master->setToWarehouse($stock_detail->getStockMaster()->getToWarehouse());
      $stock_master->setParentId(0);
      $stock_master->setStakeholderActivity($stock_detail->getStockMaster()->getStakeholderActivity());
      $stock_master->setCreatedBy($stock_detail->getStockMaster()->getCreatedBy());
      $stock_master->setCreatedDate(new DateTime(date("Y-m-d H:i:s")));
      $this->_em->persist($stock_master);
      $this->_em->flush();

      $master_id = $stock_master->getPkId();
      }

      $batch_no = $stock_detail->getStockBatch()->getNumber();
      $array = array("item_id" => $stock_detail->getStockBatch()->getItemPackSize()->getPkId(), "number" => $batch_no, "wh_id" => $stock_detail->getStockMaster()->getToWarehouse()->getPkId());
      $sb = new Model_StockBatch();
      $batch_id = $sb->checkBatch($array);

      /**
     * Check if Batch exists or not
     * If 0 then create new batch
     * If greater then 0 then add quantity in existing batch
     */
    /* if ($batch_id === 0) {
      $stock_batch = new StockBatch();
      $stock_batch->setNumber(strtoupper($batch_no));
      $stock_batch->setExpiryDate($stock_detail->getStockBatch()->getExpiryDate());
      $stock_batch->setQuantity($qty);
      $stock_batch->setStatus('Stacked');
      $stock_batch->setUnitPrice(0);
      $stock_batch->setProductionDate($stock_detail->getStockBatch()->getProductionDate());
      $stock_batch->setLastUpdate(new DateTime(date("Y-m-d")));
      $stock_batch->setItemPackSize($stock_detail->getStockBatch()->getItemPackSize());
      $vvm_type = $this->_em->getRepository("VvmTypes")->find(2);
      $stock_batch->setVvmType($vvm_type);
      $stock_batch->setWarehouse($stock_detail->getStockMaster()->getToWarehouse());
      $stock_batch->setStakeholderItemPackSize($stock_detail->getStockBatch()->getStakeholderItemPackSize());
      $this->_em->persist($stock_batch);
      $this->_em->flush();

      $batch_id = $stock_batch->getPkId();
      }

      /*
     * Add Entry in stock detail against selected master voucher
     */
    /* $obj_stock_detail = new StockDetail();
      $obj_stock_detail->setQuantity($qty);
      $obj_stock_detail->setTemporary(0);
      $obj_stock_detail->setVvmStage(1);
      $obj_stock_detail->setIsReceived($stock_detail->getPkId());
      $obj_stock_detail->setAdjustmentType(1);
      $stock_master = $this->_em->getRepository("StockMaster")->find($master_id);
      $obj_stock_detail->setStockMaster($stock_master);
      $stock_batch = $this->_em->getRepository("StockBatch")->find($batch_id);
      $obj_stock_detail->setStockBatch($stock_batch);
      $obj_stock_detail->setItemUnit($stock_detail->getStockBatch()->getItemPackSize()->getItemUnit());
      $this->_em->persist($obj_stock_detail);
      $this->_em->flush();

      /*
     * Add entry in Placement table
     */
    /* $placements = new Placements();
      $placements->setQuantity($qty);
      $placements->setVvmStage(1);
      $placements->setIsPlaced(1);
      $placements->setPlacementLocation($plac_loc_id);
      $placements->setStockBatch($stock_batch);
      $placements->setStockDetail($obj_stock_detail);
      $trans_type = $this->_em->getRepository("ListDetail")->find(Model_ListDetail::STOCK_PLACEMENT);
      $placements->setPlacementTransactionType($trans_type);
      $placements->setCreatedBy($stock_detail->getStockMaster()->getCreatedBy());
      $placements->setCreatedDate(new DateTime(date("Y-m-d H:i:s")));
      $this->_em->persist($placements);
      $this->_em->flush();

      /*
     * Adjust Batch Quantity By Warehouse
     */
    /* $this->adjustQuantityByWarehouse($batch_id, $stock_detail->getStockMaster()->getToWarehouse()->getPkId());

      /*
     * Adjust Warehouse data for selected month and item
     */
    /* $warehouse_data = new Model_WarehousesData();
      $warehouse_data->form_values = array(
      'report_month' => date("m"),
      'report_year' => date("Y"),
      'item_id' => $stock_detail->getStockBatch()->getItemPackSize()->getPkId(),
      'warehouse_id' => $stock_detail->getStockMaster()->getToWarehouse()->getPkId(),
      'created_by' => $stock_detail->getStockMaster()->getCreatedBy()->getPkId()
      );
      $warehouse_data->adjustStockReport();

      /*
     * Update Received field in stock detail
     */
    /* $issue_qty = ABS($stock_detail->getQuantity());
      $str_sql2 = $this->_em->createQueryBuilder()
      ->select("SUM(sd.quantity) as rec_qty")
      ->from("StockDetail", "sd")
      ->where("sd.isReceived = " . $stock_detail->getPkId());
      $rs2 = $str_sql2->getQuery()->getResult();
      $receive_qty = 0;
      if (count($rs2) > 0) {
      $receive_qty = ABS($rs2[0]['rec_qty']);
      }

      if ($issue_qty === $receive_qty) {
      $stock_detail->setIsReceived(1);
      $this->_em->persist($stock_detail);
      $this->_em->flush();
      }

      return array("message" => "success", "master_id" => $master_id);
      } */

    public function getUnpickedIssueNo($wh_id) {
//        $wh_id = $this->_identity->getWarehouseId();

        $from_date = Zend_Registry::get('api_from_date');
        $to_date = date("Y-m");

        //#stock_master.transaction_type_id NOT IN (" . Model_TransactionTypes::TRANSACTION_RECIEVE . "," . Model_TransactionTypes::LOST_RECOVERED . "," . Model_TransactionTypes::PHYSICALLY_FOUND . "," . Model_TransactionTypes::PHYSICALLY_NOT_FOUND . "," . Model_TransactionTypes::OPENING_BALANCE . "," . Model_TransactionTypes::CHANGE_PURPOSE_POSITIVE . ")

        $str_sql = "SELECT DISTINCT
	A.transaction_number,
	A.stc_master_pkid,
	A.transaction_date,
	A.warehouse_name,
	A.to_warehouse_id,
	A.from_warehouse_id
        FROM
	(
		SELECT
	stock_master.transaction_number,
	abs(Sum(stock_detail.quantity)) AS quantity,
	stock_detail.pk_id,
	stock_master.transaction_date,
	stock_master.to_warehouse_id,
	stock_master.from_warehouse_id,
	warehouses.warehouse_name,
	stock_master.pk_id AS stc_master_pkid,
	abs(GetPicked(stock_detail.pk_id)) AS place_quantity
        FROM
                stock_master
        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
        INNER JOIN stock_batch ON stock_batch.pk_id = stock_detail.stock_batch_id
        INNER JOIN warehouses ON stock_master.to_warehouse_id = warehouses.pk_id
        INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
        WHERE
        stock_master.transaction_type_id IN (" . Model_TransactionTypes::TRANSACTION_ISSUE . ")
        AND stock_master.from_warehouse_id = " . $wh_id . "
        AND warehouses.status = 1 AND
        DATE_FORMAT(stock_master.transaction_date,'%Y-%m') BETWEEN '$from_date' AND '$to_date' AND
        item_pack_sizes.item_category_id = 1 AND
        stock_detail.`temporary` = 0 AND stock_master.draft = 0
        GROUP BY
	stock_detail.stock_batch_id,
	stock_detail.stock_master_id,
        stock_detail.pk_id
        having quantity > place_quantity
        ORDER BY
        stock_master.transaction_date DESC
	) A";
//        $str_sql = "SELECT DISTINCT
//	A.transaction_number,
//	A.stc_master_pkid,
//	A.transaction_date,
//	A.warehouse_name,
//	A.to_warehouse_id,
//	A.from_warehouse_id
//FROM
//	(
//		SELECT
//			stock_master.transaction_number,
//			Sum(stock_detail.quantity) AS quantity,
//			stock_detail.pk_id,
//			stock_master.transaction_date,
//			stock_master.to_warehouse_id,
//			stock_master.from_warehouse_id,
//			warehouses.warehouse_name,
//			stock_master.pk_id AS stc_master_pkid
//		FROM
//			stock_master
//		INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
//		INNER JOIN warehouses ON stock_master.to_warehouse_id = warehouses.pk_id
//		WHERE
//			stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_ISSUE . "
//		AND stock_master.from_warehouse_id = " . $wh_id . "
//		GROUP BY
//			stock_detail.stock_batch_id,
//			stock_detail.stock_master_id
//	) A
//LEFT JOIN (
//	SELECT
//		Sum(placements.quantity) AS place_quantity,
//		stock_detail.pk_id
//	FROM
//		placements
//	INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
//	GROUP BY
//		stock_detail.pk_id
//) B ON A.pk_id = B.pk_id
//WHERE
//	COALESCE (ABS(A.quantity), NULL, 0) - COALESCE (
//		ABS(B.place_quantity),
//		NULL,
//		0
//	) > 0";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getUnplacedVoucherNo($wh_id) {  //updated
//$wh_id = $this->_identity->getWarehouseId();
        $from_date = Zend_Registry::get('api_from_date');
        $to_date = date("Y-m");

        $str_sql = "SELECT DISTINCT
                        A.transaction_number,
                        A.stc_master_pkid,
                        A.transaction_date,
                        A.warehouse_name,
                        A.to_warehouse_id,
                        A.from_warehouse_id
                        FROM
                        (
                        SELECT
                                stock_master.transaction_number,
                                Sum(stock_detail.quantity) AS quantity,
                                stock_detail.pk_id,
                                stock_master.transaction_date,
                                stock_master.to_warehouse_id,
                                stock_master.from_warehouse_id,
                                warehouses.warehouse_name,
                                stock_master.pk_id AS stc_master_pkid,
                                GetPlaced(stock_detail.pk_id) AS place_quantity
                        FROM
                                stock_master
                        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
                        INNER JOIN stock_batch ON stock_batch.pk_id = stock_detail.stock_batch_id
                        INNER JOIN warehouses ON stock_master.from_warehouse_id = warehouses.pk_id
                        WHERE
                        stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_RECIEVE . "
                        AND stock_master.to_warehouse_id = " . $wh_id . "
                        AND warehouses.status=1 AND
                        DATE_FORMAT(stock_master.transaction_date,'%Y-%m') BETWEEN '$from_date' AND '$to_date'
                            AND stock_batch.item_pack_size_id IN (" . Zend_Registry::get('barcode_products') . ")
                        GROUP BY
                                stock_detail.stock_batch_id,
                                stock_detail.stock_master_id
                        HAVING
                                quantity > place_quantity
                        ORDER BY
                                transaction_date DESC
	) A";
//        $str_sql = "SELECT DISTINCT A.transaction_number,A.stc_master_pkid, A.transaction_date,
//            A.warehouse_name,
//A.to_warehouse_id,
//A.from_warehouse_id FROM (SELECT
//        stock_master.transaction_number,
//        Sum(stock_detail.quantity) AS quantity,
//        stock_detail.pk_id,
//        stock_master.transaction_date,
//stock_master.to_warehouse_id,
//stock_master.from_warehouse_id,
//warehouses.warehouse_name,
//        stock_master.pk_id as stc_master_pkid
//        FROM
//                stock_master
//        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
//        INNER JOIN warehouses ON stock_master.from_warehouse_id = warehouses.pk_id
//        WHERE
//                stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_RECIEVE . " and stock_master.to_warehouse_id =" . $wh_id . "
//        GROUP BY
//                stock_detail.stock_batch_id,
//                stock_detail.stock_master_id
//        ) A
//        LEFT JOIN  (SELECT
//        Sum(placements.quantity) AS place_quantity,
//        stock_detail.pk_id
//        FROM
//                placements
//        INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
//        GROUP BY
//                stock_detail.pk_id
//        ) B
//        ON A.pk_id = B.pk_id
//       where
//       COALESCE (ABS(A.quantity), NULL, 0) - COALESCE (
//		ABS(B.place_quantity),
//		NULL,
//		0
//	) > 0";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function detailDataIssueno($stockmasterId) { //updated

        /* $str_sql = "SELECT A.transaction_number,
          abs(Sum(A.quantity)) AS quantity,
          A.pk_id,
          A.pk_id AS stc_master_pkid,
          A.number,
          A.batch_id,
          A.expiry_date,
          A.item_name,
          A.pk_id AS ItemID,
          A.quantity_per_pack,
          A.item_category_id,
          B.place_quantity
          FROM(SELECT
          stock_master.transaction_number,
          abs(Sum(stock_detail.quantity)) AS quantity,
          stock_detail.pk_id,
          stock_master.pk_id AS stc_master_pkid,
          stock_batch.number,
          stock_batch.pk_id as batch_id,
          stock_batch.expiry_date,
          item_pack_sizes.item_name,
          item_pack_sizes.pk_id as ItemID,
          stakeholder_item_pack_sizes.quantity_per_pack,
          item_pack_sizes.item_category_id
          FROM
          stock_master
          INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
          INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
          INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
          INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
          WHERE
          stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_ISSUE . "
          AND stock_detail.stock_master_id =" . $stockmasterId . "
          GROUP BY
          stock_detail.stock_batch_id,
          stock_detail.stock_master_id
          ) A
          LEFT JOIN (
          SELECT
          abs(Sum(placements.quantity)) AS place_quantity,
          stock_detail.pk_id
          FROM
          placements
          INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
          GROUP BY
          stock_detail.pk_id
          ) B ON A.pk_id = B.pk_id where
          COALESCE (ABS(A.quantity), NULL, 0) - COALESCE (
          ABS(B.place_quantity),
          NULL,
          0
          ) > 0"; */

// Improved Query

        $str_sql = "SELECT
        stock_master.transaction_number,
        abs(Sum(stock_detail.quantity)) AS quantity,
        stock_detail.pk_id,
        stock_master.pk_id AS stc_master_pkid,
        stock_batch.number,
         stock_batch.pk_id as batch_id,
        stock_batch.expiry_date,
        item_pack_sizes.item_name,
        stock_batch.item_pack_size_id as ItemID,
        stakeholder_item_pack_sizes.quantity_per_pack,
        item_pack_sizes.item_category_id,
        abs(GetPicked(stock_detail.pk_id)) as place_quantity
        FROM
        stock_master
        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
        INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
    	INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
	INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
            WHERE
         stock_master.transaction_type_id NOT IN (" . Model_TransactionTypes::TRANSACTION_RECIEVE . "," . Model_TransactionTypes::LOST_RECOVERED . "," . Model_TransactionTypes::PHYSICALLY_FOUND . ")
         AND stock_detail.stock_master_id =" . $stockmasterId . " AND
        item_pack_sizes.item_category_id = 1
        GROUP BY
            stock_detail.stock_batch_id,
            stock_detail.stock_master_id,
            stock_detail.pk_id";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function detailDataIssuenoVaccines($stockmasterId) {
//        $str_sql = "SELECT A.transaction_number,
//	abs(Sum(A.quantity)) AS quantity,
//	A.pk_id,
//	A.pk_id AS stc_master_pkid,
//	A.number,
//	A.batch_id,
//	A.expiry_date,
//	A.item_name,
//	A.pk_id AS ItemID,
//	A.quantity_per_pack,
//	B.place_quantity
//        FROM(SELECT
//        stock_master.transaction_number,
//        abs(Sum(stock_detail.quantity)) AS quantity,
//        stock_detail.pk_id,
//        stock_master.pk_id AS stc_master_pkid,
//        stock_batch.number,
//         stock_batch.pk_id as batch_id,
//        stock_batch.expiry_date,
//        item_pack_sizes.item_name,
//        item_pack_sizes.pk_id as ItemID,
//        stakeholder_item_pack_sizes.quantity_per_pack
//        FROM
//        stock_master
//        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
//        INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//    	INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//		INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//		WHERE
//                                stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_ISSUE . "
//                        AND stock_detail.stock_master_id =" . $stockmasterId . "
//        GROUP BY
//                                stock_detail.stock_batch_id,
//                                stock_detail.stock_master_id
//                ) A
//        LEFT JOIN (
//                SELECT
//                        abs(Sum(placements.quantity)) AS place_quantity,
//                        stock_detail.pk_id
//                FROM
//                        placements
//                INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
//                GROUP BY
//                        stock_detail.pk_id
//        ) B ON A.pk_id = B.pk_id where
//       COALESCE (ABS(A.quantity), NULL, 0) - COALESCE (
//		ABS(B.place_quantity),
//		NULL,
//		0
//	) > 0";


        $str_sql = "SELECT
        stock_master.transaction_number,
        abs(Sum(stock_detail.quantity)) AS quantity,
        stock_detail.pk_id,
        stock_master.pk_id AS stc_master_pkid,
        stock_batch.number,
         stock_batch.pk_id as batch_id,
        stock_batch.expiry_date,
        item_pack_sizes.item_name,
        item_pack_sizes.pk_id as ItemID,
        stakeholder_item_pack_sizes.quantity_per_pack,
        item_pack_sizes.item_category_id,
        abs(GetPicked(stock_detail.pk_id)) as place_quantity
        FROM
        stock_master
        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
        INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
    	INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
        INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
	WHERE
        stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_ISSUE . "
        AND stock_detail.stock_master_id =" . $stockmasterId . "
        GROUP BY
                                stock_detail.stock_batch_id,
                                stock_detail.stock_master_id";


        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function detailDataReceiveno($stockmasterId) {

        $str_sql = "SELECT
        stock_master.transaction_number,
        abs(Sum(stock_detail.quantity)) AS quantity,
        stock_detail.pk_id,
        stock_master.pk_id AS stc_master_pkid,
        stock_batch.number,
        stock_batch.pk_id as batch_id,
        stock_batch.expiry_date,
        item_pack_sizes.item_name,
        item_pack_sizes.item_category_id,
        item_pack_sizes.pk_id as ItemID,
        stakeholder_item_pack_sizes.quantity_per_pack,
        stakeholder_item_pack_sizes.pk_id as stakeholder_item_pack_size_id,
        GetPlaced(stock_detail.pk_id) as place_quantity
        FROM
        stock_master
        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
        INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
        INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
        INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
        WHERE
        stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_RECIEVE . "
        AND stock_detail.stock_master_id =" . $stockmasterId . "
            AND item_pack_sizes.pk_id IN (" . Zend_Registry::get('barcode_products') . ")
        GROUP BY
                                stock_detail.stock_batch_id,
                                stock_detail.stock_master_id
                                having quantity > place_quantity";
//        $str_sql = "SELECT A.transaction_number,
//	abs(Sum(A.quantity)) AS quantity,
//	A.pk_id,
//	A.pk_id AS stc_master_pkid,
//	A.number,
//	A.batch_id,
//	A.expiry_date,
//	A.item_name,
//	A.pk_id AS ItemID,
//        A.item_category_id,
//	A.quantity_per_pack,
//	B.place_quantity
//        FROM(SELECT
//        stock_master.transaction_number,
//        abs(Sum(stock_detail.quantity)) AS quantity,
//        stock_detail.pk_id,
//        stock_master.pk_id AS stc_master_pkid,
//        stock_batch.number,
//         stock_batch.pk_id as batch_id,
//        stock_batch.expiry_date,
//        item_pack_sizes.item_name,
//        item_pack_sizes.item_category_id,
//        item_pack_sizes.pk_id as ItemID,
//         stakeholder_item_pack_sizes.quantity_per_pack
//        FROM
//        stock_master
//        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
//        INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//        INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//		INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//        WHERE
//                                stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_RECIEVE . "
//                        AND stock_detail.stock_master_id =" . $stockmasterId . "
//        GROUP BY
//                                stock_detail.stock_batch_id,
//                                stock_detail.stock_master_id
//                ) A
//       LEFT JOIN (
//                SELECT
//                        abs(Sum(placements.quantity)) AS place_quantity,
//                        stock_detail.pk_id
//                FROM
//                        placements
//                INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
//                GROUP BY
//                        stock_detail.pk_id
//        ) B ON A.pk_id = B.pk_id
//        where
//       COALESCE (ABS(A.quantity), NULL, 0) - COALESCE (
//		ABS(B.place_quantity), NULL, 0) > 0";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

// Added by GM
    public function getIssueVoucherItemsList($stockmasterId) {

        $str_sql = "SELECT
            stock_master.transaction_number,
            abs(Sum(stock_detail.quantity)) AS quantity,
            stock_detail.pk_id,
            stock_master.pk_id AS stc_master_pkid,
            stock_batch.number,
            stock_batch.pk_id as batch_id,
            stock_batch.expiry_date,
            item_pack_sizes.item_name,
            item_pack_sizes.item_category_id,
            item_pack_sizes.pk_id as ItemID,
            stakeholder_item_pack_sizes.quantity_per_pack,
            abs(GetPicked(stock_detail.pk_id)) as place_quantity,
            stakeholder_item_pack_sizes.pk_id as stakeholder_item_pack_size_id
        FROM
        stock_master
            INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
            INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
            INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
            INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
        WHERE
             stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_ISSUE . "
             AND stock_detail.stock_master_id =" . $stockmasterId . "
             AND item_pack_sizes.pk_id IN (" . Zend_Registry::get('barcode_products') . ")
        GROUP BY
                                stock_detail.stock_batch_id,
                                stock_detail.stock_master_id
                                having quantity > place_quantity";

//        $str_sql = "SELECT A.transaction_number,
//	abs(Sum(A.quantity)) AS quantity,
//	A.pk_id,
//	A.pk_id AS stc_master_pkid,
//	A.number,
//	A.batch_id,
//	A.expiry_date,
//	A.item_name,
//	A.pk_id AS ItemID,
//        A.item_category_id,
//	A.quantity_per_pack,
//	B.place_quantity
//        FROM(SELECT
//        stock_master.transaction_number,
//        abs(Sum(stock_detail.quantity)) AS quantity,
//        stock_detail.pk_id,
//        stock_master.pk_id AS stc_master_pkid,
//        stock_batch.number,
//         stock_batch.pk_id as batch_id,
//        stock_batch.expiry_date,
//        item_pack_sizes.item_name,
//        item_pack_sizes.item_category_id,
//        item_pack_sizes.pk_id as ItemID,
//        stakeholder_item_pack_sizes.quantity_per_pack
//        FROM
//        stock_master
//        INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
//        INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//    	  INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//	  INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//		WHERE
//                        stock_master.transaction_type_id = " . Model_TransactionTypes :: TRANSACTION_ISSUE . "
//                        AND stock_detail.stock_master_id =" . $stockmasterId . "
//        GROUP BY
//                                stock_detail.stock_batch_id,
//                                stock_detail.stock_master_id
//                ) A
//        LEFT JOIN (
//                SELECT
//                        abs(Sum(placements.quantity)) AS place_quantity,
//                        stock_detail.pk_id
//                FROM
//                        placements
//                INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
//                GROUP BY
//                        stock_detail.pk_id
//        ) B ON A.pk_id = B.pk_id where
//       COALESCE (ABS(A.quantity), NULL, 0) - COALESCE (
//		ABS(B.place_quantity),
//		NULL,
//		0
//	) > 0";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getPendingReceive() {
        $wh_id = $this->_identity->getWarehouseId();

        $str_sql = "SELECT DISTINCT
                        stock_master.transaction_number
                FROM
                        stock_master
                INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
                INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                INNER JOIN item_pack_sizes ON item_pack_sizes.pk_id = stock_batch.item_pack_size_id
                WHERE
                        stock_master.to_warehouse_id = $wh_id
                AND (
                        stock_detail.is_received IS NULL
                        OR stock_detail.is_received = 0
                )
                AND stock_master.transaction_type_id = 2
                AND stock_master.transaction_date > '2014-07-31' AND
                stock_master.draft = 0 AND
                stock_detail.`temporary` = 0";
        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function getDataEntryStatusFederal() {

        if ($this->form_values['role_id'] == 3 || $this->form_values['wh_type'] == 1 || $this->form_values['role_id'] == 4 || $this->form_values['role_id'] == 6 || $this->form_values['role_id'] == 7 || $this->form_values['role_id'] == 17) {
            $str_qry1 = "SELECT
	*
FROM
	(
		SELECT
			stock_master.pk_id,
			stock_master.transaction_date AS transactionDate,
			warehouses.warehouse_name,
			warehouses.pk_id AS wh_id,
			stock_master.from_warehouse_id AS wh_from_id,
			stock_master.transaction_type_id
		FROM
			stock_detail
		INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
		INNER JOIN warehouses ON (
			stock_master.to_warehouse_id = warehouses.pk_id
			OR stock_master.from_warehouse_id = warehouses.pk_id
		)
		INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
		WHERE
			stakeholders.pk_id = 1
		AND stakeholders.geo_level_id = 1
		AND stock_master.draft = 0
		AND stakeholders.stakeholder_type_id = 1
		AND warehouses.`status` = 1
		AND stock_master.transaction_type_id = 2
		ORDER BY
			transactionDate DESC
		LIMIT 1
	) A
UNION
	(
		SELECT
			stock_master.pk_id,
			stock_master.transaction_date AS transactionDate,
			warehouses.warehouse_name,
			warehouses.pk_id AS wh_id,
			stock_master.from_warehouse_id AS wh_from_id,
			stock_master.transaction_type_id
		FROM
			stock_detail
		INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
		INNER JOIN warehouses ON (
			stock_master.to_warehouse_id = warehouses.pk_id
			OR stock_master.from_warehouse_id = warehouses.pk_id
		)
		INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
		WHERE
			stakeholders.pk_id = 1
		AND stakeholders.geo_level_id = 1
		AND stock_master.draft = 0
		AND stakeholders.stakeholder_type_id = 1
		AND warehouses.`status` = 1
		AND stock_master.transaction_type_id = 1
		ORDER BY
			transactionDate DESC
		LIMIT 1
	)";

            $this->_em = Zend_Registry::get('doctrine');
            $row1 = $this->_em->getConnection()->prepare($str_qry1);
            $row1->execute();
            return $row1->fetchAll();
        }
    }

    public function getDataEntryStatusProvincial() {
        if ($this->form_values['role_id'] == 4 || $this->form_values['wh_type'] == 2 || $this->form_values['role_id'] == 3 || $this->form_values['role_id'] == 6 || $this->form_values['role_id'] == 7 || $this->form_values['role_id'] == 17) {
            $sel_prov = $this->form_values['province'];
            if ($this->form_values['role_id'] != 3) {
                $provFilter = (!empty($sel_prov) && $sel_prov != 'all') ? " AND warehouses.province_id = $sel_prov" : '';
            } else {
                $provFilter = "";
            }

            $str_qry2 = "SELECT
                *
               FROM
                (
                 SELECT
                  stock_master.transaction_date as transactionDate,
                  stock_master.pk_id,
                  warehouses.warehouse_name,
                  stock_master.transaction_type_id,
                  warehouses.pk_id AS wh_id,
                  stock_master.from_warehouse_id AS wh_from_id
                 FROM
                  stock_detail
                 INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                 INNER JOIN warehouses ON (
                  stock_master.to_warehouse_id = warehouses.pk_id
                  OR stock_master.from_warehouse_id = warehouses.pk_id
                 )
                 INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                 WHERE
                  stakeholders.geo_level_id = 2
                 AND warehouses. STATUS = 1
                 $provFilter
                 ORDER BY
                  warehouses.warehouse_name,
                  stock_master.transaction_date DESC
                ) A
               GROUP BY
                warehouse_name";


//            $str_qry2 = "SELECT
//                stock_master.pk_id,
//                MAX(stock_master.transaction_date) as transactionDate,
//                warehouses.warehouse_name,
//                stock_master.transaction_type_id,
//                warehouses.pk_id as wh_id,
//                stock_master.from_warehouse_id as wh_from_id
//                FROM
//                stock_detail
//                INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
//                INNER JOIN warehouses ON stock_master.to_warehouse_id = warehouses.pk_id OR stock_master.from_warehouse_id = warehouses.pk_id
//                INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
//                WHERE
//                stakeholders.geo_level_id = 2
//                AND
//                warehouses.status = 1
//                $provFilter
//                GROUP BY warehouses.warehouse_name
//                ORDER BY
//                transactionDate DESC ";
//echo $str_qry2;
            $this->_em = Zend_Registry::get('doctrine');
            $row2 = $this->_em->getConnection()->prepare($str_qry2);
            $row2->execute();
            return $row2->fetchAll();
        }
    }

    public function getDataEntryStatusDistrict() {


        if ($this->form_values['role_id'] == 6 || $this->form_values['wh_type'] == 4 || $this->form_values['role_id'] == 3 || $this->form_values['role_id'] == 7 || $this->form_values['role_id'] == 17) {

            $sel_prov = $this->form_values['province'];
            if ($sel_prov == "all") {
                $sel_dist = "";
            } else {
                $sel_dist = $this->form_values['district'];
            }

            if ($this->form_values['role_id'] != 3) {
                $provFilter = (!empty($sel_prov) && $sel_prov != 'all') ? " AND warehouses.province_id = $sel_prov" : '';

                $distFilter = (!empty($sel_dist) && $sel_dist != 'all') ? " AND warehouses.district_id = $sel_dist" : '';
            } else {
                $provFilter = "";
                $distFilter = "";
            }
            $str_qry3 = "SELECT
                *
               FROM
                (SELECT
                stock_master.pk_id,
                stock_master.transaction_date as transactionDate,
                warehouses.warehouse_name,
                stock_master.transaction_type_id,
                warehouses.pk_id as wh_id,
                stock_master.from_warehouse_id as wh_from_id
                FROM
                 stock_detail

                INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                  INNER JOIN warehouses ON stock_master.to_warehouse_id = warehouses.pk_id OR stock_master.from_warehouse_id = warehouses.pk_id
                INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                WHERE
                stakeholders.geo_level_id = 4
                AND
                warehouses.status = 1
                $provFilter
                $distFilter
                ORDER BY
                  warehouses.warehouse_name,
                  stock_master.transaction_date DESC
                ) A
               GROUP BY
                warehouse_name";

            $this->_em = Zend_Registry::get('doctrine');
            $row3 = $row = $this->_em->getConnection()->prepare($str_qry3);
            $row3->execute();
            return $row3->fetchAll();
        }
    }

    public function getDataEntryStatusTehsil() {

        if ($this->form_values['role_id'] == 7 || $this->form_values['wh_type'] == 5 || $this->form_values['role_id'] == 3 || $this->form_values['role_id'] == 17) {


            $sel_prov = $this->form_values['province'];
            if ($sel_prov == 'all') {
                $sel_tehsil = "";
                $sel_dist = "";
            } else {
                $sel_tehsil = $this->form_values['tehsil'];
                $sel_dist = $this->form_values['district'];
            }

            if ($this->form_values['role_id'] != 3) {
                $provFilter = (!empty($sel_prov) && $sel_prov != 'all') ? " AND warehouses.province_id = $sel_prov" : '';

                $distFilter = (!empty($sel_dist) && $sel_dist != 'all') ? " AND warehouses.district_id = $sel_dist" : '';
            } else {
                $provFilter = "";
                $distFilter = "";
            }
            if ($this->form_values['role_id'] != 3) {
                $tehsilFilter = (!empty($sel_tehsil) && $sel_tehsil != 'all') ? " AND warehouses.location_id = $sel_tehsil" : '';
            } else {
                $tehsilFilter = '';
            }
            $str_qry3 = "SELECT
                *
               FROM
                (SELECT
                stock_master.pk_id,
                stock_master.transaction_date as transactionDate,
                warehouses.warehouse_name,
                stock_master.transaction_type_id,
                   warehouses.pk_id as wh_id,
                stock_master.from_warehouse_id as wh_from_id
                FROM
                stock_detail

                INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                  INNER JOIN warehouses ON stock_master.to_warehouse_id = warehouses.pk_id OR stock_master.from_warehouse_id = warehouses.pk_id
                INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                WHERE
                stakeholders.geo_level_id = 5
                AND
                warehouses.status = 1
                $provFilter
                $distFilter
                $tehsilFilter
                ORDER BY
                  warehouses.warehouse_name,
                  stock_master.transaction_date DESC
                ) A
               GROUP BY
                warehouse_name ";

            $this->_em = Zend_Registry::get('doctrine');
            $row3 = $row = $this->_em->getConnection()->prepare($str_qry3);
            $row3->execute();
            return $row3->fetchAll();
        }
    }

    public function getBatchData() {

        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->where("sm.fromWarehouse = " . $form_values['from_wh'])
                ->andWhere("sm.toWarehouse = " . $form_values['to_wh'])
                ->andWhere("sb.itemPackSize = " . $form_values['product'])
                ->andWhere("sb.pkId = " . $form_values['batch_id'])
                ->andWhere("sm.transactionType = 2")
                ->orderBy("sd.quantity", "DESC");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getReceiveBatchData() {

        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->where("sm.fromWarehouse = " . $form_values['from_wh'])
                ->andWhere("sm.toWarehouse = " . $form_values['to_wh'])
                ->andWhere("sb.itemPackSize = " . $form_values['product'])
                ->andWhere("sb.number = '" . $form_values['batch_number'] . "'")
                ->andWhere("sm.transactionType = 1")
                ->orderBy("sd.quantity", "ASC");
        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getProductLedger() {

        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->where("sb.itemPackSize = " . $form_values['product'])
                ->andWhere("sb.warehouse = " . $warehouse)
                ->andWhere("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($form_values['from_date']) . "' AND '" . App_Controller_Functions::dateToDbFormat($form_values['to_date']) . "'")
                ->orderBy("sm.transactionDate")
                ->addOrderBy("sd.adjustmentType");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getProductOB() {
        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select('SUM(sd.quantity) as qty')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->where("sb.itemPackSize = " . $form_values['product'])
                ->andWhere("sb.warehouse = " . $warehouse)
                ->andWhere("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') < '" . App_Controller_Functions::dateToDbFormat($form_values['from_date']) . "'")
                ->orderBy("sm.transactionDate", "ASC");

        $row = $str_sql->getQuery()->getResult();
        if (count($row) > 0) {
            return $row[0]['qty'];
        } else {
            return false;
        }
    }

    public function getBatchOB() {
        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select('SUM(sd.quantity) as qty, sb.number, sb.pkId, (SUM(sd.quantity)*ips.numberOfDoses) as qty_doses')
                ->from("StockDetail", "sd")
                ->join("sd.stockMaster", "sm")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.itemPackSize = " . $form_values['product'])
                ->andWhere("sb.warehouse = " . $warehouse)
                ->andWhere("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') < '" . App_Controller_Functions::dateToDbFormat($form_values['from_date']) . "'")
                ->groupBy("sb.pkId")
                ->having("qty <> 0");

        $row = $str_sql->getQuery()->getResult();
        if (count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getProductOBBeforeAdjust() {
        $str_sql = "SELECT
                            batch_summary_before_adjust.quantity,
                            batch_summary_before_adjust.doses_per_vial
                    FROM
                            batch_summary_before_adjust
                    WHERE
                            batch_summary_before_adjust.product_id = " . $this->form_values['product'];

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return array(
                'vials' => $result[0]['quantity'],
                'doses' => $result[0]['quantity'] * $result[0]['doses_per_vial']
            );
        } else {
            return array(
                'vials' => 0,
                'doses' => 0
            );
        }
    }

    function editLedgerTranscationDate() {
        $id = $this->form_values['id'];
        $date = $this->form_values['date'];

        $stockMaster = $this->_em->getRepository("StockMaster")->find($id);
        $previous_month = $stockMaster->getTransactionDate()->format("m");
        $previous_year = $stockMaster->getTransactionDate()->format("Y");

        if (count($stockMaster) > 0) {
            $trans_type = $stockMaster->getTransactionType()->getPkId();
            if ($trans_type == 1) {
                $wh_id = $stockMaster->getToWarehouse()->getPkId();
            } else {
                $wh_id = $stockMaster->getFromWarehouse()->getPkId();
            }

            $trans = $this->getTransactionNumber($trans_type, $date, $wh_id, $stockMaster->getPkId());
            $stockMaster->setTransactionDate(new DateTime(date(App_Controller_Functions::dateToDbFormat($date))));
            $stockMaster->setTransactionNumber($trans['trans_no']);
            $stockMaster->setTransactionCounter($trans['id']);

            $this->_em->persist($stockMaster);
            $this->_em->flush();

// REP Update data for updating warehouse_data table
            $wh_data = new Model_WarehousesData();
            $stock_detail = $this->_em->getRepository("StockDetail")->findBy(array("stockMaster" => $id));

            if (count($stock_detail) > 0) {
// For Updated Date
                foreach ($stock_detail as $row1) {
                    $wh_data->form_values = array(
                        'report_month' => $row1->getStockMaster()->getTransactionDate()->format("m"),
                        'report_year' => $row1->getStockMaster()->getTransactionDate()->format("Y"),
                        'item_id' => $row1->getStockBatch()->getItemPackSize()->getPkId(),
                        'warehouse_id' => $wh_id,
                        'created_by' => $row1->getStockMaster()->getCreatedBy()->getPkId()
                    );
                    $wh_data->adjustStockReport();
                }

// For Previous Date
                foreach ($stock_detail as $row2) {
                    $wh_data->form_values = array(
                        'report_month' => $previous_month,
                        'report_year' => $previous_year,
                        'item_id' => $row2->getStockBatch()->getItemPackSize()->getPkId(),
                        'warehouse_id' => $wh_id,
                        'created_by' => $row2->getStockMaster()->getCreatedBy()->getPkId()
                    );
                    $wh_data->adjustStockReport();
                }
            }
        }

        return true;
    }

    public function getBatchShelfLife() {
        $form_values = $this->form_values;

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.number,sb.expiryDate')
                ->from("StockBatch", "sb")
                ->where("sb.number = '" . $form_values['batch_no'] . "' ");

        $row = $str_sql->getQuery()->getResult();
        if (count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getProductPhysicalQuantity() {

        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select('pst')
                ->from("PhysicalStockTakingDetail", "pst")
                ->where("pst.itemPackSize = " . $form_values['product'])
                ->andWhere("pst.warehouse =" . $warehouse)
                ->andWhere("pst.physicalStockTaking = " . Model_PhysicalStockTakingDetail::STOCKID)
                ->groupBy("pst.batchNumber")
                ->orderBy("pst.quantity", "DESC");

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getPhysicalBatchQuantity($batch_id) {
        $em = Zend_Registry::get('doctrine');
        $str_sql = $em->createQueryBuilder()
                ->select('SUM(pst.quantity) as qty')
                ->from("PhysicalStockTakingDetail", "pst")
                ->where("pst.stockBatch = " . $batch_id)
                ->andWhere("pst.physicalStockTaking = " . Model_PhysicalStockTakingDetail::STOCKID);
        //->groupBy("pst.batchNumber");

        $row = $str_sql->getQuery()->getResult();
        return $row[0]['qty'];
    }

    public function getProductPhysicalStockTakingQuantity() {

        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_sql = $this->_em->createQueryBuilder()
                ->select('pst')
                ->from("PhysicalStockTakingDetail", "pst")
                ->leftJoin("pst.stockBatch", "sb")
                ->innerJoin("pst.physicalStockTaking", "ps")
                ->where("pst.itemPackSize = " . $form_values['product'])
                ->andWhere("pst.warehouse =" . $warehouse)
                ->andWhere("pst.physicalStockTaking = " . Model_PhysicalStockTakingDetail::STOCKID);

        if (!empty($form_values['description'])) {
            $str_sql->andWhere("ps.pkId =" . $form_values['description']);
        }

        $row = $str_sql->getQuery()->getResult();
        return $row;
    }

    public function getPipelineProductReport() {
        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        $today_date = new DateTime();
        $last_year = $today_date->modify("-1 year");
        $from_date = $last_year->format('Y-m-d');
        $to_date = date("Y-m-d");
        //$from_date = "2014-01-01";
        //$to_date = date("Y-m-d");

        $shipment = new Model_Shipments();
        $min_date = $shipment->getMinDate($to_date);
        $max_date = $shipment->getMaxDate($to_date);

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_qry = "SELECT
	A.item_name,
        A.amc*6 calculated_amc,
	B.soh,
        A.amc,
        IFNULL(C.quantity,1) quantity,
        C.eta
FROM
	(
		SELECT
			IFNULL(
				Sum(stock_detail.quantity),
				0
			) * item_pack_sizes.number_of_doses AS issue,
			stock_batch.item_pack_size_id,
			item_pack_sizes.item_name,
                        epi_amc.amc
		FROM
			stock_detail
		INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
		INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                INNER JOIN epi_amc ON epi_amc.item_id = item_pack_sizes.pk_id
		WHERE
			stock_master.transaction_type_id = 2
		AND stock_master.from_warehouse_id = $warehouse
		AND DATE_FORMAT(
			stock_master.transaction_date,
			'%Y-%m-%d'
		) BETWEEN '$from_date'
		AND '$to_date' AND
                item_pack_sizes.multiplier = 1 AND epi_amc.warehouse_id = $warehouse
		GROUP BY
			stock_batch.item_pack_size_id
                ORDER BY item_pack_sizes.list_rank
	) A
INNER JOIN (
	SELECT
		IFNULL(
			Sum(stock_detail.quantity),
			0
		) * item_pack_sizes.number_of_doses AS soh,
		stock_batch.item_pack_size_id,
		item_pack_sizes.item_name
	FROM
		stock_detail
	INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
	INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
	INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
	WHERE
		stock_batch.warehouse_id = $warehouse
	GROUP BY
		stock_batch.item_pack_size_id
) B ON A.item_pack_size_id = B.item_pack_size_id
    INNER JOIN
(SELECT
	DATE_FORMAT(
		shipments.shipment_date,
		'%M, %Y'
	) eta,
	Sum(
		shipments.shipment_quantity
	) AS quantity,
	shipments.item_pack_size_id,
	item_pack_sizes.item_name,
	stakeholder_activities.activity
FROM
	shipments
INNER JOIN item_pack_sizes ON shipments.item_pack_size_id = item_pack_sizes.pk_id
INNER JOIN stakeholder_activities ON shipments.stakeholder_activity_id = stakeholder_activities.pk_id
GROUP BY
	shipments.item_pack_size_id,
	DATE_FORMAT(
		shipments.shipment_date,
		'%Y-%m'
	),
	shipments.stakeholder_activity_id) C
ON C.item_pack_size_id = B.item_pack_size_id WHERE C.eta > '$to_date'";
//echo $str_qry;
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getSufficientProductReport() {
        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();

        $today_date = new DateTime();
        $last_year = $today_date->modify("-1 year");
        $from_date = $last_year->format('Y-m-d');
        $to_date = date("Y-m-d");
        //$from_date = "2014-01-01";
        //$to_date = date("Y-m-d");

        $shipment = new Model_Shipments();
        $min_date = $shipment->getMinDate($to_date);
        $max_date = $shipment->getMaxDate($to_date);

        if ($role_id == 2 || $role_id == 22) {
            $warehouse = $form_values['warehouse'];
        } else {
            $warehouse = $this->_identity->getWarehouseId();
        }

        $str_qry = "SELECT
	A.item_name,
	B.soh,
        A.amc,
        IFNULL(C.quantity,1) quantity,
        C.eta
FROM
	(
		SELECT
			IFNULL(
				Sum(stock_detail.quantity),
				0
			) * item_pack_sizes.number_of_doses AS issue,
			stock_batch.item_pack_size_id,
			item_pack_sizes.item_name,
                        epi_amc.amc
		FROM
			stock_detail
		INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
		INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
		INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                INNER JOIN epi_amc ON epi_amc.item_id = item_pack_sizes.pk_id
		WHERE
			stock_master.transaction_type_id = 2
		AND stock_master.from_warehouse_id = $warehouse
		AND DATE_FORMAT(
			stock_master.transaction_date,
			'%Y-%m-%d'
		) BETWEEN '$from_date'
		AND '$to_date' AND
                item_pack_sizes.multiplier = 1 AND epi_amc.warehouse_id = $warehouse
		GROUP BY
			stock_batch.item_pack_size_id
                ORDER BY item_pack_sizes.list_rank
	) A
INNER JOIN (
	SELECT
		IFNULL(
			Sum(stock_detail.quantity),
			0
		) * item_pack_sizes.number_of_doses AS soh,
		stock_batch.item_pack_size_id,
		item_pack_sizes.item_name
	FROM
		stock_detail
	INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
	INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
	INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
	WHERE
		stock_batch.warehouse_id = $warehouse
	GROUP BY
		stock_batch.item_pack_size_id
) B ON A.item_pack_size_id = B.item_pack_size_id
    INNER JOIN
(SELECT
	DATE_FORMAT(
		shipments.shipment_date,
		'%M, %Y'
	) eta,
	Sum(
		shipments.shipment_quantity
	) AS quantity,
	shipments.item_pack_size_id,
	item_pack_sizes.item_name,
	stakeholder_activities.activity
FROM
	shipments
INNER JOIN item_pack_sizes ON shipments.item_pack_size_id = item_pack_sizes.pk_id
INNER JOIN stakeholder_activities ON shipments.stakeholder_activity_id = stakeholder_activities.pk_id
GROUP BY
	shipments.item_pack_size_id,
	DATE_FORMAT(
		shipments.shipment_date,
		'%Y-%m'
	),
	shipments.stakeholder_activity_id) C
ON C.item_pack_size_id = B.item_pack_size_id WHERE C.eta > '$to_date'";
//echo $str_qry;
        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function priorityVaccinesDistribution() {
        $product_id = $this->form_values['product_id'];
        $case = $this->form_values['case'];
        $where = '';
        $wh_id = $this->_identity->getWarehouseId();

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        switch ($case) {
            case 1:
                $where = " AND
                    (placements.vvm_stage = 2 OR
                    (placements.vvm_stage = 1 AND
                    DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d')
                    BETWEEN '$today' AND '$after3month')) AND
                    stock_batch.item_pack_size_id = $product_id ";
                break;
            case 2:
                $where = " AND
                    placements.vvm_stage = 1 AND
                    DATE_FORMAT(
                            stock_batch.expiry_date,
                            '%Y-%m-%d'
                    ) BETWEEN '$after3month' AND '$afteryear' AND
                    stock_batch.item_pack_size_id = $product_id ";
                break;
            case 3:
                $where = " AND
                    placements.vvm_stage = 1 AND
                    DATE_FORMAT(
                            stock_batch.expiry_date,
                            '%Y-%m-%d'
                    ) > '$afteryear' AND
                    stock_batch.item_pack_size_id = $product_id ";
                break;
            case 4:
                $where = " AND
                    (placements.vvm_stage >= 3 OR
                    DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') < '$today')
                    AND stock_batch.item_pack_size_id = $product_id ";
                break;
        }

        $str_qry = "SELECT
                            DATE_FORMAT(
                                    stock_batch.expiry_date,
                                    '%b, %Y'
                            ) AS expiry_date,
                            stock_batch.number,
                            item_pack_sizes.item_name,
                            SUM(placements.quantity) AS quantity,
                            SUM(placements.quantity) * item_pack_sizes.number_of_doses AS doses,
                            cold_chain.asset_id as coldroom,
                            placement_locations.pk_id as coldroom_id,
                            IF(item_pack_sizes.vvm_group_id=1,IFNULL(vvm_stages.pk_id, 1),vvm_stages.vvm_stage_value) vvm
                    FROM
                            stock_batch
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                    INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                    INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                    WHERE
                    stock_batch.warehouse_id = $wh_id AND
                    item_pack_sizes.item_category_id = 1
                    $where
                    GROUP BY
                            placements.vvm_stage,
                            placements.stock_batch_id,
                            cold_chain.asset_id
                    HAVING
                            quantity > 0
                    ORDER BY
                            item_pack_sizes.list_rank, stock_batch.expiry_date";
        //echo $str_qry."<br>";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function priorityVaccinesDistributionSummary() {
        $product_id = $this->form_values['product_id'];
        $case = $this->form_values['case'];
        $where = '';
        $wh_id = $this->_identity->getWarehouseId();

        $current_date = new DateTime(date("Y-m-d"));
        $today = $current_date->format("Y-m-d");
        $month3 = $current_date->modify("+3 months");
        $after3month = $month3->format("Y-m-d");
        $month12 = $current_date->modify("+9 months");
        $afteryear = $month12->format("Y-m-d");

        switch ($case) {
            case 1:
                $where = " AND
                    (placements.vvm_stage = 2 OR
                    (placements.vvm_stage = 1 AND
                    DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d')
                    BETWEEN '$today' AND '$after3month')) AND
                    stock_batch.item_pack_size_id = $product_id ";
                break;
            case 2:
                $where = " AND
                    placements.vvm_stage = 1 AND
                    DATE_FORMAT(
                            stock_batch.expiry_date,
                            '%Y-%m-%d'
                    ) BETWEEN '$after3month' AND '$afteryear' AND
                    stock_batch.item_pack_size_id = $product_id ";
                break;
            case 3:
                $where = " AND
                    placements.vvm_stage = 1 AND
                    DATE_FORMAT(
                            stock_batch.expiry_date,
                            '%Y-%m-%d'
                    ) > '$afteryear' AND
                    stock_batch.item_pack_size_id = $product_id ";
                break;
            case 4:
                $where = " AND
                    (placements.vvm_stage >= 3 OR
                    DATE_FORMAT(stock_batch.expiry_date,'%Y-%m-%d') < '$today')
                    AND stock_batch.item_pack_size_id = $product_id ";
                break;
        }

        $str_qry = "SELECT
                            DATE_FORMAT(
                                    stock_batch.expiry_date,
                                    '%M, %Y'
                            ) AS expiry_date,
                            stock_batch.number,
                            item_pack_sizes.item_name,
                            SUM(placements.quantity) AS quantity,
                            SUM(placements.quantity) * item_pack_sizes.number_of_doses AS doses,
                            IFNULL(vvm_stages.pk_id, 1) AS vvm,
                            vvm_stages.vvm_stage_value
                    FROM
                            stock_batch
                    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    LEFT JOIN placements ON placements.stock_batch_id = stock_batch.pk_id
                    INNER JOIN vvm_stages ON placements.vvm_stage = vvm_stages.pk_id
                    WHERE
                    stock_batch.warehouse_id = $wh_id AND
                    item_pack_sizes.item_category_id = 1
                    $where
                    GROUP BY
                            item_pack_sizes.pk_id
                    HAVING
                            quantity > 0
                    ORDER BY
                            item_pack_sizes.list_rank, stock_batch.expiry_date";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getStockIssuanceByDate() {
        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();
        $wh_id = $form_values['warehouse'];
        if (empty($wh_id)) {
            $wh_id = $this->_identity->getWarehouseId();
        }

        $date = $form_values['year'] . "-" . str_pad($form_values['month'], 2, '0', STR_PAD_LEFT);

        $str_qry = "SELECT
                            item_pack_sizes.item_name,
                            ABS(IFNULL(SUM(stock_detail.quantity),0)) AS issue_vials,
                            ABS(IFNULL(SUM(stock_detail.quantity),0)) * item_pack_sizes.number_of_doses as issue_doses,
                            item_pack_sizes.number_of_doses as doses_per_vial
                    FROM
                            stock_detail
                            INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                            INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                            INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    WHERE
                            stock_master.transaction_type_id = 2 AND
                            stock_batch.warehouse_id = $wh_id AND
                            DATE_FORMAT(stock_master.transaction_date,'%Y-%m') = '$date' AND
                            item_pack_sizes.item_category_id = 1
                    GROUP BY
                            stock_batch.item_pack_size_id
                    ORDER BY
                            item_pack_sizes.list_rank ASC";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getStockReportByDate() {
        $form_values = $this->form_values;
        $role_id = $this->_identity->getRoleId();
        $wh_id = $form_values['warehouse'];
        if (empty($wh_id)) {
            $wh_id = $this->_identity->getWarehouseId();
        }

        $date = $form_values['year'] . "-" . str_pad($form_values['month'], 2, '0', STR_PAD_LEFT);

        $str_qry = "SELECT
                            item_pack_sizes.item_name,
                            ABS(IFNULL(SUM(stock_detail.quantity),0)) AS cb_vials,
                            ABS(IFNULL(SUM(stock_detail.quantity),0)) * item_pack_sizes.number_of_doses as cb_doses,
                            item_pack_sizes.number_of_doses as doses_per_vial
                    FROM
                            stock_detail
                            INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                            INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                            INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                    WHERE
                            stock_batch.warehouse_id = $wh_id AND
                            DATE_FORMAT(stock_master.transaction_date,'%Y-%m') <= '$date' AND
                            item_pack_sizes.item_category_id = 1
                    GROUP BY
                            stock_batch.item_pack_size_id
                    ORDER BY
                            item_pack_sizes.list_rank ASC";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function getStockIssueVoucherList() {
        $form_values = $this->form_values;

        $wh_id = $this->_identity->getWarehouseId();

        $date_in = $form_values['year'] . "-" . $form_values['month'];
        $date_in = date('Y-m', strtotime($date_in));

        $str_qry = "SELECT
            A.pk_id,
            B.warehouse_name,
            A.transaction_number,
            A.transaction_date,
            B.receiver_warehouse_id,
            A.count_voucher
            FROM
            (
            SELECT
            stock_master.pk_id,
            stock_master.transaction_date,
            stock_master.transaction_number,
            stock_master.from_warehouse_id,
            stock_master.to_warehouse_id,
            Count(stock_master.transaction_number) as count_voucher
            FROM
            stock_master
            WHERE
            stock_master.from_warehouse_id = '$wh_id'
            AND Date_format(stock_master.transaction_date,'%Y-%m') = '$date_in'
            AND stock_master.transaction_type_id = 2
              Group By stock_master.from_warehouse_id
            ) A

            RIGHT JOIN
            (SELECT
            distribution_plan.sender_warehouse_id,
            distribution_plan.receiver_warehouse_id,
            warehouses.warehouse_name
            FROM
            distribution_plan
            INNER JOIN warehouses ON distribution_plan.receiver_warehouse_id = warehouses.pk_id
            WHERE
            distribution_plan.sender_warehouse_id = '$wh_id') B  ON A.to_warehouse_id = B.receiver_warehouse_id
            ORDER BY warehouse_name";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function addStockMaster1($array) {
        // App_Controller_Functions::pr($array);
        $to_warehouse_id = $array['hdn_receive_warehouse_id'];
        $from_warehouse_id = $this->_identity->getWarehouseId();

        $str_qry_del = "DELETE stock_detail.*,stock_master.*
                            FROM
                            stock_detail,stock_master
                            where
                            stock_master.pk_id = stock_detail.stock_master_id
                            and stock_master.to_warehouse_id='$to_warehouse_id'
                            and stock_master.from_warehouse_id = '$from_warehouse_id'
                            and stock_master.draft=1 and stock_master.transaction_type_id = 2";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $row = $this->_em->getConnection()->prepare($str_qry_del);
        $row->execute();


        if (!empty($array['hdn_stock_master_id'])) {
            $stock_master = $this->_em->getRepository("StockMaster")->find($array['hdn_stock_master_id']);
        } else {
            $stock_master = new StockMaster();
        }

        $type = $array['transaction_type_id'];

        $time_arr = explode(' ', $array['transaction_date']);
        $time = date('H:i:s', strtotime($time_arr[1] . $time_arr[2]));
        $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($time_arr[0]) . '' . $time));
        $tran_type = $this->_em->getRepository('TransactionTypes')->find($type);
        $stock_master->setTransactionType($tran_type);
        $stock_master->setTransactionReference($array['transaction_reference']);
        $created_by = $this->_em->getRepository('Users')->find($this->_user_id);
        $stock_master->setCreatedBy($created_by);
        $stock_master->setParentId(0);
        $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
        $activity_id = $this->_em->getRepository('StakeholderActivities')->find($array['hdn_activity_id']);
        $stock_master->setStakeholderActivity($activity_id);
        if (!empty($array['campaign_id'])) {
            $stock_master->setCampaignId($array['campaign_id']);
        }
        if (!empty($array['dispatch_by'])) {
            $stock_master->setDispatchBy($array['dispatch_by']);
        }
//$trans = $this->getTransactionNumber($type, $array['transaction_date']);

        if ($type == 1) {
            $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($array['from_warehouse_id']);
            $stock_master->setFromWarehouse($from_warehouse_id);
            $to_warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $stock_master->setToWarehouse($to_warehouse_id);
        } else if ($type == 2) {
            $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $stock_master->setFromWarehouse($from_warehouse_id);
            $to_warehouse_id = $this->_em->getRepository('Warehouses')->find($array['warehouse']);
            $stock_master->setToWarehouse($to_warehouse_id);
        }

        $stock_master->setComments($array['comments']);
        $this->_em->persist($stock_master);
        $this->_em->flush();

        $id = $stock_master->getPkId();



        $stock = $this->_table->find($id);
        $trans = $this->getTransactionNumber($stock->getTransactionType()->getPkId(), $stock->getTransactionDate()->format("d/m/Y"), $this->_identity->getWarehouseId(), $stock->getPkId());

        $stock->setTransactionNumber($trans['trans_no']);
        $stock->setDraft(0);
        $stock->setTransactionCounter($trans['id']);

        $this->_em->persist($stock);
        $this->_em->flush();


        return $id;
    }

    public function addStockMasterTemp($array) {
        //  App_Controller_Functions::pr($array);

        $to_warehouse_id = $array['hdn_receive_warehouse_id'];
        $from_warehouse_id = $this->_identity->getWarehouseId();



        $str_qry_del = "DELETE stock_detail.*,stock_master.*
                            FROM
                            stock_detail,stock_master
                            where
                            stock_master.pk_id = stock_detail.stock_master_id
                            and stock_master.to_warehouse_id='$to_warehouse_id'
                            and stock_master.from_warehouse_id = '$from_warehouse_id'
                            and stock_master.draft=1 and stock_master.transaction_type_id = 2";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $row = $this->_em->getConnection()->prepare($str_qry_del);
        $row->execute();



        if (!empty($array['hdn_stock_master_id'])) {
            $hdn_stock_master_id = $array['hdn_stock_master_id'];
            $str_qry_del = "DELETE stock_detail.*
                            FROM
                            stock_detail,stock_master
                            where
                            stock_master.pk_id = stock_detail.stock_master_id
                            and stock_master.pk_id='$hdn_stock_master_id' ";


            $this->_em = Zend_Registry::get('doctrine');
            $row = $row = $this->_em->getConnection()->prepare($str_qry_del);
            $row->execute();

            $stock_master = $this->_em->getRepository("StockMaster")->find($array['hdn_stock_master_id']);
        } else {
            $stock_master = new StockMaster();
        }
        $type = $array['transaction_type_id'];

        $time_arr = explode(' ', $array['transaction_date']);
        $time = date('H:i:s', strtotime($time_arr[1] . $time_arr[2]));
        $stock_master->setTransactionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($time_arr[0]) . '' . $time));
        $tran_type = $this->_em->getRepository('TransactionTypes')->find($type);
        $stock_master->setTransactionType($tran_type);
        $stock_master->setTransactionReference($array['transaction_reference']);
        $created_by = $this->_em->getRepository('Users')->find($this->_user_id);
        $stock_master->setCreatedBy($created_by);
        $stock_master->setParentId(0);
        $stock_master->setCreatedDate(new \DateTime(date("Y-m-d")));
        $activity_id = $this->_em->getRepository('StakeholderActivities')->find($array['hdn_activity_id']);
        $stock_master->setStakeholderActivity($activity_id);
        if (!empty($array['campaign_id'])) {
            $stock_master->setCampaignId($array['campaign_id']);
        }
        if (!empty($array['dispatch_by'])) {
            $stock_master->setDispatchBy($array['dispatch_by']);
        }
//$trans = $this->getTransactionNumber($type, $array['transaction_date']);

        if ($type == 1) {
            $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($array['from_warehouse_id']);
            $stock_master->setFromWarehouse($from_warehouse_id);
            $to_warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $stock_master->setToWarehouse($to_warehouse_id);
        } else if ($type == 2) {
            $from_warehouse_id = $this->_em->getRepository('Warehouses')->find($this->_identity->getWarehouseId());
            $stock_master->setFromWarehouse($from_warehouse_id);
            $to_warehouse_id = $this->_em->getRepository('Warehouses')->find($array['hdn_receive_warehouse_id']);
            $stock_master->setToWarehouse($to_warehouse_id);
        }

        $stock_master->setComments($array['comments']);

        $stock_master->setTransactionNumber('TEMP');
        $stock_master->setDraft(1);


        $this->_em->persist($stock_master);
        $this->_em->flush();

        $id = $stock_master->getPkId();

        return $id;
    }

    public function getIssueTemp() {

        $sender_warehouse_id = $this->form_values['sender_warehouse_id'];
        $receive_warehouse_id = $this->form_values['receive_warehouse_id'];
        $str_sql = "SELECT

            DATE_FORMAT(stock_master.transaction_date,'%d/%m/%Y %h:%i %p') as transaction_date,
            stock_batch.item_pack_size_id,
            stock_detail.stock_batch_id,
            DATE_FORMAT(stock_batch.expiry_date,'%d %M, %Y') as expiry_date,
            stock_detail.quantity,
            stock_master.transaction_reference,
            stock_master.comments
            FROM
            stock_detail
            INNER JOIN stock_master ON stock_master.pk_id = stock_detail.stock_master_id
            INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
            WHERE
            stock_master.from_warehouse_id = '$sender_warehouse_id' and "
                . "stock_master.to_warehouse_id = '$receive_warehouse_id' and "
                . "stock_master.draft = 1 and "
                . "stock_master.transaction_type_id= 2";

        $rec = $this->_em->getConnection()->prepare($str_sql);

        $rec->execute();
        $result = $rec->fetchAll();
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    public function activityLogSearch() {

        $wh_id = $this->_identity->getWarehouseId();

        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $date_where = "and DATE_FORMAT(stock_master.created_date,'%Y-%m-%d') BETWEEN '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_from']) . "' AND '" . App_Controller_Functions::dateToDbFormat($this->form_values['date_to']) . "'";
        } else {
            $date_from = date('Y-m' . '-01');
            $date_to = date('Y-m-d');
            $date_where = "and DATE_FORMAT(stock_master.created_date,'%Y-%m-%d') BETWEEN '" . $date_from . "' AND '" . $date_to . "'";
        }

        $querypro = "SELECT
                DISTINCT
                stock_master.pk_id,
                stock_master.transaction_date,
                stock_master.transaction_number,
                stock_master.transaction_type_id,
                stock_master.transaction_reference,
                ABS(stock_detail.quantity) as quantity,
                item_pack_sizes.item_name,
                stock_batch.number,
                item_units.item_unit_name,
                stock_batch.expiry_date,
                stock_master.created_date,
                from_warehouse.warehouse_name as from_warehouse_name,
                to_warehouse.warehouse_name as to_warehouse_name,
                stock_master.action_type,
                users.user_name
                FROM
                stock_master_history as stock_master
                INNER JOIN stock_detail_history  as stock_detail ON stock_master.master_id = stock_detail.stock_master_id 
                INNER JOIN stock_batch as stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                INNER JOIN item_units ON item_pack_sizes.item_unit_id = item_units.pk_id
                INNER JOIN warehouses AS `from_warehouse` ON stock_master.from_warehouse_id = from_warehouse.pk_id
                INNER JOIN warehouses AS `to_warehouse` ON stock_master.to_warehouse_id = to_warehouse.pk_id
                INNER JOIN users ON stock_master.created_by = users.pk_id
                WHERE
                stock_master.draft = 0 AND
                stock_detail.temporary = 0 AND
                stock_batch.warehouse_id = '$wh_id'
                $date_where
                ORDER BY transaction_type_id,transaction_date";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $row->execute();
        return $row->fetchAll();
    }

    public function getFederalWarehouses() {

        if ($this->form_values['role_id'] == 3 || $this->form_values['wh_type'] == 1 || $this->form_values['role_id'] == 17) {

            $str_qry1 = "SELECT
                                warehouses.pk_id,
                                warehouses.warehouse_name
                            FROM
                                warehouses
                                INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                            WHERE
                                stakeholders.geo_level_id = 1
                                AND stakeholders.pk_id = 1";

            $this->_em = Zend_Registry::get('doctrine');
            $row1 = $this->_em->getConnection()->prepare($str_qry1);
            $row1->execute();
            return $row1->fetchAll();
        }
    }

    public function getProvincialWarehouses() {


        if ($this->form_values['role_id'] == 4 || $this->form_values['wh_type'] == 2 || $this->form_values['role_id'] == 3 || $this->form_values['role_id'] == 17) {
            $sel_prov = $this->form_values['province'];
            if ($this->form_values['role_id'] != 3) {
                $provFilter = (!empty($sel_prov) && $sel_prov != 'all') ? " AND warehouses.province_id = $sel_prov" : '';
            } else {
                $provFilter = "";
            }

            $str_qry1 = "SELECT
                        warehouses.pk_id,
                        warehouses.warehouse_name
                    FROM
                        warehouses
                        INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                    WHERE
                        stakeholders.geo_level_id = 2
                        AND stakeholders.pk_id = 2
                        $provFilter    
                    ORDER BY
                        warehouses.warehouse_name";

            $this->_em = Zend_Registry::get('doctrine');
            $row1 = $this->_em->getConnection()->prepare($str_qry1);
            $row1->execute();
            return $row1->fetchAll();
        }
    }

    public function getDistrictWarehouses() {

        if ($this->form_values['role_id'] == 6 || $this->form_values['wh_type'] == 4 || $this->form_values['role_id'] == 3 || $this->form_values['role_id'] == 7 || $this->form_values['role_id'] == 17) {

            $sel_prov = $this->form_values['province'];
            if ($sel_prov == "all") {
                $sel_dist = "";
            } else {
                $sel_dist = $this->form_values['district'];
            }

            if ($this->form_values['role_id'] != 3) {
                $provFilter = (!empty($sel_prov) && $sel_prov != 'all') ? " AND warehouses.province_id = $sel_prov" : '';

                $distFilter = (!empty($sel_dist) && $sel_dist != 'all') ? " AND warehouses.district_id = $sel_dist" : '';
            } else {
                $provFilter = "";
                $distFilter = "";
            }


            $str_qry1 = "SELECT
                        warehouses.pk_id,
                        warehouses.warehouse_name
                    FROM
                        warehouses
                        INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                      
                    WHERE
                        stakeholders.geo_level_id = 4
                        AND stakeholders.pk_id = 4
                        AND warehouses.status = 1
                        $provFilter
                        $distFilter
                    ORDER BY
                        warehouses.warehouse_name";

            $this->_em = Zend_Registry::get('doctrine');
            $row1 = $this->_em->getConnection()->prepare($str_qry1);
            $row1->execute();
            return $row1->fetchAll();
        }
    }

    public function getTehsilWarehouses() {

        if ($this->form_values['role_id'] == 7 || $this->form_values['wh_type'] == 5 || $this->form_values['role_id'] == 3 || $this->form_values['role_id'] == 17) {

            $sel_prov = $this->form_values['province'];
            if ($sel_prov == 'all') {
                $sel_tehsil = "";
                $sel_dist = "";
            } else {
                $sel_tehsil = $this->form_values['tehsil'];
                $sel_dist = $this->form_values['district'];
            }

            if ($this->form_values['role_id'] != 3) {
                $provFilter = (!empty($sel_prov) && $sel_prov != 'all') ? " AND warehouses.province_id = $sel_prov" : '';

                $distFilter = (!empty($sel_dist) && $sel_dist != 'all') ? " AND warehouses.district_id = $sel_dist" : '';
            } else {
                $provFilter = "";
                $distFilter = "";
            }
            if ($this->form_values['role_id'] != 3) {
                $tehsilFilter = (!empty($sel_tehsil) && $sel_tehsil != 'all') ? " AND warehouses.location_id = $sel_tehsil" : '';
            } else {
                $tehsilFilter = '';
            }

            $str_qry1 = "SELECT
	*
FROM
	(
		SELECT
			warehouses.pk_id,
			warehouses.warehouse_name
			
		FROM
			stock_detail
		INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
		INNER JOIN warehouses ON stock_master.to_warehouse_id = warehouses.pk_id
		OR stock_master.from_warehouse_id = warehouses.pk_id
		INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
		INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
		WHERE
			stakeholders.geo_level_id = 5
		AND warehouses. STATUS = 1
                $provFilter
                $distFilter
                $tehsilFilter
		ORDER BY
			warehouses.warehouse_name,
			stock_master.transaction_date DESC
	) A
GROUP BY
	warehouse_name";

            $this->_em = Zend_Registry::get('doctrine');
            $row1 = $this->_em->getConnection()->prepare($str_qry1);
            $row1->execute();
            return $row1->fetchAll();
        }
    }

    public function getAdjustmentData() {

        if (!empty($this->form_values['wh_id'])) {
            $wh_id = $this->form_values['wh_id'];
        }

        $str_sql = "SELECT
                        stock_batch.warehouse_id,
                        item_pack_sizes.item_name,
                        stock_batch.number AS batch_number,
                        stock_batch.quantity AS batch_qty,
                        stock_batch.expiry_date,
                        placement_summary.quantity AS placed_qty,
                        placement_summary.placement_location_id
                    FROM
                        stock_batch
                        INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                        LEFT JOIN placement_summary ON stock_batch.pk_id = placement_summary.stock_batch_id
                    WHERE
                        stock_batch.quantity > 0
                        AND stock_batch.warehouse_id = $wh_id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll();
    }

}
