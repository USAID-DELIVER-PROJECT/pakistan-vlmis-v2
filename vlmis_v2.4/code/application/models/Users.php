<?php

/**
 * Model_Users
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_Users extends Model_Base {

    protected $_table;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('Users');
    }

    public function getUsers($order = null, $sort = null) {
        if (!empty($this->form_values)) {
            return $this->_table->findBy($this->form_values);
        } else {
            $qry = $this->_em->createQueryBuilder()
                    ->select("u")
                    ->from("Users", "u")
                    ->join("u.role", "r")
                    ->join("u.createdBy", "cb")
                    ->where("r.category = " . Model_Roles::COLDCHAIN);

            if ($order == 'login_id') {
                $qry->orderBy("u.loginId", $sort);
            }
            if ($order == 'role') {
                $qry->orderBy("r.roleName", $sort);
            }
            if ($order == 'created_by') {
                $qry->orderBy("cb.userName", $sort);
            }
            if ($order == 'logged_at') {
                $qry->orderBy("u.loggedAt", $sort);
            }

            return $qry->getQuery()->getResult();
        }
    }

    public function getAllUsers($order = null, $sort = null) {
        $form_values = $this->form_values;


        if (!empty($form_values['page']) && $form_values['page'] == 'routine') {
            $where[] = "s.pkId =  '9' and r.pkId='8'   ";
        }
        if (!empty($form_values['page']) && $form_values['page'] == 'campaigns') {
            $where[] = "s.pkId =  '10' and r.pkId IN (14,15,16) ";
        }
        if (!empty($form_values['page']) && $form_values['page'] == 'im') {
            $where[] = "s.pkId = '1' and r.pkId='8' ";
        }
        if (!empty($form_values['page']) && $form_values['page'] == 'policy') {
            $where[] = "s.pkId = '1' and r.pkId='17'";
        }
        if (!empty($form_values['search_policy_users'])) {
            $where[] = "u.loginId =  '" . $form_values['search_policy_users'] . "' ";
        }
        if (!empty($form_values['office_type']) && $form_values['office_type'] == 1) {
            $where[] = "so.pkId =  '" . $form_values['office_type'] . "' ";
        }
        if (!empty($form_values['combo1'])) {
            $where[] = "p.pkId = '" . $form_values['combo1'] . "' and  so.pkId =  '" . $form_values['office_type'] . "' ";
        }
//        if (!empty($form_values['combo1'])) {
//            $where[] = "p.pkId = '" . $form_values['combo1'] . "' and  so.pkId =  '" . $form_values['office_type'] . "' ";
//        }
        if (!empty($form_values['combo2'])) {
            $where[] = "d.pkId = '" . $form_values['combo2'] . "' and  so.pkId =  '" . $form_values['office_type'] . "' ";
        }
        if (!empty($form_values['combo3'])) {
            $where[] = "l.pkId = '" . $form_values['combo3'] . "' and  so.pkId =  '" . $form_values['office_type'] . "' ";
        }
        if (!empty($form_values['combo4'])) {
            $where[] = "l.pkId = '" . $form_values['combo4'] . "' and  so.pkId =  '" . $form_values['office_type'] . "' ";
        }
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $qry = $this->_em->createQueryBuilder()
                ->select("u.pkId,u.loginId,p.locationName as ProvinceName,d.locationName as districtName,l.locationName as Parent,"
                        . "s.stakeholderName")
                ->from("WarehouseUsers", "wu")
                ->join("wu.user", "u")
                ->join("u.role", "r")
                ->join("wu.warehouse", "w")
                ->join("w.location", "l")
                ->join("l.province", "p")
                ->join("l.district", "d")
                ->join("w.stakeholderOffice", "so")
                ->join("u.stakeholder", "s")
                ->where($where_s);
        echo $qry->getQuery()->getSql();

        return $qry->getQuery()->getResult();
    }

    public function getAllImUsers($order = null, $sort = null) {
        $form_values = $this->form_values;
        //   $where = "r.pkId='8' ";

        $where[] = "s.pkId = '1'  ";

        if (!empty($form_values['office_type'])) {
            $where[] = "so.pkId =  '" . $form_values['office_type'] . "' ";
        }
        if (!empty($form_values['combo1'])) {
            $where[] = "p.pkId = '" . $form_values['combo1'] . "' ";
        }

        if (!empty($form_values['combo2'])) {
            $where[] = "d.pkId = '" . $form_values['combo2'] . "'  ";
        }
        if (!empty($form_values['combo3'])) {
            $where[] = "l.pkId = '" . $form_values['combo3'] . "'  ";
        }
        if (!empty($form_values['combo4'])) {
            $where[] = "l.pkId = '" . $form_values['combo4'] . "'  ";
        }
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
        }

        $qry = $this->_em->createQueryBuilder()
                ->select("u.pkId,u.loginId,r.pkId as role,p.locationName as ProvinceName,d.locationName as districtName,l.locationName as Parent,"
                        . "s.stakeholderName")
                ->from("WarehouseUsers", "wu")
                ->join("wu.user", "u")
                ->join("u.role", "r")
                ->join("wu.warehouse", "w")
                ->join("w.location", "l")
                ->join("l.province", "p")
                ->join("l.district", "d")
                ->join("w.stakeholderOffice", "so")
                ->join("u.stakeholder", "s")
                ->where($where_s);
//echo $qry->getQuery()->getSql();

        return $qry->getQuery()->getResult();
    }

    public function getUserIdByWarehouseId($wh_id) {
        $user = Zend_Registry::get('doctrine')->getRepository('WarehouseUsers')->findOneBy(array("warehouse" => $wh_id, "isDefault" => 1));
        if (count($user) > 0) {
            return $user->getUser()->getPkId();
        } else {
            return false;
        }
    }

    public function updateUserToken($hash, $wh_id) {
        $user_id = $this->getUserIdByWarehouseId($wh_id);
        $user = Zend_Registry::get('doctrine')->getRepository('Users')->find($user_id);
        $user->setAuth($hash);

        $this->_em->persist($user);
        $this->_em->flush();

        return array(array("message" => "Hash has been updated successfully", "login_id" => $user->getLoginId(), "user_id" => $user->getPkId()));
    }

    public function getRIUsers() {
        $form_values = $this->form_values;
        
        $qry = $this->_em->createQueryBuilder()
                ->select("wu")
                ->from("WarehouseUsers", "wu")
                ->join("wu.user", "u")
                ->join("u.role", "r")
                ->join("wu.warehouse", "w")
                ->join("w.stakeholderOffice", "so")
                ->where("so.geoLevel = 6");
        if (!empty($form_values['loc_id'])) {
            $qry->andWhere("w.location = " . $form_values['loc_id']);
        }
        $qry->andWhere("r.pkId = 8");
        //echo $qry->getQuery()->getSql();
        return $qry->getQuery()->getResult();
    }

    public function getAllCampaignUsers($order = null, $sort = null) {
        $form_values = $this->form_values;
        if (!empty($form_values['office_type']) && $form_values['office_type'] == 1 || $form_values['office_type'] == 2) {

            if (!empty($form_values['page']) && $form_values['page'] == 'campaigns') {
                $where[] = "s.pkId =  '10' AND r.pkId IN (14,15) ";
            }
            if (!empty($form_values['office_type']) && $form_values['office_type'] == 1) {
                $where[] = "l.pkId = '10'  ";
            }
            if (!empty($form_values['combo1'])) {
                $where[] = "l.pkId = '" . $form_values['combo1'] . "'  ";
            }

            if (is_array($where)) {
                $where_s = implode(" AND ", $where);
            }

            $qry = $this->_em->createQueryBuilder()
                    ->select("DISTINCT u.pkId,u.loginId,l.locationName as ProvinceName,l.locationName as districtName,l.locationName as Parent,"
                            . "s.stakeholderName")
                    ->from("Users", "u")
                    ->join("u.role", "r")
                    ->join("u.location", "l")
                    ->join("u.stakeholder", "s")
                    ->where($where_s);
            return $qry->getQuery()->getResult();
        }

        if (!empty($form_values['office_type']) && $form_values['office_type'] == 4) {

            if (!empty($form_values['page']) && $form_values['page'] == 'campaigns') {
                $where[] = "s.pkId =  '10' and r.pkId='16' ";
            }
            if (!empty($form_values['office_type']) && $form_values['office_type'] == 1) {

                $where[] = "l.pkId = '10'  ";
            }

            if (!empty($form_values['combo1'])) {
                $where[] = "p.pkId = '" . $form_values['combo1'] . "'  ";
            }

            if (!empty($form_values['combo2'])) {
                $where[] = "d.pkId = '" . $form_values['combo2'] . "' ";
            }

            if (is_array($where)) {
                $where_s = implode(" AND ", $where);
            }

            $qry = $this->_em->createQueryBuilder()
                    ->select("DISTINCT u.pkId,u.loginId,p.locationName as ProvinceName,d.locationName as districtName,l.locationName as Parent,"
                            . "s.stakeholderName")
                    ->from("WarehouseUsers", "wu")
                    ->join("wu.user", "u")
                    ->join("u.role", "r")
                    ->join("wu.warehouse", "w")
                    ->join("u.location", "l")
                    ->join("l.province", "p")
                    ->join("l.district", "d")
                    ->join("w.stakeholderOffice", "so")
                    ->join("u.stakeholder", "s")
                    ->where($where_s);
            return $qry->getQuery()->getResult();
        }
    }

    public function getCampaignUsers() {
        $form_values = $this->form_values;

        $type = '';
        if (!empty($form_values['office_type'])) {
            $type = $form_values['office_type'];
        }

        switch ($type) {
            case 1:
                $role = 14;
                $loc_id = 10;
                break;
            case 2:
                $role = 15;
                $loc_id = $form_values['combo1'];
                break;
            case 4:
                $role = 16;
                $loc_id = $form_values['combo2'];
                break;
            default:
                $role = "14,15,16";
                break;
        }

        $qry = $this->_em->createQueryBuilder()
                ->select("DISTINCT u")
                ->from("Users", "u")
                ->where("u.role IN ($role)");
        if (!empty($loc_id)) {
            $qry->andWhere("u.location = $loc_id");
        }
        return $qry->getQuery()->getResult();
    }

    public function getAllPolicyUsers($order = null, $sort = null) {
        $form_values = $this->form_values;

        $type = '';
        if (!empty($form_values['office_type'])) {
            $type = $form_values['office_type'];
        }

        switch ($type) {
            case 1:
                $role = 17;
                $loc_id = 10;
                break;
            case 2:
                $role = 19;
                $loc_id = $form_values['combo1'];
                break;
            case 4:
                $role = 20;
                $loc_id = $form_values['combo2'];
                break;
            default:
                $role = "17,19,20";
                break;
        }

        $qry = $this->_em->createQueryBuilder()
                ->select("DISTINCT u")
                ->from("Users", "u")
                ->where("u.role IN ($role)");
        if (!empty($loc_id)) {
            $qry->andWhere("u.location = $loc_id");
        }
        // echo $qry->getQuery()->getSql();
        return $qry->getQuery()->getResult();
    }

    public function getAllUsersForCluster() {
        $form_values = $this->form_values;

        $qry = $this->_em->createQueryBuilder()
                ->select("Distinct u.loginId,u.pkId")
                ->from("WarehouseUsers", "wu")
                ->join("wu.user", "u")
                ->join("wu.warehouse", "w")
                ->join("w.stakeholderOffice", "s")
                ->join("w.district", "d")
                ->where("d.pkId=" . $form_values['district_id'])
                ->AndWhere("s.pkId=6");
        echo $qry->getQuery()->getSql();
        return $qry->getQuery()->getResult();
    }

    public function checkUsers() {

        $form_values = $this->form_values;

        if ($form_values['office_type_add'] == 1) {
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("u.userName")
                    ->from('Users', 'u')
                    ->where("u.userName= '" . $form_values['user_name_add'] . "' ");

            $rs = $str_sql->getQuery()->getResult();
            return $rs;
        }
        if ($form_values['office_type_add'] != 1) {
            $where = "p.pkId='" . $form_values['province'] . "'  ";
            // if (is_array($where)) {
            //     $where_s = implode(" AND ", $where);
            // }
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("u.userName")
                    ->from('Users', 'u')
                    ->join('u.location', 'p')
                    ->where("u.userName= '" . $form_values['user_name_add'] . "' ")
                    ->AndWhere($where);

            $rs = $str_sql->getQuery()->getResult();
            return $rs;
        }
    }

    public function checkUsersUpdate() {

        $form_values = $this->form_values;

        if ($form_values['office_type_edit'] == 1) {
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("u.userName")
                    ->from('Users', 'u')
                    ->where("u.userName= '" . $form_values['user_name_update'] . "' ");

            $rs = $str_sql->getQuery()->getResult();
            return $rs;
        }
        if ($form_values['office_type_edit'] != 1) {
            $where = "p.pkId='" . $form_values['province'] . "'  ";
            // if (is_array($where)) {
            //     $where_s = implode(" AND ", $where);
            // }
            $str_sql = $this->_em->createQueryBuilder()
                    ->select("u.userName")
                    ->from('Users', 'u')
                    ->join('u.location', 'p')
                    ->where("u.userName= '" . $form_values['user_name_update'] . "' ")
                    ->AndWhere($where);

            $rs = $str_sql->getQuery()->getResult();
            return $rs;
        }
    }

    public function checkUsersUpdatePolicy() {

        $form_values = $this->form_values;
        $str_sql = $this->_em->createQueryBuilder()
                ->select("u.userName")
                ->from('Users', 'u')
                ->where("u.userName= '" . $form_values['user_name_update'] . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function checkUsersPolicy() {

        $form_values = $this->form_values;
        $str_sql = $this->_em->createQueryBuilder()
                ->select("u.userName")
                ->from('Users', 'u')
                ->where("u.userName= '" . $form_values['user_name_add'] . "' ");

        $rs = $str_sql->getQuery()->getResult();
        return $rs;
    }

    public function saveUserFeedback() {
        if (!empty($this->form_values['name'])) {
            $name = $this->form_values['name'];
        }
        if (!empty($this->form_values['e_mail'])) {
            $e_mail = $this->form_values['e_mail'];
        }
        if (!empty($this->form_values['phone'])) {
            $phone = $this->form_values['phone'];
        }
        if (!empty($this->form_values['department'])) {
            $department = $this->form_values['department'];
        }
        if (!empty($this->form_values['message'])) {
            $message = $this->form_values['message'];
        }

        $str_qry = "INSERT INTO user_feedback
                        (user_feedback.`name`,
                        user_feedback.email,
                        user_feedback.phone,
                        user_feedback.department,
                        user_feedback.message,
                        user_feedback.date)
                    VALUES ( '$name', '$e_mail', '$phone', '$department', '$message', NOW()
                            )";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return true;
    }

    public function getUserFeedback() {

        $str_qry = "SELECT
                        user_feedback.pk_id,
                        user_feedback.`name`,
                        user_feedback.email,
                        user_feedback.phone,
                        user_feedback.department,
                        user_feedback.message,
                        user_feedback.date
                    FROM
                        user_feedback";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return $row->fetchAll();
    }

    public function registerUser() {

        if (!empty($this->form_values['e_mail'])) {
            $e_mail = $this->form_values['e_mail'];
        }
        if (!empty($this->form_values['enc_pswd'])) {
            $enc_pswd = $this->form_values['enc_pswd'];
        }
        if (!empty($this->form_values['role_id'])) {
            $role_id = $this->form_values['role_id'];
        }
        if (!empty($this->form_values['organization'])) {
            $organization = $this->form_values['organization'];
        }
        if (!empty($this->form_values['country'])) {
            $country = $this->form_values['country'];
        }
        if (!empty($this->form_values['address'])) {
            $address = $this->form_values['address'];
        }

        $str_qry = "INSERT INTO users
                        (users.`login_id`,
                        users.password,
                        users.email,
                        users.organization,
                        users.country,
                        users.address,
                        users.role_id,
                        users.status,
                        users.user_name)
                    VALUES ( '$e_mail', '$enc_pswd', '$e_mail', '$organization', '$country', '$address', '$role_id', '0', '$e_mail'
                            )";


        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return true;
    }

    public function isEmailTaken() {

        if (!empty($this->form_values['e_mail'])) {
            $e_mail = $this->form_values['e_mail'];
        }

        $str_qry = "SELECT
                        users.login_id
                    FROM
                        users
                    WHERE
                        users.login_id = '$e_mail'";



        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }

    public function activateUserAccount() {

        if (!empty($this->form_values['id'])) {
            $id = $this->form_values['id'];
        }

        $str_qry = "UPDATE users
                        SET STATUS = '1'
                    WHERE
                        pk_id = $id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return true;
    }

    public function getUserId() {

        if (!empty($this->form_values['e_mail'])) {
            $e_mail = $this->form_values['e_mail'];
        }
        if (!empty($this->form_values['enc_pswd'])) {
            $enc_pswd = $this->form_values['enc_pswd'];
        }

        $str_qry = "SELECT
                                users.pk_id
                            FROM
                                users
                            WHERE

                                users.login_id = '$e_mail' AND
                                users.`password` = '$enc_pswd'";



        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }

    public function getDocUserPassword() {

        if (!empty($this->form_values['e_mail'])) {
            $e_mail = $this->form_values['e_mail'];
        }

        $str_qry = "SELECT
                        
                        users.`password`
                    FROM
                        users
                    WHERE
                        users.login_id = '$e_mail' AND
                        users.role_id = 32";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }

    public function getDocId() {

        if (!empty($this->form_values['url'])) {
            $url = $this->form_values['url'];
        }

        $str_qry = "SELECT
                        documents.pk_id
                    FROM
                        documents
                    WHERE
                        documents.doc_path = '$url'";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }

    public function docUserLog() {

        if (!empty($this->form_values['uid'])) {
            $u_id = $this->form_values['uid'];
        }
        if (!empty($this->form_values['docid'])) {
            $doc_id = $this->form_values['docid'];
        }
        if (!empty($this->form_values['ip'])) {
            $ip = $this->form_values['ip'];
        }


        $str_qry = "INSERT INTO user_documents 
                      (
                        user_documents.user_id,
                        user_documents.doc_id,
                        user_documents.created_date,
                        user_documents.system_ip
                       )
                    VALUES
                       (
                        '$u_id',
                        '$doc_id',
                        NOW(),
                        '$ip'
                       )";


        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);
        $row->execute();
        return true;
    }

    public function getDocUserLog() {
        
        $str_qry = "SELECT
                        user_documents.user_id,
                        user_documents.created_date AS download_date,
                        user_documents.system_ip,
                        users.login_id,
                        Count(documents.pk_id) AS total_download,
                        document_categories.category_title,
                        documents.doc_title,
                        documents.doc_path
                    FROM
                        user_documents
                        INNER JOIN users ON users.pk_id = user_documents.user_id
                        INNER JOIN documents ON user_documents.doc_id = documents.pk_id
                        AND user_documents.doc_id = documents.pk_id
                        INNER JOIN document_categories ON documents.doc_category_id = document_categories.pk_id
                    GROUP BY
                        user_documents.user_id,
                        documents.pk_id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }

    public function getDocMainCategories() {
        
        $str_qry = "SELECT
                        document_categories.pk_id,
                        document_categories.category_title
                    FROM
                        document_categories
                    WHERE
                        document_categories.parent_id = 0";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }
    
    public function getUserLoginLog() {
        
        $str_qry = "SELECT
                        users.user_name,
                        users.login_id,
                        user_login_log.ip_address,
                        DATE_FORMAT(
                                Max(user_login_log.login_time),
                                '%d/%m/%Y %h:%i:%s %p'
                        ) AS last_loggedin_at
                    FROM
                        user_login_log
                        INNER JOIN users ON user_login_log.user_id = users.pk_id
                    GROUP BY
                        user_login_log.user_id";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($str_qry);

        $row->execute();

        return $row->fetchAll();
    }
    
         
}
