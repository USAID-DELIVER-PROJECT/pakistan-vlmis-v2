<?php

namespace Doctrine\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class LocationsProxy extends \Locations implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getPkId()
    {
        $this->__load();
        return parent::getPkId();
    }

    public function setLocationName($locationName)
    {
        $this->__load();
        return parent::setLocationName($locationName);
    }

    public function getLocationName()
    {
        $this->__load();
        return parent::getLocationName();
    }

    public function setCcmLocationId($ccmLocationId)
    {
        $this->__load();
        return parent::setCcmLocationId($ccmLocationId);
    }

    public function getCcmLocationId()
    {
        $this->__load();
        return parent::getCcmLocationId();
    }

    public function setSdmsName($sdmsName)
    {
        $this->__load();
        return parent::setSdmsName($sdmsName);
    }

    public function getSdmsName()
    {
        $this->__load();
        return parent::getSdmsName();
    }

    public function setParent(\Locations $parent)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function setDistrict(\Locations $district)
    {
        $this->__load();
        return parent::setDistrict($district);
    }

    public function getDistrict()
    {
        $this->__load();
        return parent::getDistrict();
    }

    public function setGeoLevel(\GeoLevels $geoLevel)
    {
        $this->__load();
        return parent::setGeoLevel($geoLevel);
    }

    public function getGeoLevel()
    {
        $this->__load();
        return parent::getGeoLevel();
    }

    public function setLocationType(\LocationTypes $locationType)
    {
        $this->__load();
        return parent::setLocationType($locationType);
    }

    public function getLocationType()
    {
        $this->__load();
        return parent::getLocationType();
    }

    public function setProvince(\Locations $province)
    {
        $this->__load();
        return parent::setProvince($province);
    }

    public function getProvince()
    {
        $this->__load();
        return parent::getProvince();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'pkId', 'locationName', 'ccmLocationId', 'sdmsName', 'parent', 'district', 'geoLevel', 'locationType', 'province');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}