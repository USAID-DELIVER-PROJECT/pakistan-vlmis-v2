<?php

namespace Doctrine\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class StockBatchProxy extends \StockBatch implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getPkId()
    {
        $this->__load();
        return parent::getPkId();
    }

    public function setNumber($number)
    {
        $this->__load();
        return parent::setNumber($number);
    }

    public function getNumber()
    {
        $this->__load();
        return parent::getNumber();
    }

    public function setBatchMasterId($batchMasterId)
    {
        $this->__load();
        return parent::setBatchMasterId($batchMasterId);
    }

    public function getBatchMasterId()
    {
        $this->__load();
        return parent::getBatchMasterId();
    }

    public function setExpiryDate($expiryDate)
    {
        $this->__load();
        return parent::setExpiryDate($expiryDate);
    }

    public function getExpiryDate()
    {
        $this->__load();
        return parent::getExpiryDate();
    }

    public function setQuantity($quantity)
    {
        $this->__load();
        return parent::setQuantity($quantity);
    }

    public function getQuantity()
    {
        $this->__load();
        return parent::getQuantity();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setUnitPrice($unitPrice)
    {
        $this->__load();
        return parent::setUnitPrice($unitPrice);
    }

    public function getUnitPrice()
    {
        $this->__load();
        return parent::getUnitPrice();
    }

    public function setProductionDate($productionDate)
    {
        $this->__load();
        return parent::setProductionDate($productionDate);
    }

    public function getProductionDate()
    {
        $this->__load();
        return parent::getProductionDate();
    }

    public function setLastUpdate($lastUpdate)
    {
        $this->__load();
        return parent::setLastUpdate($lastUpdate);
    }

    public function getLastUpdate()
    {
        $this->__load();
        return parent::getLastUpdate();
    }

    public function setStakeholderItemPackSize(\StakeholderItemPackSizes $stakeholderItemPackSize)
    {
        $this->__load();
        return parent::setStakeholderItemPackSize($stakeholderItemPackSize);
    }

    public function getStakeholderItemPackSize()
    {
        $this->__load();
        return parent::getStakeholderItemPackSize();
    }

    public function setItemPackSize(\ItemPackSizes $itemPackSize)
    {
        $this->__load();
        return parent::setItemPackSize($itemPackSize);
    }

    public function getItemPackSize()
    {
        $this->__load();
        return parent::getItemPackSize();
    }

    public function setVvmType(\VvmTypes $vvmType)
    {
        $this->__load();
        return parent::setVvmType($vvmType);
    }

    public function getVvmType()
    {
        $this->__load();
        return parent::getVvmType();
    }

    public function setWarehouse(\Warehouses $warehouse)
    {
        $this->__load();
        return parent::setWarehouse($warehouse);
    }

    public function getWarehouse()
    {
        $this->__load();
        return parent::getWarehouse();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'pkId', 'number', 'batchMasterId', 'expiryDate', 'quantity', 'status', 'unitPrice', 'productionDate', 'lastUpdate', 'stakeholderItemPackSize', 'itemPackSize', 'vvmType', 'warehouse');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}