<?php

namespace Doctrine\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ColdChainProxy extends \ColdChain implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getPkId()
    {
        $this->__load();
        return parent::getPkId();
    }

    public function setAssetId($assetId)
    {
        $this->__load();
        return parent::setAssetId($assetId);
    }

    public function getAssetId()
    {
        $this->__load();
        return parent::getAssetId();
    }

    public function setAutoAssetId($autoAssetId)
    {
        $this->__load();
        return parent::setAutoAssetId($autoAssetId);
    }

    public function getAutoAssetId()
    {
        $this->__load();
        return parent::getAutoAssetId();
    }

    public function setSerialNumber($serialNumber)
    {
        $this->__load();
        return parent::setSerialNumber($serialNumber);
    }

    public function getSerialNumber()
    {
        $this->__load();
        return parent::getSerialNumber();
    }

    public function setEstimateLife($estimateLife)
    {
        $this->__load();
        return parent::setEstimateLife($estimateLife);
    }

    public function getEstimateLife()
    {
        $this->__load();
        return parent::getEstimateLife();
    }

    public function setWorkingSince($workingSince)
    {
        $this->__load();
        return parent::setWorkingSince($workingSince);
    }

    public function getWorkingSince()
    {
        $this->__load();
        return parent::getWorkingSince();
    }

    public function setQuantity($quantity)
    {
        $this->__load();
        return parent::setQuantity($quantity);
    }

    public function getQuantity()
    {
        $this->__load();
        return parent::getQuantity();
    }

    public function setManufactureYear($manufactureYear)
    {
        $this->__load();
        return parent::setManufactureYear($manufactureYear);
    }

    public function getManufactureYear()
    {
        $this->__load();
        return parent::getManufactureYear();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setApprovedBy($approvedBy)
    {
        $this->__load();
        return parent::setApprovedBy($approvedBy);
    }

    public function getApprovedBy()
    {
        $this->__load();
        return parent::getApprovedBy();
    }

    public function setApprovedOn($approvedOn)
    {
        $this->__load();
        return parent::setApprovedOn($approvedOn);
    }

    public function getApprovedOn()
    {
        $this->__load();
        return parent::getApprovedOn();
    }

    public function setCreatedDate($createdDate)
    {
        $this->__load();
        return parent::setCreatedDate($createdDate);
    }

    public function getCreatedDate()
    {
        $this->__load();
        return parent::getCreatedDate();
    }

    public function setCcmAssetType(\CcmAssetTypes $ccmAssetType)
    {
        $this->__load();
        return parent::setCcmAssetType($ccmAssetType);
    }

    public function getCcmAssetType()
    {
        $this->__load();
        return parent::getCcmAssetType();
    }

    public function setCcmModel(\CcmModels $ccmModel)
    {
        $this->__load();
        return parent::setCcmModel($ccmModel);
    }

    public function getCcmModel()
    {
        $this->__load();
        return parent::getCcmModel();
    }

    public function setCcmStatusHistory(\CcmStatusHistory $ccmStatusHistory)
    {
        $this->__load();
        return parent::setCcmStatusHistory($ccmStatusHistory);
    }

    public function getCcmStatusHistory()
    {
        $this->__load();
        return parent::getCcmStatusHistory();
    }

    public function setCreatedBy(\Users $createdBy)
    {
        $this->__load();
        return parent::setCreatedBy($createdBy);
    }

    public function getCreatedBy()
    {
        $this->__load();
        return parent::getCreatedBy();
    }

    public function setSource(\Stakeholders $source)
    {
        $this->__load();
        return parent::setSource($source);
    }

    public function getSource()
    {
        $this->__load();
        return parent::getSource();
    }

    public function setWarehouse(\Warehouses $warehouse)
    {
        $this->__load();
        return parent::setWarehouse($warehouse);
    }

    public function getWarehouse()
    {
        $this->__load();
        return parent::getWarehouse();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'pkId', 'assetId', 'autoAssetId', 'serialNumber', 'estimateLife', 'workingSince', 'quantity', 'manufactureYear', 'status', 'approvedBy', 'approvedOn', 'createdDate', 'ccmAssetType', 'ccmModel', 'ccmStatusHistory', 'createdBy', 'source', 'warehouse');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}