<?php

namespace Doctrine\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class UsersProxy extends \Users implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getPkId()
    {
        $this->__load();
        return parent::getPkId();
    }

    public function setUserName($userName)
    {
        $this->__load();
        return parent::setUserName($userName);
    }

    public function getUserName()
    {
        $this->__load();
        return parent::getUserName();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setCellNumber($cellNumber)
    {
        $this->__load();
        return parent::setCellNumber($cellNumber);
    }

    public function getCellNumber()
    {
        $this->__load();
        return parent::getCellNumber();
    }

    public function setRecordId($recordId)
    {
        $this->__load();
        return parent::setRecordId($recordId);
    }

    public function getRecordId()
    {
        $this->__load();
        return parent::getRecordId();
    }

    public function setLoginId($loginId)
    {
        $this->__load();
        return parent::setLoginId($loginId);
    }

    public function getLoginId()
    {
        $this->__load();
        return parent::getLoginId();
    }

    public function setDesignation($designation)
    {
        $this->__load();
        return parent::setDesignation($designation);
    }

    public function getDesignation()
    {
        $this->__load();
        return parent::getDesignation();
    }

    public function setDepartment($department)
    {
        $this->__load();
        return parent::setDepartment($department);
    }

    public function getDepartment()
    {
        $this->__load();
        return parent::getDepartment();
    }

    public function setPhoto($photo)
    {
        $this->__load();
        return parent::setPhoto($photo);
    }

    public function getPhoto()
    {
        $this->__load();
        return parent::getPhoto();
    }

    public function setAddress($address)
    {
        $this->__load();
        return parent::setAddress($address);
    }

    public function getAddress()
    {
        $this->__load();
        return parent::getAddress();
    }

    public function setPhoneNumber($phoneNumber)
    {
        $this->__load();
        return parent::setPhoneNumber($phoneNumber);
    }

    public function getPhoneNumber()
    {
        $this->__load();
        return parent::getPhoneNumber();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setLoggedAt($loggedAt)
    {
        $this->__load();
        return parent::setLoggedAt($loggedAt);
    }

    public function getLoggedAt()
    {
        $this->__load();
        return parent::getLoggedAt();
    }

    public function setFailedAt($failedAt)
    {
        $this->__load();
        return parent::setFailedAt($failedAt);
    }

    public function getFailedAt()
    {
        $this->__load();
        return parent::getFailedAt();
    }

    public function setFailedQuantity($failedQuantity)
    {
        $this->__load();
        return parent::setFailedQuantity($failedQuantity);
    }

    public function getFailedQuantity()
    {
        $this->__load();
        return parent::getFailedQuantity();
    }

    public function setAuth($auth)
    {
        $this->__load();
        return parent::setAuth($auth);
    }

    public function getAuth()
    {
        $this->__load();
        return parent::getAuth();
    }

    public function setOrganization($organization)
    {
        $this->__load();
        return parent::setOrganization($organization);
    }

    public function getOrganization()
    {
        $this->__load();
        return parent::getOrganization();
    }

    public function setCountry($country)
    {
        $this->__load();
        return parent::setCountry($country);
    }

    public function getCountry()
    {
        $this->__load();
        return parent::getCountry();
    }

    public function setCreatedDate($createdDate)
    {
        $this->__load();
        return parent::setCreatedDate($createdDate);
    }

    public function getCreatedDate()
    {
        $this->__load();
        return parent::getCreatedDate();
    }

    public function setModifiedDate($modifiedDate)
    {
        $this->__load();
        return parent::setModifiedDate($modifiedDate);
    }

    public function getModifiedDate()
    {
        $this->__load();
        return parent::getModifiedDate();
    }

    public function setRole(\Roles $role)
    {
        $this->__load();
        return parent::setRole($role);
    }

    public function getRole()
    {
        $this->__load();
        return parent::getRole();
    }

    public function setStakeholder(\Stakeholders $stakeholder)
    {
        $this->__load();
        return parent::setStakeholder($stakeholder);
    }

    public function getStakeholder()
    {
        $this->__load();
        return parent::getStakeholder();
    }

    public function setLocation(\Locations $location)
    {
        $this->__load();
        return parent::setLocation($location);
    }

    public function getLocation()
    {
        $this->__load();
        return parent::getLocation();
    }

    public function setCreatedBy(\Users $createdBy)
    {
        $this->__load();
        return parent::setCreatedBy($createdBy);
    }

    public function getCreatedBy()
    {
        $this->__load();
        return parent::getCreatedBy();
    }

    public function setModifiedBy(\Users $modifiedBy)
    {
        $this->__load();
        return parent::setModifiedBy($modifiedBy);
    }

    public function getModifiedBy()
    {
        $this->__load();
        return parent::getModifiedBy();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'pkId', 'userName', 'password', 'email', 'cellNumber', 'recordId', 'loginId', 'designation', 'department', 'photo', 'address', 'phoneNumber', 'status', 'loggedAt', 'failedAt', 'failedQuantity', 'auth', 'organization', 'country', 'createdDate', 'modifiedDate', 'role', 'stakeholder', 'location', 'createdBy', 'modifiedBy');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}